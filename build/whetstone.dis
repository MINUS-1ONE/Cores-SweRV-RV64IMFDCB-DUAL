
whetstone.exe:     file format elf64-littleriscv


Disassembly of section .text:

0000000000000000 <_start>:
       0:	595552b7          	lui	t0,0x59555
       4:	5552829b          	addiw	t0,t0,1365
       8:	7c029073          	csrw	0x7c0,t0
       c:	00019117          	auipc	sp,0x19
      10:	be410113          	addi	sp,sp,-1052 # 18bf0 <STACK>
      14:	792020ef          	jal	ra,27a6 <main>

0000000000000018 <_finish>:
      18:	a00002b7          	lui	t0,0xa0000
      1c:	2285                	addiw	t0,t0,1
      1e:	02b2                	slli	t0,t0,0xc
      20:	a0b28293          	addi	t0,t0,-1525 # ffffffff9ffffa0b <tohost+0x2fffffff4fa7fa0b>
      24:	02ce                	slli	t0,t0,0x13
      26:	0ff00313          	li	t1,255
      2a:	00628023          	sb	t1,0(t0)
      2e:	4305                	li	t1,1
      30:	0062a023          	sw	t1,0(t0)
      34:	fe0002e3          	beqz	zero,18 <_finish>
      38:	0001                	nop
      3a:	0001                	nop
      3c:	0001                	nop
      3e:	0001                	nop
      40:	0001                	nop
      42:	0001                	nop
      44:	0001                	nop
      46:	0001                	nop
      48:	0001                	nop
      4a:	0001                	nop

000000000000004c <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
      4c:	00d67563          	bgeu	a2,a3,56 <_out_buffer+0xa>
    ((char*)buffer)[idx] = character;
      50:	95b2                	add	a1,a1,a2
      52:	00a58023          	sb	a0,0(a1)
  }
}
      56:	8082                	ret

0000000000000058 <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
      58:	8082                	ret

000000000000005a <_out_rev>:
}


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
      5a:	711d                	addi	sp,sp,-96
      5c:	e4a6                	sd	s1,72(sp)
      5e:	e0ca                	sd	s2,64(sp)
      60:	fc4e                	sd	s3,56(sp)
      62:	f852                	sd	s4,48(sp)
      64:	f05a                	sd	s6,32(sp)
      66:	ec5e                	sd	s7,24(sp)
      68:	e862                	sd	s8,16(sp)
      6a:	e466                	sd	s9,8(sp)
      6c:	e06a                	sd	s10,0(sp)
      6e:	8bc6                	mv	s7,a7
      70:	ec86                	sd	ra,88(sp)
      72:	e8a2                	sd	s0,80(sp)
      74:	f456                	sd	s5,40(sp)
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
      76:	0038f893          	andi	a7,a7,3
{
      7a:	8b32                	mv	s6,a2
      7c:	84aa                	mv	s1,a0
      7e:	892e                	mv	s2,a1
      80:	89b6                	mv	s3,a3
      82:	8d3a                	mv	s10,a4
      84:	8c3e                	mv	s8,a5
      86:	8cc2                	mv	s9,a6
      88:	8a32                	mv	s4,a2
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
      8a:	10089f63          	bnez	a7,1a8 <_out_rev+0x14e>
    for (size_t i = len; i < width; i++) {
      8e:	02081793          	slli	a5,a6,0x20
      92:	0207d093          	srli	ra,a5,0x20
      96:	41808a33          	sub	s4,ra,s8
      9a:	9a32                	add	s4,s4,a2
      9c:	8432                	mv	s0,a2
      9e:	3a1c7463          	bgeu	s8,ra,446 <_out_rev+0x3ec>
      a2:	40ca02b3          	sub	t0,s4,a2
      a6:	0072f313          	andi	t1,t0,7
      aa:	08030563          	beqz	t1,134 <_out_rev+0xda>
      ae:	4705                	li	a4,1
      b0:	06e30963          	beq	t1,a4,122 <_out_rev+0xc8>
      b4:	4389                	li	t2,2
      b6:	04730f63          	beq	t1,t2,114 <_out_rev+0xba>
      ba:	450d                	li	a0,3
      bc:	04a30563          	beq	t1,a0,106 <_out_rev+0xac>
      c0:	4811                	li	a6,4
      c2:	03030b63          	beq	t1,a6,f8 <_out_rev+0x9e>
      c6:	4a95                	li	s5,5
      c8:	03530163          	beq	t1,s5,ea <_out_rev+0x90>
      cc:	4e19                	li	t3,6
      ce:	01c30763          	beq	t1,t3,dc <_out_rev+0x82>
      out(' ', buffer, idx++, maxlen);
      d2:	02000513          	li	a0,32
      d6:	00160413          	addi	s0,a2,1
      da:	9482                	jalr	s1
      dc:	8622                	mv	a2,s0
      de:	86ce                	mv	a3,s3
      e0:	85ca                	mv	a1,s2
      e2:	02000513          	li	a0,32
      e6:	0405                	addi	s0,s0,1
      e8:	9482                	jalr	s1
      ea:	8622                	mv	a2,s0
      ec:	86ce                	mv	a3,s3
      ee:	85ca                	mv	a1,s2
      f0:	02000513          	li	a0,32
      f4:	0405                	addi	s0,s0,1
      f6:	9482                	jalr	s1
      f8:	8622                	mv	a2,s0
      fa:	86ce                	mv	a3,s3
      fc:	85ca                	mv	a1,s2
      fe:	02000513          	li	a0,32
     102:	0405                	addi	s0,s0,1
     104:	9482                	jalr	s1
     106:	8622                	mv	a2,s0
     108:	86ce                	mv	a3,s3
     10a:	85ca                	mv	a1,s2
     10c:	02000513          	li	a0,32
     110:	0405                	addi	s0,s0,1
     112:	9482                	jalr	s1
     114:	8622                	mv	a2,s0
     116:	86ce                	mv	a3,s3
     118:	85ca                	mv	a1,s2
     11a:	02000513          	li	a0,32
     11e:	0405                	addi	s0,s0,1
     120:	9482                	jalr	s1
     122:	8622                	mv	a2,s0
     124:	86ce                	mv	a3,s3
     126:	0405                	addi	s0,s0,1
     128:	85ca                	mv	a1,s2
     12a:	02000513          	li	a0,32
     12e:	9482                	jalr	s1
    for (size_t i = len; i < width; i++) {
     130:	07440c63          	beq	s0,s4,1a8 <_out_rev+0x14e>
      out(' ', buffer, idx++, maxlen);
     134:	8622                	mv	a2,s0
     136:	86ce                	mv	a3,s3
     138:	85ca                	mv	a1,s2
     13a:	02000513          	li	a0,32
     13e:	9482                	jalr	s1
     140:	00140613          	addi	a2,s0,1
     144:	86ce                	mv	a3,s3
     146:	85ca                	mv	a1,s2
     148:	02000513          	li	a0,32
     14c:	9482                	jalr	s1
     14e:	00240613          	addi	a2,s0,2
     152:	86ce                	mv	a3,s3
     154:	85ca                	mv	a1,s2
     156:	02000513          	li	a0,32
     15a:	9482                	jalr	s1
     15c:	00340613          	addi	a2,s0,3
     160:	86ce                	mv	a3,s3
     162:	85ca                	mv	a1,s2
     164:	02000513          	li	a0,32
     168:	9482                	jalr	s1
     16a:	00440613          	addi	a2,s0,4
     16e:	86ce                	mv	a3,s3
     170:	85ca                	mv	a1,s2
     172:	02000513          	li	a0,32
     176:	9482                	jalr	s1
     178:	00540613          	addi	a2,s0,5
     17c:	86ce                	mv	a3,s3
     17e:	85ca                	mv	a1,s2
     180:	02000513          	li	a0,32
     184:	9482                	jalr	s1
     186:	00640613          	addi	a2,s0,6
     18a:	86ce                	mv	a3,s3
     18c:	85ca                	mv	a1,s2
     18e:	02000513          	li	a0,32
     192:	9482                	jalr	s1
     194:	00740613          	addi	a2,s0,7
     198:	86ce                	mv	a3,s3
     19a:	0421                	addi	s0,s0,8
     19c:	85ca                	mv	a1,s2
     19e:	02000513          	li	a0,32
     1a2:	9482                	jalr	s1
    for (size_t i = len; i < width; i++) {
     1a4:	f94418e3          	bne	s0,s4,134 <_out_rev+0xda>
    }
  }

  // reverse string
  while (len) {
     1a8:	018d0433          	add	s0,s10,s8
     1ac:	01440ab3          	add	s5,s0,s4
     1b0:	120c0563          	beqz	s8,2da <_out_rev+0x280>
     1b4:	41a405b3          	sub	a1,s0,s10
     1b8:	0075f613          	andi	a2,a1,7
     1bc:	c649                	beqz	a2,246 <_out_rev+0x1ec>
     1be:	4685                	li	a3,1
     1c0:	06d60963          	beq	a2,a3,232 <_out_rev+0x1d8>
     1c4:	4e89                	li	t4,2
     1c6:	05d60e63          	beq	a2,t4,222 <_out_rev+0x1c8>
     1ca:	4f0d                	li	t5,3
     1cc:	05e60363          	beq	a2,t5,212 <_out_rev+0x1b8>
     1d0:	4f91                	li	t6,4
     1d2:	03f60863          	beq	a2,t6,202 <_out_rev+0x1a8>
     1d6:	4895                	li	a7,5
     1d8:	01160d63          	beq	a2,a7,1f2 <_out_rev+0x198>
     1dc:	4799                	li	a5,6
     1de:	24f61b63          	bne	a2,a5,434 <_out_rev+0x3da>
    out(buf[--len], buffer, idx++, maxlen);
     1e2:	fff44503          	lbu	a0,-1(s0)
     1e6:	408a8633          	sub	a2,s5,s0
     1ea:	86ce                	mv	a3,s3
     1ec:	85ca                	mv	a1,s2
     1ee:	9482                	jalr	s1
  while (len) {
     1f0:	147d                	addi	s0,s0,-1
    out(buf[--len], buffer, idx++, maxlen);
     1f2:	fff44503          	lbu	a0,-1(s0)
     1f6:	408a8633          	sub	a2,s5,s0
     1fa:	86ce                	mv	a3,s3
     1fc:	85ca                	mv	a1,s2
     1fe:	9482                	jalr	s1
  while (len) {
     200:	147d                	addi	s0,s0,-1
    out(buf[--len], buffer, idx++, maxlen);
     202:	fff44503          	lbu	a0,-1(s0)
     206:	408a8633          	sub	a2,s5,s0
     20a:	86ce                	mv	a3,s3
     20c:	85ca                	mv	a1,s2
     20e:	9482                	jalr	s1
  while (len) {
     210:	147d                	addi	s0,s0,-1
    out(buf[--len], buffer, idx++, maxlen);
     212:	fff44503          	lbu	a0,-1(s0)
     216:	408a8633          	sub	a2,s5,s0
     21a:	86ce                	mv	a3,s3
     21c:	85ca                	mv	a1,s2
     21e:	9482                	jalr	s1
  while (len) {
     220:	147d                	addi	s0,s0,-1
    out(buf[--len], buffer, idx++, maxlen);
     222:	fff44503          	lbu	a0,-1(s0)
     226:	408a8633          	sub	a2,s5,s0
     22a:	86ce                	mv	a3,s3
     22c:	85ca                	mv	a1,s2
     22e:	9482                	jalr	s1
  while (len) {
     230:	147d                	addi	s0,s0,-1
    out(buf[--len], buffer, idx++, maxlen);
     232:	fff44503          	lbu	a0,-1(s0)
     236:	408a8633          	sub	a2,s5,s0
     23a:	86ce                	mv	a3,s3
  while (len) {
     23c:	147d                	addi	s0,s0,-1
    out(buf[--len], buffer, idx++, maxlen);
     23e:	85ca                	mv	a1,s2
     240:	9482                	jalr	s1
  while (len) {
     242:	088d0b63          	beq	s10,s0,2d8 <_out_rev+0x27e>
    out(buf[--len], buffer, idx++, maxlen);
     246:	fff44503          	lbu	a0,-1(s0)
     24a:	408a8633          	sub	a2,s5,s0
     24e:	86ce                	mv	a3,s3
     250:	85ca                	mv	a1,s2
     252:	9482                	jalr	s1
     254:	ffe44503          	lbu	a0,-2(s0)
  while (len) {
     258:	fff40293          	addi	t0,s0,-1
    out(buf[--len], buffer, idx++, maxlen);
     25c:	405a8633          	sub	a2,s5,t0
     260:	86ce                	mv	a3,s3
     262:	85ca                	mv	a1,s2
     264:	9482                	jalr	s1
     266:	ffd44503          	lbu	a0,-3(s0)
  while (len) {
     26a:	ffe40313          	addi	t1,s0,-2
    out(buf[--len], buffer, idx++, maxlen);
     26e:	406a8633          	sub	a2,s5,t1
     272:	86ce                	mv	a3,s3
     274:	85ca                	mv	a1,s2
     276:	9482                	jalr	s1
     278:	ffc44503          	lbu	a0,-4(s0)
  while (len) {
     27c:	ffd40713          	addi	a4,s0,-3
    out(buf[--len], buffer, idx++, maxlen);
     280:	40ea8633          	sub	a2,s5,a4
     284:	86ce                	mv	a3,s3
     286:	85ca                	mv	a1,s2
     288:	9482                	jalr	s1
     28a:	ffb44503          	lbu	a0,-5(s0)
  while (len) {
     28e:	ffc40393          	addi	t2,s0,-4
    out(buf[--len], buffer, idx++, maxlen);
     292:	407a8633          	sub	a2,s5,t2
     296:	86ce                	mv	a3,s3
     298:	85ca                	mv	a1,s2
     29a:	9482                	jalr	s1
     29c:	ffa44503          	lbu	a0,-6(s0)
  while (len) {
     2a0:	ffb40813          	addi	a6,s0,-5
    out(buf[--len], buffer, idx++, maxlen);
     2a4:	410a8633          	sub	a2,s5,a6
     2a8:	86ce                	mv	a3,s3
     2aa:	85ca                	mv	a1,s2
     2ac:	9482                	jalr	s1
     2ae:	ff944503          	lbu	a0,-7(s0)
  while (len) {
     2b2:	ffa40e13          	addi	t3,s0,-6
    out(buf[--len], buffer, idx++, maxlen);
     2b6:	86ce                	mv	a3,s3
     2b8:	41ca8633          	sub	a2,s5,t3
     2bc:	85ca                	mv	a1,s2
     2be:	9482                	jalr	s1
     2c0:	ff844503          	lbu	a0,-8(s0)
  while (len) {
     2c4:	ff940593          	addi	a1,s0,-7
    out(buf[--len], buffer, idx++, maxlen);
     2c8:	40ba8633          	sub	a2,s5,a1
  while (len) {
     2cc:	1461                	addi	s0,s0,-8
    out(buf[--len], buffer, idx++, maxlen);
     2ce:	86ce                	mv	a3,s3
     2d0:	85ca                	mv	a1,s2
     2d2:	9482                	jalr	s1
  while (len) {
     2d4:	f68d19e3          	bne	s10,s0,246 <_out_rev+0x1ec>
    out(buf[--len], buffer, idx++, maxlen);
     2d8:	9a62                	add	s4,s4,s8
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
     2da:	002bfb93          	andi	s7,s7,2
     2de:	120b8c63          	beqz	s7,416 <_out_rev+0x3bc>
    while (idx - start_idx < width) {
     2e2:	020c9d13          	slli	s10,s9,0x20
     2e6:	416a0b33          	sub	s6,s4,s6
     2ea:	020d5c13          	srli	s8,s10,0x20
     2ee:	138b7463          	bgeu	s6,s8,416 <_out_rev+0x3bc>
     2f2:	fffb4c93          	not	s9,s6
     2f6:	8652                	mv	a2,s4
     2f8:	018c80b3          	add	ra,s9,s8
     2fc:	001b0413          	addi	s0,s6,1
      out(' ', buffer, idx++, maxlen);
     300:	86ce                	mv	a3,s3
     302:	85ca                	mv	a1,s2
     304:	02000513          	li	a0,32
     308:	0070fa93          	andi	s5,ra,7
     30c:	0a05                	addi	s4,s4,1
     30e:	9482                	jalr	s1
    while (idx - start_idx < width) {
     310:	11847363          	bgeu	s0,s8,416 <_out_rev+0x3bc>
     314:	080a8663          	beqz	s5,3a0 <_out_rev+0x346>
     318:	4505                	li	a0,1
     31a:	06aa8963          	beq	s5,a0,38c <_out_rev+0x332>
     31e:	4609                	li	a2,2
     320:	04ca8e63          	beq	s5,a2,37c <_out_rev+0x322>
     324:	468d                	li	a3,3
     326:	04da8363          	beq	s5,a3,36c <_out_rev+0x312>
     32a:	4e91                	li	t4,4
     32c:	03da8863          	beq	s5,t4,35c <_out_rev+0x302>
     330:	4f15                	li	t5,5
     332:	01ea8d63          	beq	s5,t5,34c <_out_rev+0x2f2>
     336:	4f99                	li	t6,6
     338:	11fa9963          	bne	s5,t6,44a <_out_rev+0x3f0>
      out(' ', buffer, idx++, maxlen);
     33c:	8652                	mv	a2,s4
     33e:	86ce                	mv	a3,s3
     340:	85ca                	mv	a1,s2
     342:	02000513          	li	a0,32
     346:	0a05                	addi	s4,s4,1
     348:	9482                	jalr	s1
    while (idx - start_idx < width) {
     34a:	0405                	addi	s0,s0,1
      out(' ', buffer, idx++, maxlen);
     34c:	8652                	mv	a2,s4
     34e:	86ce                	mv	a3,s3
     350:	85ca                	mv	a1,s2
     352:	02000513          	li	a0,32
     356:	0a05                	addi	s4,s4,1
     358:	9482                	jalr	s1
    while (idx - start_idx < width) {
     35a:	0405                	addi	s0,s0,1
      out(' ', buffer, idx++, maxlen);
     35c:	8652                	mv	a2,s4
     35e:	86ce                	mv	a3,s3
     360:	85ca                	mv	a1,s2
     362:	02000513          	li	a0,32
     366:	0a05                	addi	s4,s4,1
     368:	9482                	jalr	s1
    while (idx - start_idx < width) {
     36a:	0405                	addi	s0,s0,1
      out(' ', buffer, idx++, maxlen);
     36c:	8652                	mv	a2,s4
     36e:	86ce                	mv	a3,s3
     370:	85ca                	mv	a1,s2
     372:	02000513          	li	a0,32
     376:	0a05                	addi	s4,s4,1
     378:	9482                	jalr	s1
    while (idx - start_idx < width) {
     37a:	0405                	addi	s0,s0,1
      out(' ', buffer, idx++, maxlen);
     37c:	8652                	mv	a2,s4
     37e:	86ce                	mv	a3,s3
     380:	85ca                	mv	a1,s2
     382:	02000513          	li	a0,32
     386:	0a05                	addi	s4,s4,1
     388:	9482                	jalr	s1
    while (idx - start_idx < width) {
     38a:	0405                	addi	s0,s0,1
      out(' ', buffer, idx++, maxlen);
     38c:	8652                	mv	a2,s4
    while (idx - start_idx < width) {
     38e:	0405                	addi	s0,s0,1
      out(' ', buffer, idx++, maxlen);
     390:	86ce                	mv	a3,s3
     392:	85ca                	mv	a1,s2
     394:	02000513          	li	a0,32
     398:	0a05                	addi	s4,s4,1
     39a:	9482                	jalr	s1
    while (idx - start_idx < width) {
     39c:	07847d63          	bgeu	s0,s8,416 <_out_rev+0x3bc>
      out(' ', buffer, idx++, maxlen);
     3a0:	8652                	mv	a2,s4
     3a2:	86ce                	mv	a3,s3
     3a4:	85ca                	mv	a1,s2
     3a6:	02000513          	li	a0,32
     3aa:	9482                	jalr	s1
     3ac:	001a0613          	addi	a2,s4,1
     3b0:	86ce                	mv	a3,s3
     3b2:	85ca                	mv	a1,s2
     3b4:	02000513          	li	a0,32
     3b8:	9482                	jalr	s1
     3ba:	002a0613          	addi	a2,s4,2
     3be:	86ce                	mv	a3,s3
     3c0:	85ca                	mv	a1,s2
     3c2:	02000513          	li	a0,32
     3c6:	9482                	jalr	s1
     3c8:	003a0613          	addi	a2,s4,3
     3cc:	86ce                	mv	a3,s3
     3ce:	85ca                	mv	a1,s2
     3d0:	02000513          	li	a0,32
     3d4:	9482                	jalr	s1
     3d6:	004a0613          	addi	a2,s4,4
     3da:	86ce                	mv	a3,s3
     3dc:	85ca                	mv	a1,s2
     3de:	02000513          	li	a0,32
     3e2:	9482                	jalr	s1
     3e4:	005a0613          	addi	a2,s4,5
     3e8:	86ce                	mv	a3,s3
     3ea:	85ca                	mv	a1,s2
     3ec:	02000513          	li	a0,32
     3f0:	9482                	jalr	s1
     3f2:	006a0613          	addi	a2,s4,6
     3f6:	86ce                	mv	a3,s3
     3f8:	85ca                	mv	a1,s2
     3fa:	02000513          	li	a0,32
     3fe:	9482                	jalr	s1
     400:	007a0613          	addi	a2,s4,7
    while (idx - start_idx < width) {
     404:	0421                	addi	s0,s0,8
      out(' ', buffer, idx++, maxlen);
     406:	86ce                	mv	a3,s3
     408:	85ca                	mv	a1,s2
     40a:	02000513          	li	a0,32
     40e:	0a21                	addi	s4,s4,8
     410:	9482                	jalr	s1
    while (idx - start_idx < width) {
     412:	f98467e3          	bltu	s0,s8,3a0 <_out_rev+0x346>
    }
  }

  return idx;
}
     416:	60e6                	ld	ra,88(sp)
     418:	6446                	ld	s0,80(sp)
     41a:	64a6                	ld	s1,72(sp)
     41c:	6906                	ld	s2,64(sp)
     41e:	79e2                	ld	s3,56(sp)
     420:	7aa2                	ld	s5,40(sp)
     422:	7b02                	ld	s6,32(sp)
     424:	6be2                	ld	s7,24(sp)
     426:	6c42                	ld	s8,16(sp)
     428:	6ca2                	ld	s9,8(sp)
     42a:	6d02                	ld	s10,0(sp)
     42c:	8552                	mv	a0,s4
     42e:	7a42                	ld	s4,48(sp)
     430:	6125                	addi	sp,sp,96
     432:	8082                	ret
    out(buf[--len], buffer, idx++, maxlen);
     434:	fff44503          	lbu	a0,-1(s0)
     438:	408a8633          	sub	a2,s5,s0
     43c:	86ce                	mv	a3,s3
     43e:	85ca                	mv	a1,s2
     440:	9482                	jalr	s1
  while (len) {
     442:	147d                	addi	s0,s0,-1
     444:	bb79                	j	1e2 <_out_rev+0x188>
    for (size_t i = len; i < width; i++) {
     446:	8a32                	mv	s4,a2
     448:	b385                	j	1a8 <_out_rev+0x14e>
      out(' ', buffer, idx++, maxlen);
     44a:	8652                	mv	a2,s4
     44c:	86ce                	mv	a3,s3
     44e:	85ca                	mv	a1,s2
     450:	02000513          	li	a0,32
     454:	0a05                	addi	s4,s4,1
     456:	9482                	jalr	s1
    while (idx - start_idx < width) {
     458:	0405                	addi	s0,s0,1
     45a:	b5cd                	j	33c <_out_rev+0x2e2>

000000000000045c <_ntoa_long>:
}


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
     45c:	7135                	addi	sp,sp,-160
     45e:	5e2a                	lw	t3,168(sp)
     460:	e0ea                	sd	s10,64(sp)
     462:	fc6e                	sd	s11,56(sp)
     464:	ed06                	sd	ra,152(sp)
     466:	e922                	sd	s0,144(sp)
     468:	e526                	sd	s1,136(sp)
     46a:	e14a                	sd	s2,128(sp)
     46c:	fcce                	sd	s3,120(sp)
     46e:	f8d2                	sd	s4,112(sp)
     470:	f4d6                	sd	s5,104(sp)
     472:	f0da                	sd	s6,96(sp)
     474:	ecde                	sd	s7,88(sp)
     476:	e8e2                	sd	s8,80(sp)
     478:	e4e6                	sd	s9,72(sp)
     47a:	5f8a                	lw	t6,160(sp)
     47c:	83ba                	mv	t2,a4
     47e:	8dbe                	mv	s11,a5
     480:	8342                	mv	t1,a6
     482:	8d46                	mv	s10,a7
  if (!value) {
    flags &= ~FLAGS_HASH;
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
     484:	400e7293          	andi	t0,t3,1024
  if (!value) {
     488:	1a071363          	bnez	a4,62e <_ntoa_long+0x1d2>
    flags &= ~FLAGS_HASH;
     48c:	80f2                	mv	ra,t3
     48e:	fefe7e13          	andi	t3,t3,-17
  if (!(flags & FLAGS_PRECISION) || value) {
     492:	1c029963          	bnez	t0,664 <_ntoa_long+0x208>
     496:	020e7793          	andi	a5,t3,32
     49a:	4f01                	li	t5,0
     49c:	06100413          	li	s0,97
     4a0:	18079f63          	bnez	a5,63e <_ntoa_long+0x1e2>
    do {
      const char digit = (char)(value % base);
     4a4:	0263f833          	remu	a6,t2,t1
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     4a8:	4ea5                	li	t4,9
     4aa:	0818                	addi	a4,sp,16
     4ac:	ff64091b          	addiw	s2,s0,-10
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
     4b0:	02000993          	li	s3,32
      const char digit = (char)(value % base);
     4b4:	0ff87493          	zext.b	s1,a6
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     4b8:	1b0ef163          	bgeu	t4,a6,65a <_ntoa_long+0x1fe>
     4bc:	009908bb          	addw	a7,s2,s1
     4c0:	0ff8fa93          	zext.b	s5,a7
     4c4:	01570023          	sb	s5,0(a4)
      value /= base;
     4c8:	0263d833          	divu	a6,t2,t1
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     4cc:	4785                	li	a5,1
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
     4ce:	0e63ed63          	bltu	t2,t1,5c8 <_ntoa_long+0x16c>
      const char digit = (char)(value % base);
     4d2:	02687b33          	remu	s6,a6,t1
     4d6:	0ffb7b93          	zext.b	s7,s6
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     4da:	216eed63          	bltu	t4,s6,6f4 <_ntoa_long+0x298>
     4de:	030b839b          	addiw	t2,s7,48
     4e2:	0ff3fc93          	zext.b	s9,t2
     4e6:	00178093          	addi	ra,a5,1
     4ea:	001707b3          	add	a5,a4,ra
     4ee:	ff978fa3          	sb	s9,-1(a5)
      value /= base;
     4f2:	02685433          	divu	s0,a6,t1
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     4f6:	8786                	mv	a5,ra
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
     4f8:	0c686863          	bltu	a6,t1,5c8 <_ntoa_long+0x16c>
     4fc:	0d308663          	beq	ra,s3,5c8 <_ntoa_long+0x16c>
      const char digit = (char)(value % base);
     500:	02647833          	remu	a6,s0,t1
     504:	0ff87493          	zext.b	s1,a6
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     508:	1f0eeb63          	bltu	t4,a6,6fe <_ntoa_long+0x2a2>
     50c:	03048a1b          	addiw	s4,s1,48
     510:	0ffa7a93          	zext.b	s5,s4
     514:	00108793          	addi	a5,ra,1
     518:	00f70b33          	add	s6,a4,a5
     51c:	ff5b0fa3          	sb	s5,-1(s6)
      value /= base;
     520:	02645bb3          	divu	s7,s0,t1
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
     524:	0a646263          	bltu	s0,t1,5c8 <_ntoa_long+0x16c>
      const char digit = (char)(value % base);
     528:	026bfc33          	remu	s8,s7,t1
     52c:	0ffc7c93          	zext.b	s9,s8
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     530:	1d8efc63          	bgeu	t4,s8,708 <_ntoa_long+0x2ac>
     534:	019903bb          	addw	t2,s2,s9
     538:	0ff3f413          	zext.b	s0,t2
     53c:	00208793          	addi	a5,ra,2
     540:	00f70833          	add	a6,a4,a5
     544:	fe880fa3          	sb	s0,-1(a6)
      value /= base;
     548:	026bda33          	divu	s4,s7,t1
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
     54c:	066bee63          	bltu	s7,t1,5c8 <_ntoa_long+0x16c>
      const char digit = (char)(value % base);
     550:	026a74b3          	remu	s1,s4,t1
     554:	0ff4f893          	zext.b	a7,s1
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     558:	1a9efd63          	bgeu	t4,s1,712 <_ntoa_long+0x2b6>
     55c:	01190abb          	addw	s5,s2,a7
     560:	0ffafb93          	zext.b	s7,s5
     564:	00308793          	addi	a5,ra,3
     568:	00f70c33          	add	s8,a4,a5
     56c:	ff7c0fa3          	sb	s7,-1(s8)
      value /= base;
     570:	026a5cb3          	divu	s9,s4,t1
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
     574:	046a6a63          	bltu	s4,t1,5c8 <_ntoa_long+0x16c>
      const char digit = (char)(value % base);
     578:	026cf3b3          	remu	t2,s9,t1
     57c:	0ff3f793          	zext.b	a5,t2
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     580:	187efe63          	bgeu	t4,t2,71c <_ntoa_long+0x2c0>
     584:	00f9043b          	addw	s0,s2,a5
     588:	0ff47a13          	zext.b	s4,s0
     58c:	00408793          	addi	a5,ra,4
     590:	00f704b3          	add	s1,a4,a5
     594:	ff448fa3          	sb	s4,-1(s1)
      value /= base;
     598:	026cdab3          	divu	s5,s9,t1
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
     59c:	026ce663          	bltu	s9,t1,5c8 <_ntoa_long+0x16c>
      const char digit = (char)(value % base);
     5a0:	026afb33          	remu	s6,s5,t1
     5a4:	0ffb7893          	zext.b	a7,s6
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     5a8:	176eff63          	bgeu	t4,s6,726 <_ntoa_long+0x2ca>
     5ac:	01190bbb          	addw	s7,s2,a7
     5b0:	0ffbfc93          	zext.b	s9,s7
     5b4:	00508793          	addi	a5,ra,5
     5b8:	00f700b3          	add	ra,a4,a5
     5bc:	ff908fa3          	sb	s9,-1(ra)
      value /= base;
     5c0:	026ad833          	divu	a6,s5,t1
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
     5c4:	f06af7e3          	bgeu	s5,t1,4d2 <_ntoa_long+0x76>
  if (!(flags & FLAGS_LEFT)) {
     5c8:	002e7e93          	andi	t4,t3,2
     5cc:	0a0e8263          	beqz	t4,670 <_ntoa_long+0x214>
  if (flags & FLAGS_HASH) {
     5d0:	100f0b63          	beqz	t5,6e6 <_ntoa_long+0x28a>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
     5d4:	0e029563          	bnez	t0,6be <_ntoa_long+0x262>
     5d8:	40079b63          	bnez	a5,9ee <_ntoa_long+0x592>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     5dc:	47c1                	li	a5,16
     5de:	46f30263          	beq	t1,a5,a42 <_ntoa_long+0x5e6>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     5e2:	4a09                	li	s4,2
     5e4:	4b430363          	beq	t1,s4,a8a <_ntoa_long+0x62e>
      buf[len++] = '0';
     5e8:	03000b13          	li	s6,48
     5ec:	01610823          	sb	s6,16(sp)
     5f0:	4785                	li	a5,1
    if (negative) {
     5f2:	120d8f63          	beqz	s11,730 <_ntoa_long+0x2d4>
      buf[len++] = '-';
     5f6:	03010a93          	addi	s5,sp,48
     5fa:	00fa8f33          	add	t5,s5,a5
     5fe:	02d00393          	li	t2,45
     602:	fe7f0023          	sb	t2,-32(t5)
     606:	0785                	addi	a5,a5,1
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
     608:	88f2                	mv	a7,t3
     60a:	887e                	mv	a6,t6
     60c:	a4fff0ef          	jal	ra,5a <_out_rev>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
}
     610:	60ea                	ld	ra,152(sp)
     612:	644a                	ld	s0,144(sp)
     614:	64aa                	ld	s1,136(sp)
     616:	690a                	ld	s2,128(sp)
     618:	79e6                	ld	s3,120(sp)
     61a:	7a46                	ld	s4,112(sp)
     61c:	7aa6                	ld	s5,104(sp)
     61e:	7b06                	ld	s6,96(sp)
     620:	6be6                	ld	s7,88(sp)
     622:	6c46                	ld	s8,80(sp)
     624:	6ca6                	ld	s9,72(sp)
     626:	6d06                	ld	s10,64(sp)
     628:	7de2                	ld	s11,56(sp)
     62a:	610d                	addi	sp,sp,160
     62c:	8082                	ret
  if (!(flags & FLAGS_PRECISION) || value) {
     62e:	020e7793          	andi	a5,t3,32
  if (flags & FLAGS_HASH) {
     632:	010e7f13          	andi	t5,t3,16
     636:	06100413          	li	s0,97
     63a:	e60785e3          	beqz	a5,4a4 <_ntoa_long+0x48>
      const char digit = (char)(value % base);
     63e:	0263f833          	remu	a6,t2,t1
     642:	04100413          	li	s0,65
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     646:	4ea5                	li	t4,9
     648:	0818                	addi	a4,sp,16
     64a:	ff64091b          	addiw	s2,s0,-10
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
     64e:	02000993          	li	s3,32
      const char digit = (char)(value % base);
     652:	0ff87493          	zext.b	s1,a6
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     656:	e70ee3e3          	bltu	t4,a6,4bc <_ntoa_long+0x60>
     65a:	03048a1b          	addiw	s4,s1,48
     65e:	0ffa7a93          	zext.b	s5,s4
     662:	b58d                	j	4c4 <_ntoa_long+0x68>
  if (!(flags & FLAGS_LEFT)) {
     664:	0020ff13          	andi	t5,ra,2
  size_t len = 0U;
     668:	4781                	li	a5,0
     66a:	0818                	addi	a4,sp,16
  if (!(flags & FLAGS_LEFT)) {
     66c:	f80f13e3          	bnez	t5,5f2 <_ntoa_long+0x196>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     670:	020d1393          	slli	t2,s10,0x20
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
     674:	8972                	mv	s2,t3
     676:	001e7993          	andi	s3,t3,1
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     67a:	0203db13          	srli	s6,t2,0x20
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
     67e:	0c0f8b63          	beqz	t6,754 <_ntoa_long+0x2f8>
     682:	32098963          	beqz	s3,9b4 <_ntoa_long+0x558>
     686:	360d9963          	bnez	s11,9f8 <_ntoa_long+0x59c>
     68a:	00c97493          	andi	s1,s2,12
     68e:	36049563          	bnez	s1,9f8 <_ntoa_long+0x59c>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     692:	1f67f463          	bgeu	a5,s6,87a <_ntoa_long+0x41e>
     696:	02000a93          	li	s5,32
     69a:	0d579363          	bne	a5,s5,760 <_ntoa_long+0x304>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     69e:	f3f7f9e3          	bgeu	a5,t6,5d0 <_ntoa_long+0x174>
  if (flags & FLAGS_HASH) {
     6a2:	040f0663          	beqz	t5,6ee <_ntoa_long+0x292>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
     6a6:	02000793          	li	a5,32
     6aa:	00029a63          	bnez	t0,6be <_ntoa_long+0x262>
     6ae:	34fb0763          	beq	s6,a5,9fc <_ntoa_long+0x5a0>
     6b2:	020f9f13          	slli	t5,t6,0x20
     6b6:	020f5393          	srli	t2,t5,0x20
     6ba:	34f38163          	beq	t2,a5,9fc <_ntoa_long+0x5a0>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     6be:	48c1                	li	a7,16
     6c0:	35130f63          	beq	t1,a7,a1e <_ntoa_long+0x5c2>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     6c4:	4e89                	li	t4,2
     6c6:	31d30c63          	beq	t1,t4,9de <_ntoa_long+0x582>
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
     6ca:	02000413          	li	s0,32
     6ce:	f2878de3          	beq	a5,s0,608 <_ntoa_long+0x1ac>
     6d2:	89be                	mv	s3,a5
      buf[len++] = '0';
     6d4:	1804                	addi	s1,sp,48
     6d6:	01348933          	add	s2,s1,s3
     6da:	00198793          	addi	a5,s3,1
     6de:	03000993          	li	s3,48
     6e2:	ff390023          	sb	s3,-32(s2)
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
     6e6:	02000a13          	li	s4,32
     6ea:	f14794e3          	bne	a5,s4,5f2 <_ntoa_long+0x196>
  if (flags & FLAGS_HASH) {
     6ee:	02000793          	li	a5,32
     6f2:	bf19                	j	608 <_ntoa_long+0x1ac>
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
     6f4:	01790c3b          	addw	s8,s2,s7
     6f8:	0ffc7c93          	zext.b	s9,s8
     6fc:	b3ed                	j	4e6 <_ntoa_long+0x8a>
     6fe:	009908bb          	addw	a7,s2,s1
     702:	0ff8fa93          	zext.b	s5,a7
     706:	b539                	j	514 <_ntoa_long+0xb8>
     708:	030c879b          	addiw	a5,s9,48
     70c:	0ff7f413          	zext.b	s0,a5
     710:	b535                	j	53c <_ntoa_long+0xe0>
     712:	03088b1b          	addiw	s6,a7,48
     716:	0ffb7b93          	zext.b	s7,s6
     71a:	b5a9                	j	564 <_ntoa_long+0x108>
     71c:	0307881b          	addiw	a6,a5,48
     720:	0ff87a13          	zext.b	s4,a6
     724:	b5a5                	j	58c <_ntoa_long+0x130>
     726:	03088c1b          	addiw	s8,a7,48
     72a:	0ffc7c93          	zext.b	s9,s8
     72e:	b559                	j	5b4 <_ntoa_long+0x158>
    else if (flags & FLAGS_PLUS) {
     730:	004e7d93          	andi	s11,t3,4
     734:	280d9b63          	bnez	s11,9ca <_ntoa_long+0x56e>
    else if (flags & FLAGS_SPACE) {
     738:	008e7b13          	andi	s6,t3,8
     73c:	ec0b06e3          	beqz	s6,608 <_ntoa_long+0x1ac>
      buf[len++] = ' ';
     740:	03010b93          	addi	s7,sp,48
     744:	00fb8c33          	add	s8,s7,a5
     748:	02000813          	li	a6,32
     74c:	ff0c0023          	sb	a6,-32(s8)
     750:	0785                	addi	a5,a5,1
     752:	bd5d                	j	608 <_ntoa_long+0x1ac>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     754:	1367f163          	bgeu	a5,s6,876 <_ntoa_long+0x41a>
     758:	02000413          	li	s0,32
     75c:	10878d63          	beq	a5,s0,876 <_ntoa_long+0x41a>
     760:	fff7c893          	not	a7,a5
     764:	01688bb3          	add	s7,a7,s6
     768:	007bfc13          	andi	s8,s7,7
      buf[len++] = '0';
     76c:	03000c93          	li	s9,48
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     770:	02000093          	li	ra,32
     774:	080c0063          	beqz	s8,7f4 <_ntoa_long+0x398>
      buf[len++] = '0';
     778:	0785                	addi	a5,a5,1
     77a:	00f70833          	add	a6,a4,a5
     77e:	ff980fa3          	sb	s9,-1(a6)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     782:	0f67fa63          	bgeu	a5,s6,876 <_ntoa_long+0x41a>
     786:	0e178863          	beq	a5,ra,876 <_ntoa_long+0x41a>
     78a:	4e85                	li	t4,1
     78c:	07dc0463          	beq	s8,t4,7f4 <_ntoa_long+0x398>
     790:	4909                	li	s2,2
     792:	052c0a63          	beq	s8,s2,7e6 <_ntoa_long+0x38a>
     796:	438d                	li	t2,3
     798:	047c0063          	beq	s8,t2,7d8 <_ntoa_long+0x37c>
     79c:	4411                	li	s0,4
     79e:	028c0663          	beq	s8,s0,7ca <_ntoa_long+0x36e>
     7a2:	4a15                	li	s4,5
     7a4:	014c0c63          	beq	s8,s4,7bc <_ntoa_long+0x360>
     7a8:	4499                	li	s1,6
     7aa:	2c9c1263          	bne	s8,s1,a6e <_ntoa_long+0x612>
      buf[len++] = '0';
     7ae:	0785                	addi	a5,a5,1
     7b0:	00f708b3          	add	a7,a4,a5
     7b4:	ff988fa3          	sb	s9,-1(a7)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     7b8:	0a178f63          	beq	a5,ra,876 <_ntoa_long+0x41a>
      buf[len++] = '0';
     7bc:	0785                	addi	a5,a5,1
     7be:	00f70bb3          	add	s7,a4,a5
     7c2:	ff9b8fa3          	sb	s9,-1(s7)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     7c6:	0a178863          	beq	a5,ra,876 <_ntoa_long+0x41a>
      buf[len++] = '0';
     7ca:	0785                	addi	a5,a5,1
     7cc:	00f70c33          	add	s8,a4,a5
     7d0:	ff9c0fa3          	sb	s9,-1(s8)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     7d4:	0a178163          	beq	a5,ra,876 <_ntoa_long+0x41a>
      buf[len++] = '0';
     7d8:	0785                	addi	a5,a5,1
     7da:	00f70833          	add	a6,a4,a5
     7de:	ff980fa3          	sb	s9,-1(a6)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     7e2:	08178a63          	beq	a5,ra,876 <_ntoa_long+0x41a>
      buf[len++] = '0';
     7e6:	0785                	addi	a5,a5,1
     7e8:	00f70eb3          	add	t4,a4,a5
     7ec:	ff9e8fa3          	sb	s9,-1(t4)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     7f0:	08178363          	beq	a5,ra,876 <_ntoa_long+0x41a>
      buf[len++] = '0';
     7f4:	0785                	addi	a5,a5,1
     7f6:	00f70933          	add	s2,a4,a5
     7fa:	ff990fa3          	sb	s9,-1(s2)
     7fe:	83be                	mv	t2,a5
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     800:	0767fb63          	bgeu	a5,s6,876 <_ntoa_long+0x41a>
     804:	06178963          	beq	a5,ra,876 <_ntoa_long+0x41a>
      buf[len++] = '0';
     808:	0785                	addi	a5,a5,1
     80a:	00f70433          	add	s0,a4,a5
     80e:	ff940fa3          	sb	s9,-1(s0)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     812:	06178263          	beq	a5,ra,876 <_ntoa_long+0x41a>
      buf[len++] = '0';
     816:	00238793          	addi	a5,t2,2
     81a:	00f70a33          	add	s4,a4,a5
     81e:	ff9a0fa3          	sb	s9,-1(s4)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     822:	04178a63          	beq	a5,ra,876 <_ntoa_long+0x41a>
      buf[len++] = '0';
     826:	00338793          	addi	a5,t2,3
     82a:	00f704b3          	add	s1,a4,a5
     82e:	ff948fa3          	sb	s9,-1(s1)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     832:	04178263          	beq	a5,ra,876 <_ntoa_long+0x41a>
      buf[len++] = '0';
     836:	00438793          	addi	a5,t2,4
     83a:	00f70ab3          	add	s5,a4,a5
     83e:	ff9a8fa3          	sb	s9,-1(s5)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     842:	02178a63          	beq	a5,ra,876 <_ntoa_long+0x41a>
      buf[len++] = '0';
     846:	00538793          	addi	a5,t2,5
     84a:	00f708b3          	add	a7,a4,a5
     84e:	ff988fa3          	sb	s9,-1(a7)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     852:	02178263          	beq	a5,ra,876 <_ntoa_long+0x41a>
      buf[len++] = '0';
     856:	00638793          	addi	a5,t2,6
     85a:	00f70bb3          	add	s7,a4,a5
     85e:	ff9b8fa3          	sb	s9,-1(s7)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     862:	00178a63          	beq	a5,ra,876 <_ntoa_long+0x41a>
      buf[len++] = '0';
     866:	00738793          	addi	a5,t2,7
     86a:	00f70c33          	add	s8,a4,a5
     86e:	ff9c0fa3          	sb	s9,-1(s8)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     872:	f81791e3          	bne	a5,ra,7f4 <_ntoa_long+0x398>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     876:	d4098de3          	beqz	s3,5d0 <_ntoa_long+0x174>
     87a:	020f9993          	slli	s3,t6,0x20
     87e:	0209d393          	srli	t2,s3,0x20
     882:	d477f7e3          	bgeu	a5,t2,5d0 <_ntoa_long+0x174>
     886:	02000c93          	li	s9,32
     88a:	e1978ce3          	beq	a5,s9,6a2 <_ntoa_long+0x246>
     88e:	fff7c093          	not	ra,a5
     892:	00708833          	add	a6,ra,t2
     896:	00787913          	andi	s2,a6,7
      buf[len++] = '0';
     89a:	03000893          	li	a7,48
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     89e:	02000e93          	li	t4,32
     8a2:	08090563          	beqz	s2,92c <_ntoa_long+0x4d0>
      buf[len++] = '0';
     8a6:	0785                	addi	a5,a5,1
     8a8:	00f70433          	add	s0,a4,a5
     8ac:	ff140fa3          	sb	a7,-1(s0)
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     8b0:	dfd789e3          	beq	a5,t4,6a2 <_ntoa_long+0x246>
     8b4:	4a05                	li	s4,1
     8b6:	07490b63          	beq	s2,s4,92c <_ntoa_long+0x4d0>
     8ba:	4489                	li	s1,2
     8bc:	06990163          	beq	s2,s1,91e <_ntoa_long+0x4c2>
     8c0:	4a8d                	li	s5,3
     8c2:	05590763          	beq	s2,s5,910 <_ntoa_long+0x4b4>
     8c6:	4b91                	li	s7,4
     8c8:	03790d63          	beq	s2,s7,902 <_ntoa_long+0x4a6>
     8cc:	4c15                	li	s8,5
     8ce:	03890363          	beq	s2,s8,8f4 <_ntoa_long+0x498>
     8d2:	4999                	li	s3,6
     8d4:	01390963          	beq	s2,s3,8e6 <_ntoa_long+0x48a>
      buf[len++] = '0';
     8d8:	0785                	addi	a5,a5,1
     8da:	00f70cb3          	add	s9,a4,a5
     8de:	ff1c8fa3          	sb	a7,-1(s9)
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     8e2:	ddd780e3          	beq	a5,t4,6a2 <_ntoa_long+0x246>
      buf[len++] = '0';
     8e6:	0785                	addi	a5,a5,1
     8e8:	00f700b3          	add	ra,a4,a5
     8ec:	ff108fa3          	sb	a7,-1(ra)
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     8f0:	dbd789e3          	beq	a5,t4,6a2 <_ntoa_long+0x246>
      buf[len++] = '0';
     8f4:	0785                	addi	a5,a5,1
     8f6:	00f70833          	add	a6,a4,a5
     8fa:	ff180fa3          	sb	a7,-1(a6)
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     8fe:	dbd782e3          	beq	a5,t4,6a2 <_ntoa_long+0x246>
      buf[len++] = '0';
     902:	0785                	addi	a5,a5,1
     904:	00f70933          	add	s2,a4,a5
     908:	ff190fa3          	sb	a7,-1(s2)
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     90c:	d9d78be3          	beq	a5,t4,6a2 <_ntoa_long+0x246>
      buf[len++] = '0';
     910:	0785                	addi	a5,a5,1
     912:	00f70433          	add	s0,a4,a5
     916:	ff140fa3          	sb	a7,-1(s0)
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     91a:	d9d784e3          	beq	a5,t4,6a2 <_ntoa_long+0x246>
      buf[len++] = '0';
     91e:	0785                	addi	a5,a5,1
     920:	00f70a33          	add	s4,a4,a5
     924:	ff1a0fa3          	sb	a7,-1(s4)
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     928:	d7d78de3          	beq	a5,t4,6a2 <_ntoa_long+0x246>
     92c:	e46a                	sd	s10,8(sp)
     92e:	e05a                	sd	s6,0(sp)
      buf[len++] = '0';
     930:	0785                	addi	a5,a5,1
     932:	00f70ab3          	add	s5,a4,a5
     936:	00178093          	addi	ra,a5,1
     93a:	00278413          	addi	s0,a5,2
     93e:	00378493          	addi	s1,a5,3
     942:	00478913          	addi	s2,a5,4
     946:	00578993          	addi	s3,a5,5
     94a:	00678a13          	addi	s4,a5,6
     94e:	ff1a8fa3          	sb	a7,-1(s5)
     952:	00170b33          	add	s6,a4,ra
     956:	00870bb3          	add	s7,a4,s0
     95a:	00970c33          	add	s8,a4,s1
     95e:	01270833          	add	a6,a4,s2
     962:	01370d33          	add	s10,a4,s3
     966:	01470cb3          	add	s9,a4,s4
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     96a:	12778663          	beq	a5,t2,a96 <_ntoa_long+0x63a>
     96e:	05d78163          	beq	a5,t4,9b0 <_ntoa_long+0x554>
      buf[len++] = '0';
     972:	079d                	addi	a5,a5,7
     974:	ff1b0fa3          	sb	a7,-1(s6)
     978:	00f70ab3          	add	s5,a4,a5
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     97c:	03d08a63          	beq	ra,t4,9b0 <_ntoa_long+0x554>
      buf[len++] = '0';
     980:	ff1b8fa3          	sb	a7,-1(s7)
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     984:	03d40663          	beq	s0,t4,9b0 <_ntoa_long+0x554>
      buf[len++] = '0';
     988:	ff1c0fa3          	sb	a7,-1(s8)
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     98c:	03d48263          	beq	s1,t4,9b0 <_ntoa_long+0x554>
      buf[len++] = '0';
     990:	ff180fa3          	sb	a7,-1(a6)
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     994:	01d90e63          	beq	s2,t4,9b0 <_ntoa_long+0x554>
      buf[len++] = '0';
     998:	ff1d0fa3          	sb	a7,-1(s10)
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     99c:	01d98a63          	beq	s3,t4,9b0 <_ntoa_long+0x554>
      buf[len++] = '0';
     9a0:	ff1c8fa3          	sb	a7,-1(s9)
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     9a4:	01da0663          	beq	s4,t4,9b0 <_ntoa_long+0x554>
      buf[len++] = '0';
     9a8:	ff1a8fa3          	sb	a7,-1(s5)
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     9ac:	f9d792e3          	bne	a5,t4,930 <_ntoa_long+0x4d4>
     9b0:	6b02                	ld	s6,0(sp)
     9b2:	b9c5                	j	6a2 <_ntoa_long+0x246>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     9b4:	c167fee3          	bgeu	a5,s6,5d0 <_ntoa_long+0x174>
     9b8:	02000a13          	li	s4,32
     9bc:	db4792e3          	bne	a5,s4,760 <_ntoa_long+0x304>
  if (flags & FLAGS_HASH) {
     9c0:	c00f1ae3          	bnez	t5,5d4 <_ntoa_long+0x178>
     9c4:	02000793          	li	a5,32
     9c8:	b181                	j	608 <_ntoa_long+0x1ac>
      buf[len++] = '+';  // ignore the space if the '+' exists
     9ca:	03010d13          	addi	s10,sp,48
     9ce:	00fd0cb3          	add	s9,s10,a5
     9d2:	02b00293          	li	t0,43
     9d6:	fe5c8023          	sb	t0,-32(s9)
     9da:	0785                	addi	a5,a5,1
     9dc:	b135                	j	608 <_ntoa_long+0x1ac>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     9de:	02000313          	li	t1,32
     9e2:	c26783e3          	beq	a5,t1,608 <_ntoa_long+0x1ac>
      buf[len++] = 'b';
     9e6:	00f70ab3          	add	s5,a4,a5
     9ea:	0785                	addi	a5,a5,1
     9ec:	a025                	j	a14 <_ntoa_long+0x5b8>
     9ee:	020d1293          	slli	t0,s10,0x20
     9f2:	0202db13          	srli	s6,t0,0x20
     9f6:	b965                	j	6ae <_ntoa_long+0x252>
      width--;
     9f8:	3ffd                	addiw	t6,t6,-1
     9fa:	b961                	j	692 <_ntoa_long+0x236>
      len--;
     9fc:	fff78993          	addi	s3,a5,-1
      if (len && (base == 16U)) {
     a00:	bc098ee3          	beqz	s3,5dc <_ntoa_long+0x180>
     a04:	4cc1                	li	s9,16
     a06:	09930c63          	beq	t1,s9,a9e <_ntoa_long+0x642>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     a0a:	4289                	li	t0,2
     a0c:	cc5314e3          	bne	t1,t0,6d4 <_ntoa_long+0x278>
      buf[len++] = 'b';
     a10:	01370ab3          	add	s5,a4,s3
     a14:	06200f13          	li	t5,98
     a18:	01ea8023          	sb	t5,0(s5)
     a1c:	b17d                	j	6ca <_ntoa_long+0x26e>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     a1e:	020e7093          	andi	ra,t3,32
     a22:	02008a63          	beqz	ra,a56 <_ntoa_long+0x5fa>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     a26:	02000413          	li	s0,32
     a2a:	bc878fe3          	beq	a5,s0,608 <_ntoa_long+0x1ac>
      buf[len++] = 'X';
     a2e:	03010893          	addi	a7,sp,48
     a32:	00f88eb3          	add	t4,a7,a5
     a36:	05800313          	li	t1,88
     a3a:	0785                	addi	a5,a5,1
     a3c:	fe6e8023          	sb	t1,-32(t4)
     a40:	b169                	j	6ca <_ntoa_long+0x26e>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     a42:	020e7c13          	andi	s8,t3,32
     a46:	020c1c63          	bnez	s8,a7e <_ntoa_long+0x622>
      buf[len++] = 'x';
     a4a:	07800d13          	li	s10,120
     a4e:	01a10823          	sb	s10,16(sp)
     a52:	4985                	li	s3,1
     a54:	b141                	j	6d4 <_ntoa_long+0x278>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     a56:	02000493          	li	s1,32
     a5a:	ba9787e3          	beq	a5,s1,608 <_ntoa_long+0x1ac>
      buf[len++] = 'x';
     a5e:	00f70933          	add	s2,a4,a5
     a62:	0785                	addi	a5,a5,1
     a64:	07800093          	li	ra,120
     a68:	00190023          	sb	ra,0(s2)
     a6c:	b9b9                	j	6ca <_ntoa_long+0x26e>
      buf[len++] = '0';
     a6e:	0785                	addi	a5,a5,1
     a70:	00f70ab3          	add	s5,a4,a5
     a74:	ff9a8fa3          	sb	s9,-1(s5)
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     a78:	d2179be3          	bne	a5,ra,7ae <_ntoa_long+0x352>
     a7c:	bbed                	j	876 <_ntoa_long+0x41a>
      buf[len++] = 'X';
     a7e:	05800813          	li	a6,88
     a82:	01010823          	sb	a6,16(sp)
     a86:	4985                	li	s3,1
     a88:	b1b1                	j	6d4 <_ntoa_long+0x278>
      buf[len++] = 'b';
     a8a:	06200b93          	li	s7,98
     a8e:	01710823          	sb	s7,16(sp)
     a92:	4985                	li	s3,1
     a94:	b181                	j	6d4 <_ntoa_long+0x278>
     a96:	6d22                	ld	s10,8(sp)
  if (flags & FLAGS_HASH) {
     a98:	b20f1ee3          	bnez	t5,5d4 <_ntoa_long+0x178>
     a9c:	b1a9                	j	6e6 <_ntoa_long+0x28a>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     a9e:	020e7393          	andi	t2,t3,32
        len--;
     aa2:	17f9                	addi	a5,a5,-2
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
     aa4:	f80395e3          	bnez	t2,a2e <_ntoa_long+0x5d2>
      buf[len++] = 'x';
     aa8:	00f70933          	add	s2,a4,a5
     aac:	87ce                	mv	a5,s3
     aae:	bf5d                	j	a64 <_ntoa_long+0x608>

0000000000000ab0 <_out_fct>:
  if (character) {
     ab0:	c501                	beqz	a0,ab8 <_out_fct+0x8>
    ((out_fct_wrap_type*)buffer)->fct(character, ((out_fct_wrap_type*)buffer)->arg);
     ab2:	619c                	ld	a5,0(a1)
     ab4:	658c                	ld	a1,8(a1)
     ab6:	8782                	jr	a5
}
     ab8:	8082                	ret

0000000000000aba <_ftoa>:

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
     aba:	a2a52353          	feq.d	t1,fa0,fa0
{
     abe:	88c2                	mv	a7,a6
  if (value != value)
     ac0:	3e030063          	beqz	t1,ea0 <_ftoa+0x3e6>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
  if (value < -DBL_MAX)
     ac4:	6811                	lui	a6,0x4
     ac6:	8b883787          	fld	fa5,-1864(a6) # 38b8 <_end>
     aca:	a2f512d3          	flt.d	t0,fa0,fa5
     ace:	5a029d63          	bnez	t0,1088 <_ftoa+0x5ce>
{
     ad2:	7119                	addi	sp,sp,-128
     ad4:	f8a2                	sd	s0,112(sp)
     ad6:	8436                	mv	s0,a3
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
  if (value > DBL_MAX)
     ad8:	6691                	lui	a3,0x4
     ada:	8c06b007          	fld	ft0,-1856(a3) # 38c0 <_end+0x8>
{
     ade:	fc86                	sd	ra,120(sp)
     ae0:	f4a6                	sd	s1,104(sp)
  if (value > DBL_MAX)
     ae2:	a2a010d3          	flt.d	ra,ft0,fa0
{
     ae6:	f0ca                	sd	s2,96(sp)
     ae8:	ecce                	sd	s3,88(sp)
     aea:	e8d2                	sd	s4,80(sp)
     aec:	e4d6                	sd	s5,72(sp)
     aee:	e0da                	sd	s6,64(sp)
     af0:	fc5e                	sd	s7,56(sp)
     af2:	f862                	sd	s8,48(sp)
     af4:	f466                	sd	s9,40(sp)
     af6:	f06a                	sd	s10,32(sp)
     af8:	8faa                	mv	t6,a0
     afa:	82ae                	mv	t0,a1
     afc:	83b2                	mv	t2,a2
  if (value > DBL_MAX)
     afe:	36009463          	bnez	ra,e66 <_ftoa+0x3ac>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
     b02:	6491                	lui	s1,0x4
     b04:	8c84b087          	fld	ft1,-1848(s1) # 38c8 <_end+0x10>
     b08:	a2a09553          	flt.d	a0,ft1,fa0
     b0c:	54051b63          	bnez	a0,1062 <_ftoa+0x5a8>
     b10:	6591                	lui	a1,0x4
     b12:	8d05b107          	fld	ft2,-1840(a1) # 38d0 <_end+0x18>
     b16:	a2251653          	flt.d	a2,fa0,ft2
     b1a:	54061463          	bnez	a2,1062 <_ftoa+0x5a8>
#endif
  }

  // test for negative
  bool negative = false;
  if (value < 0) {
     b1e:	f20001d3          	fmv.d.x	ft3,zero
  bool negative = false;
     b22:	4501                	li	a0,0
  if (value < 0) {
     b24:	a2351953          	flt.d	s2,fa0,ft3
     b28:	52091363          	bnez	s2,104e <_ftoa+0x594>
    negative = true;
    value = 0 - value;
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
     b2c:	4008f993          	andi	s3,a7,1024
     b30:	00099363          	bnez	s3,b36 <_ftoa+0x7c>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
     b34:	4719                	li	a4,6
     b36:	4301                	li	t1,0
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
     b38:	4a25                	li	s4,9
    buf[len++] = '0';
     b3a:	03000a93          	li	s5,48
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
     b3e:	02000e13          	li	t3,32
     b42:	08ea7963          	bgeu	s4,a4,bd4 <_ftoa+0x11a>
    buf[len++] = '0';
     b46:	0305                	addi	t1,t1,1
     b48:	00610b33          	add	s6,sp,t1
     b4c:	ff5b0fa3          	sb	s5,-1(s6)
    prec--;
     b50:	377d                	addiw	a4,a4,-1
    buf[len++] = '0';
     b52:	8b9a                	mv	s7,t1
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
     b54:	08ea7063          	bgeu	s4,a4,bd4 <_ftoa+0x11a>
    buf[len++] = '0';
     b58:	0305                	addi	t1,t1,1
     b5a:	00610c33          	add	s8,sp,t1
     b5e:	ff5c0fa3          	sb	s5,-1(s8)
    prec--;
     b62:	377d                	addiw	a4,a4,-1
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
     b64:	06ea7863          	bgeu	s4,a4,bd4 <_ftoa+0x11a>
    buf[len++] = '0';
     b68:	002b8313          	addi	t1,s7,2
     b6c:	00610cb3          	add	s9,sp,t1
     b70:	ff5c8fa3          	sb	s5,-1(s9)
    prec--;
     b74:	377d                	addiw	a4,a4,-1
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
     b76:	04ea7f63          	bgeu	s4,a4,bd4 <_ftoa+0x11a>
    buf[len++] = '0';
     b7a:	003b8313          	addi	t1,s7,3
     b7e:	00610d33          	add	s10,sp,t1
     b82:	ff5d0fa3          	sb	s5,-1(s10)
    prec--;
     b86:	377d                	addiw	a4,a4,-1
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
     b88:	04ea7663          	bgeu	s4,a4,bd4 <_ftoa+0x11a>
    buf[len++] = '0';
     b8c:	004b8313          	addi	t1,s7,4
     b90:	00610eb3          	add	t4,sp,t1
     b94:	ff5e8fa3          	sb	s5,-1(t4)
    prec--;
     b98:	377d                	addiw	a4,a4,-1
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
     b9a:	02ea7d63          	bgeu	s4,a4,bd4 <_ftoa+0x11a>
    buf[len++] = '0';
     b9e:	005b8313          	addi	t1,s7,5
     ba2:	00610f33          	add	t5,sp,t1
     ba6:	ff5f0fa3          	sb	s5,-1(t5)
    prec--;
     baa:	377d                	addiw	a4,a4,-1
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
     bac:	02ea7463          	bgeu	s4,a4,bd4 <_ftoa+0x11a>
    buf[len++] = '0';
     bb0:	006b8313          	addi	t1,s7,6
     bb4:	00610833          	add	a6,sp,t1
     bb8:	ff580fa3          	sb	s5,-1(a6)
    prec--;
     bbc:	377d                	addiw	a4,a4,-1
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
     bbe:	00ea7b63          	bgeu	s4,a4,bd4 <_ftoa+0x11a>
    buf[len++] = '0';
     bc2:	007b8313          	addi	t1,s7,7
     bc6:	006106b3          	add	a3,sp,t1
     bca:	ff568fa3          	sb	s5,-1(a3)
    prec--;
     bce:	377d                	addiw	a4,a4,-1
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
     bd0:	f7c319e3          	bne	t1,t3,b42 <_ftoa+0x88>
  }

  int whole = (int)value;
     bd4:	c20510d3          	fcvt.w.d	ra,fa0,rtz
  double tmp = (value - whole) * pow10[prec];
     bd8:	02071493          	slli	s1,a4,0x20
     bdc:	6641                	lui	a2,0x10
     bde:	d2008253          	fcvt.d.w	ft4,ra
     be2:	01d4d593          	srli	a1,s1,0x1d
     be6:	1e060913          	addi	s2,a2,480 # 101e0 <pow10.0>
     bea:	0a4572d3          	fsub.d	ft5,fa0,ft4
     bee:	00b909b3          	add	s3,s2,a1
     bf2:	0009b687          	fld	fa3,0(s3)
  unsigned long frac = (unsigned long)tmp;
  diff = tmp - frac;

  if (diff > 0.5) {
     bf6:	6a11                	lui	s4,0x4
     bf8:	8d8a3707          	fld	fa4,-1832(s4) # 38d8 <_end+0x20>
  int whole = (int)value;
     bfc:	00008f1b          	sext.w	t5,ra
  double tmp = (value - whole) * pow10[prec];
     c00:	12d2f353          	fmul.d	ft6,ft5,fa3
  unsigned long frac = (unsigned long)tmp;
     c04:	c2331e53          	fcvt.lu.d	t3,ft6,rtz
  diff = tmp - frac;
     c08:	d23e7653          	fcvt.d.lu	fa2,t3
     c0c:	0ac373d3          	fsub.d	ft7,ft6,fa2
  if (diff > 0.5) {
     c10:	a2771ad3          	flt.d	s5,fa4,ft7
     c14:	280a8d63          	beqz	s5,eae <_ftoa+0x3f4>
    ++frac;
     c18:	0e05                	addi	t3,t3,1
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
     c1a:	d23e75d3          	fcvt.d.lu	fa1,t3
     c1e:	a2b68c53          	fle.d	s8,fa3,fa1
     c22:	000c0563          	beqz	s8,c2c <_ftoa+0x172>
      frac = 0;
      ++whole;
     c26:	00108f1b          	addiw	t5,ra,1
      frac = 0;
     c2a:	4e01                	li	t3,0
  else if ((frac == 0U) || (frac & 1U)) {
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
  }

  if (prec == 0U) {
     c2c:	28071a63          	bnez	a4,ec0 <_ftoa+0x406>
    diff = value - (double)whole;
     c30:	d20f0853          	fcvt.d.w	fa6,t5
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
     c34:	8d8a3887          	fld	fa7,-1832(s4)
    diff = value - (double)whole;
     c38:	0b057553          	fsub.d	fa0,fa0,fa6
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
     c3c:	a31516d3          	flt.d	a3,fa0,fa7
     c40:	40068b63          	beqz	a3,1056 <_ftoa+0x59c>
     c44:	a2a89653          	flt.d	a2,fa7,fa0
     c48:	40061763          	bnez	a2,1056 <_ftoa+0x59c>
      buf[len++] = '.';
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
     c4c:	02000813          	li	a6,32
     c50:	40680e33          	sub	t3,a6,t1
     c54:	007e7093          	andi	ra,t3,7
    buf[len++] = (char)(48 + (whole % 10));
     c58:	4ea9                	li	t4,10
     c5a:	0c008f63          	beqz	ra,d38 <_ftoa+0x27e>
     c5e:	03df693b          	remw	s2,t5,t4
     c62:	0305                	addi	t1,t1,1
     c64:	006109b3          	add	s3,sp,t1
    if (!(whole /= 10)) {
     c68:	03df4f3b          	divw	t5,t5,t4
    buf[len++] = (char)(48 + (whole % 10));
     c6c:	03090a1b          	addiw	s4,s2,48
     c70:	ff498fa3          	sb	s4,-1(s3)
    if (!(whole /= 10)) {
     c74:	1a0f0063          	beqz	t5,e14 <_ftoa+0x35a>
     c78:	4a85                	li	s5,1
     c7a:	0b508f63          	beq	ra,s5,d38 <_ftoa+0x27e>
     c7e:	4b09                	li	s6,2
     c80:	09608f63          	beq	ra,s6,d1e <_ftoa+0x264>
     c84:	4b8d                	li	s7,3
     c86:	07708f63          	beq	ra,s7,d04 <_ftoa+0x24a>
     c8a:	4c11                	li	s8,4
     c8c:	05808f63          	beq	ra,s8,cea <_ftoa+0x230>
     c90:	4d15                	li	s10,5
     c92:	03a08f63          	beq	ra,s10,cd0 <_ftoa+0x216>
     c96:	4499                	li	s1,6
     c98:	00908f63          	beq	ra,s1,cb6 <_ftoa+0x1fc>
    buf[len++] = (char)(48 + (whole % 10));
     c9c:	03df6cbb          	remw	s9,t5,t4
     ca0:	0305                	addi	t1,t1,1
     ca2:	00610733          	add	a4,sp,t1
    if (!(whole /= 10)) {
     ca6:	03df4f3b          	divw	t5,t5,t4
    buf[len++] = (char)(48 + (whole % 10));
     caa:	030c869b          	addiw	a3,s9,48
     cae:	fed70fa3          	sb	a3,-1(a4)
    if (!(whole /= 10)) {
     cb2:	160f0163          	beqz	t5,e14 <_ftoa+0x35a>
    buf[len++] = (char)(48 + (whole % 10));
     cb6:	03df65bb          	remw	a1,t5,t4
     cba:	0305                	addi	t1,t1,1
     cbc:	00610633          	add	a2,sp,t1
    if (!(whole /= 10)) {
     cc0:	03df4f3b          	divw	t5,t5,t4
    buf[len++] = (char)(48 + (whole % 10));
     cc4:	03058e1b          	addiw	t3,a1,48
     cc8:	ffc60fa3          	sb	t3,-1(a2)
    if (!(whole /= 10)) {
     ccc:	140f0463          	beqz	t5,e14 <_ftoa+0x35a>
    buf[len++] = (char)(48 + (whole % 10));
     cd0:	03df60bb          	remw	ra,t5,t4
     cd4:	0305                	addi	t1,t1,1
     cd6:	00610933          	add	s2,sp,t1
    if (!(whole /= 10)) {
     cda:	03df4f3b          	divw	t5,t5,t4
    buf[len++] = (char)(48 + (whole % 10));
     cde:	0300899b          	addiw	s3,ra,48
     ce2:	ff390fa3          	sb	s3,-1(s2)
    if (!(whole /= 10)) {
     ce6:	120f0763          	beqz	t5,e14 <_ftoa+0x35a>
    buf[len++] = (char)(48 + (whole % 10));
     cea:	03df6a3b          	remw	s4,t5,t4
     cee:	0305                	addi	t1,t1,1
     cf0:	00610ab3          	add	s5,sp,t1
    if (!(whole /= 10)) {
     cf4:	03df4f3b          	divw	t5,t5,t4
    buf[len++] = (char)(48 + (whole % 10));
     cf8:	030a0b1b          	addiw	s6,s4,48
     cfc:	ff6a8fa3          	sb	s6,-1(s5)
    if (!(whole /= 10)) {
     d00:	100f0a63          	beqz	t5,e14 <_ftoa+0x35a>
    buf[len++] = (char)(48 + (whole % 10));
     d04:	03df6bbb          	remw	s7,t5,t4
     d08:	0305                	addi	t1,t1,1
     d0a:	00610c33          	add	s8,sp,t1
    if (!(whole /= 10)) {
     d0e:	03df4f3b          	divw	t5,t5,t4
    buf[len++] = (char)(48 + (whole % 10));
     d12:	030b8d1b          	addiw	s10,s7,48
     d16:	ffac0fa3          	sb	s10,-1(s8)
    if (!(whole /= 10)) {
     d1a:	0e0f0d63          	beqz	t5,e14 <_ftoa+0x35a>
    buf[len++] = (char)(48 + (whole % 10));
     d1e:	03df64bb          	remw	s1,t5,t4
     d22:	0305                	addi	t1,t1,1
     d24:	00610cb3          	add	s9,sp,t1
    if (!(whole /= 10)) {
     d28:	03df4f3b          	divw	t5,t5,t4
    buf[len++] = (char)(48 + (whole % 10));
     d2c:	0304871b          	addiw	a4,s1,48
     d30:	feec8fa3          	sb	a4,-1(s9)
    if (!(whole /= 10)) {
     d34:	0e0f0063          	beqz	t5,e14 <_ftoa+0x35a>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
     d38:	1d030063          	beq	t1,a6,ef8 <_ftoa+0x43e>
    if (!(whole /= 10)) {
     d3c:	03df46bb          	divw	a3,t5,t4
    buf[len++] = (char)(48 + (whole % 10));
     d40:	0305                	addi	t1,t1,1
     d42:	00610633          	add	a2,sp,t1
     d46:	859a                	mv	a1,t1
     d48:	03df6e3b          	remw	t3,t5,t4
     d4c:	030e009b          	addiw	ra,t3,48
     d50:	fe160fa3          	sb	ra,-1(a2)
    if (!(whole /= 10)) {
     d54:	c2e1                	beqz	a3,e14 <_ftoa+0x35a>
     d56:	03d6c93b          	divw	s2,a3,t4
    buf[len++] = (char)(48 + (whole % 10));
     d5a:	0305                	addi	t1,t1,1
     d5c:	006109b3          	add	s3,sp,t1
     d60:	03d6ea3b          	remw	s4,a3,t4
     d64:	030a0a9b          	addiw	s5,s4,48
     d68:	ff598fa3          	sb	s5,-1(s3)
    if (!(whole /= 10)) {
     d6c:	0a090463          	beqz	s2,e14 <_ftoa+0x35a>
     d70:	03d94b3b          	divw	s6,s2,t4
    buf[len++] = (char)(48 + (whole % 10));
     d74:	00258313          	addi	t1,a1,2
     d78:	00610bb3          	add	s7,sp,t1
     d7c:	03d96c3b          	remw	s8,s2,t4
     d80:	030c0d1b          	addiw	s10,s8,48
     d84:	ffab8fa3          	sb	s10,-1(s7)
    if (!(whole /= 10)) {
     d88:	080b0663          	beqz	s6,e14 <_ftoa+0x35a>
     d8c:	03db44bb          	divw	s1,s6,t4
    buf[len++] = (char)(48 + (whole % 10));
     d90:	00358313          	addi	t1,a1,3
     d94:	00610cb3          	add	s9,sp,t1
     d98:	03db673b          	remw	a4,s6,t4
     d9c:	03070f1b          	addiw	t5,a4,48
     da0:	ffec8fa3          	sb	t5,-1(s9)
    if (!(whole /= 10)) {
     da4:	c8a5                	beqz	s1,e14 <_ftoa+0x35a>
     da6:	03d4c6bb          	divw	a3,s1,t4
    buf[len++] = (char)(48 + (whole % 10));
     daa:	00458313          	addi	t1,a1,4
     dae:	00610e33          	add	t3,sp,t1
     db2:	03d4e63b          	remw	a2,s1,t4
     db6:	0306009b          	addiw	ra,a2,48
     dba:	fe1e0fa3          	sb	ra,-1(t3)
    if (!(whole /= 10)) {
     dbe:	cab9                	beqz	a3,e14 <_ftoa+0x35a>
     dc0:	03d6c93b          	divw	s2,a3,t4
    buf[len++] = (char)(48 + (whole % 10));
     dc4:	00558313          	addi	t1,a1,5
     dc8:	006109b3          	add	s3,sp,t1
     dcc:	03d6ea3b          	remw	s4,a3,t4
     dd0:	030a0a9b          	addiw	s5,s4,48
     dd4:	ff598fa3          	sb	s5,-1(s3)
    if (!(whole /= 10)) {
     dd8:	02090e63          	beqz	s2,e14 <_ftoa+0x35a>
     ddc:	03d94b3b          	divw	s6,s2,t4
    buf[len++] = (char)(48 + (whole % 10));
     de0:	00658313          	addi	t1,a1,6
     de4:	00610bb3          	add	s7,sp,t1
     de8:	03d96c3b          	remw	s8,s2,t4
     dec:	030c0d1b          	addiw	s10,s8,48
     df0:	ffab8fa3          	sb	s10,-1(s7)
    if (!(whole /= 10)) {
     df4:	020b0063          	beqz	s6,e14 <_ftoa+0x35a>
     df8:	03db4f3b          	divw	t5,s6,t4
    buf[len++] = (char)(48 + (whole % 10));
     dfc:	00758313          	addi	t1,a1,7
     e00:	006105b3          	add	a1,sp,t1
     e04:	03db64bb          	remw	s1,s6,t4
     e08:	03048c9b          	addiw	s9,s1,48
     e0c:	ff958fa3          	sb	s9,-1(a1)
    if (!(whole /= 10)) {
     e10:	f20f14e3          	bnez	t5,d38 <_ftoa+0x27e>
      break;
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
     e14:	0038fe93          	andi	t4,a7,3
     e18:	4805                	li	a6,1
     e1a:	0f0e8463          	beq	t4,a6,f02 <_ftoa+0x448>
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
     e1e:	4e7d                	li	t3,31
     e20:	006e6c63          	bltu	t3,t1,e38 <_ftoa+0x37e>
    if (negative) {
     e24:	26050963          	beqz	a0,1096 <_ftoa+0x5dc>
      buf[len++] = '-';
     e28:	100c                	addi	a1,sp,32
     e2a:	006584b3          	add	s1,a1,t1
     e2e:	02d00c93          	li	s9,45
     e32:	ff948023          	sb	s9,-32(s1)
     e36:	0305                	addi	t1,t1,1
    else if (flags & FLAGS_SPACE) {
      buf[len++] = ' ';
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
     e38:	883e                	mv	a6,a5
     e3a:	870a                	mv	a4,sp
     e3c:	86a2                	mv	a3,s0
     e3e:	879a                	mv	a5,t1
     e40:	861e                	mv	a2,t2
     e42:	8596                	mv	a1,t0
     e44:	857e                	mv	a0,t6
     e46:	a14ff0ef          	jal	ra,5a <_out_rev>
}
     e4a:	70e6                	ld	ra,120(sp)
     e4c:	7446                	ld	s0,112(sp)
     e4e:	74a6                	ld	s1,104(sp)
     e50:	7906                	ld	s2,96(sp)
     e52:	69e6                	ld	s3,88(sp)
     e54:	6a46                	ld	s4,80(sp)
     e56:	6aa6                	ld	s5,72(sp)
     e58:	6b06                	ld	s6,64(sp)
     e5a:	7be2                	ld	s7,56(sp)
     e5c:	7c42                	ld	s8,48(sp)
     e5e:	7ca2                	ld	s9,40(sp)
     e60:	7d02                	ld	s10,32(sp)
     e62:	6109                	addi	sp,sp,128
     e64:	8082                	ret
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
     e66:	0048f313          	andi	t1,a7,4
     e6a:	1c031d63          	bnez	t1,1044 <_ftoa+0x58a>
     e6e:	6545                	lui	a0,0x11
     e70:	ac050713          	addi	a4,a0,-1344 # 10ac0 <_ctype_+0x108>
     e74:	4e0d                	li	t3,3
     e76:	86a2                	mv	a3,s0
}
     e78:	7446                	ld	s0,112(sp)
     e7a:	70e6                	ld	ra,120(sp)
     e7c:	74a6                	ld	s1,104(sp)
     e7e:	7906                	ld	s2,96(sp)
     e80:	69e6                	ld	s3,88(sp)
     e82:	6a46                	ld	s4,80(sp)
     e84:	6aa6                	ld	s5,72(sp)
     e86:	6b06                	ld	s6,64(sp)
     e88:	7be2                	ld	s7,56(sp)
     e8a:	7c42                	ld	s8,48(sp)
     e8c:	7ca2                	ld	s9,40(sp)
     e8e:	7d02                	ld	s10,32(sp)
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
     e90:	883e                	mv	a6,a5
     e92:	87f2                	mv	a5,t3
     e94:	861e                	mv	a2,t2
     e96:	8596                	mv	a1,t0
     e98:	857e                	mv	a0,t6
}
     e9a:	6109                	addi	sp,sp,128
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
     e9c:	9beff06f          	j	5a <_out_rev>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
     ea0:	63c5                	lui	t2,0x11
     ea2:	883e                	mv	a6,a5
     ea4:	ad038713          	addi	a4,t2,-1328 # 10ad0 <_ctype_+0x118>
     ea8:	478d                	li	a5,3
     eaa:	9b0ff06f          	j	5a <_out_rev>
  else if (diff < 0.5) {
     eae:	a2e39b53          	flt.d	s6,ft7,fa4
     eb2:	d60b1de3          	bnez	s6,c2c <_ftoa+0x172>
  else if ((frac == 0U) || (frac & 1U)) {
     eb6:	360e1563          	bnez	t3,1220 <_ftoa+0x766>
    ++frac;
     eba:	0e05                	addi	t3,t3,1
  if (prec == 0U) {
     ebc:	d6070ae3          	beqz	a4,c30 <_ftoa+0x176>
     ec0:	fe070c9b          	addiw	s9,a4,-32
     ec4:	006c80bb          	addw	ra,s9,t1
      buf[len++] = (char)(48U + (frac % 10U));
     ec8:	46a9                	li	a3,10
      if (!(frac /= 10U)) {
     eca:	44a5                	li	s1,9
     ecc:	a005                	j	eec <_ftoa+0x432>
      buf[len++] = (char)(48U + (frac % 10U));
     ece:	02de7833          	remu	a6,t3,a3
      --count;
     ed2:	fff7059b          	addiw	a1,a4,-1
      buf[len++] = (char)(48U + (frac % 10U));
     ed6:	0308061b          	addiw	a2,a6,48
     eda:	fecd0fa3          	sb	a2,-1(s10)
      if (!(frac /= 10U)) {
     ede:	02de5933          	divu	s2,t3,a3
     ee2:	1dc4fc63          	bgeu	s1,t3,10ba <_ftoa+0x600>
      --count;
     ee6:	872e                	mv	a4,a1
      buf[len++] = (char)(48U + (frac % 10U));
     ee8:	8376                	mv	t1,t4
      if (!(frac /= 10U)) {
     eea:	8e4a                	mv	t3,s2
      buf[len++] = (char)(48U + (frac % 10U));
     eec:	00130e93          	addi	t4,t1,1
     ef0:	01d10d33          	add	s10,sp,t4
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
     ef4:	fc171de3          	bne	a4,ra,ece <_ftoa+0x414>
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
     ef8:	0038ff13          	andi	t5,a7,3
     efc:	4805                	li	a6,1
     efe:	f30f1de3          	bne	t5,a6,e38 <_ftoa+0x37e>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
     f02:	df91                	beqz	a5,e1e <_ftoa+0x364>
     f04:	32051463          	bnez	a0,122c <_ftoa+0x772>
     f08:	00c8f713          	andi	a4,a7,12
     f0c:	32071063          	bnez	a4,122c <_ftoa+0x772>
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
     f10:	02079693          	slli	a3,a5,0x20
     f14:	0206de13          	srli	t3,a3,0x20
     f18:	f1c373e3          	bgeu	t1,t3,e1e <_ftoa+0x364>
     f1c:	467d                	li	a2,31
     f1e:	f0666de3          	bltu	a2,t1,e38 <_ftoa+0x37e>
     f22:	fff34093          	not	ra,t1
     f26:	01c08933          	add	s2,ra,t3
     f2a:	00797993          	andi	s3,s2,7
      buf[len++] = '0';
     f2e:	03000a13          	li	s4,48
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
     f32:	02000a93          	li	s5,32
     f36:	08098563          	beqz	s3,fc0 <_ftoa+0x506>
      buf[len++] = '0';
     f3a:	0305                	addi	t1,t1,1
     f3c:	00610b33          	add	s6,sp,t1
     f40:	ff4b0fa3          	sb	s4,-1(s6)
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
     f44:	ef530ae3          	beq	t1,s5,e38 <_ftoa+0x37e>
     f48:	4b85                	li	s7,1
     f4a:	07798b63          	beq	s3,s7,fc0 <_ftoa+0x506>
     f4e:	4c09                	li	s8,2
     f50:	07898163          	beq	s3,s8,fb2 <_ftoa+0x4f8>
     f54:	4d0d                	li	s10,3
     f56:	05a98763          	beq	s3,s10,fa4 <_ftoa+0x4ea>
     f5a:	4f11                	li	t5,4
     f5c:	03e98d63          	beq	s3,t5,f96 <_ftoa+0x4dc>
     f60:	4595                	li	a1,5
     f62:	02b98363          	beq	s3,a1,f88 <_ftoa+0x4ce>
     f66:	4499                	li	s1,6
     f68:	00998963          	beq	s3,s1,f7a <_ftoa+0x4c0>
      buf[len++] = '0';
     f6c:	0305                	addi	t1,t1,1
     f6e:	00610cb3          	add	s9,sp,t1
     f72:	ff4c8fa3          	sb	s4,-1(s9)
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
     f76:	ed5301e3          	beq	t1,s5,e38 <_ftoa+0x37e>
      buf[len++] = '0';
     f7a:	0305                	addi	t1,t1,1
     f7c:	00610eb3          	add	t4,sp,t1
     f80:	ff4e8fa3          	sb	s4,-1(t4)
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
     f84:	eb530ae3          	beq	t1,s5,e38 <_ftoa+0x37e>
      buf[len++] = '0';
     f88:	0305                	addi	t1,t1,1
     f8a:	00610833          	add	a6,sp,t1
     f8e:	ff480fa3          	sb	s4,-1(a6)
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
     f92:	eb5303e3          	beq	t1,s5,e38 <_ftoa+0x37e>
      buf[len++] = '0';
     f96:	0305                	addi	t1,t1,1
     f98:	00610733          	add	a4,sp,t1
     f9c:	ff470fa3          	sb	s4,-1(a4)
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
     fa0:	e9530ce3          	beq	t1,s5,e38 <_ftoa+0x37e>
      buf[len++] = '0';
     fa4:	0305                	addi	t1,t1,1
     fa6:	006106b3          	add	a3,sp,t1
     faa:	ff468fa3          	sb	s4,-1(a3)
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
     fae:	e95305e3          	beq	t1,s5,e38 <_ftoa+0x37e>
      buf[len++] = '0';
     fb2:	0305                	addi	t1,t1,1
     fb4:	00610633          	add	a2,sp,t1
     fb8:	ff460fa3          	sb	s4,-1(a2)
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
     fbc:	e7530ee3          	beq	t1,s5,e38 <_ftoa+0x37e>
      buf[len++] = '0';
     fc0:	0305                	addi	t1,t1,1
     fc2:	006100b3          	add	ra,sp,t1
     fc6:	ff408fa3          	sb	s4,-1(ra)
     fca:	891a                	mv	s2,t1
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
     fcc:	e5c309e3          	beq	t1,t3,e1e <_ftoa+0x364>
     fd0:	e75304e3          	beq	t1,s5,e38 <_ftoa+0x37e>
      buf[len++] = '0';
     fd4:	0305                	addi	t1,t1,1
     fd6:	00610eb3          	add	t4,sp,t1
     fda:	ff4e8fa3          	sb	s4,-1(t4)
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
     fde:	e5530de3          	beq	t1,s5,e38 <_ftoa+0x37e>
      buf[len++] = '0';
     fe2:	00290313          	addi	t1,s2,2
     fe6:	00610833          	add	a6,sp,t1
     fea:	ff480fa3          	sb	s4,-1(a6)
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
     fee:	e55305e3          	beq	t1,s5,e38 <_ftoa+0x37e>
      buf[len++] = '0';
     ff2:	00390313          	addi	t1,s2,3
     ff6:	00610733          	add	a4,sp,t1
     ffa:	ff470fa3          	sb	s4,-1(a4)
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
     ffe:	e3530de3          	beq	t1,s5,e38 <_ftoa+0x37e>
      buf[len++] = '0';
    1002:	00490313          	addi	t1,s2,4
    1006:	006106b3          	add	a3,sp,t1
    100a:	ff468fa3          	sb	s4,-1(a3)
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    100e:	e35305e3          	beq	t1,s5,e38 <_ftoa+0x37e>
      buf[len++] = '0';
    1012:	00590313          	addi	t1,s2,5
    1016:	00610633          	add	a2,sp,t1
    101a:	ff460fa3          	sb	s4,-1(a2)
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    101e:	e1530de3          	beq	t1,s5,e38 <_ftoa+0x37e>
      buf[len++] = '0';
    1022:	00690313          	addi	t1,s2,6
    1026:	006100b3          	add	ra,sp,t1
    102a:	ff408fa3          	sb	s4,-1(ra)
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    102e:	e15305e3          	beq	t1,s5,e38 <_ftoa+0x37e>
      buf[len++] = '0';
    1032:	00790313          	addi	t1,s2,7
    1036:	00610933          	add	s2,sp,t1
    103a:	ff490fa3          	sb	s4,-1(s2)
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    103e:	f95311e3          	bne	t1,s5,fc0 <_ftoa+0x506>
    1042:	bbdd                	j	e38 <_ftoa+0x37e>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
    1044:	69c5                	lui	s3,0x11
    1046:	ac898713          	addi	a4,s3,-1336 # 10ac8 <_ctype_+0x110>
    104a:	4e11                	li	t3,4
    104c:	b52d                	j	e76 <_ftoa+0x3bc>
    value = 0 - value;
    104e:	0aa1f553          	fsub.d	fa0,ft3,fa0
    negative = true;
    1052:	4505                	li	a0,1
    1054:	bce1                	j	b2c <_ftoa+0x72>
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
    1056:	001f7593          	andi	a1,t5,1
    105a:	be0589e3          	beqz	a1,c4c <_ftoa+0x192>
      ++whole;
    105e:	2f05                	addiw	t5,t5,1
    1060:	b6f5                	j	c4c <_ftoa+0x192>
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
    1062:	86a2                	mv	a3,s0
}
    1064:	7446                	ld	s0,112(sp)
    1066:	70e6                	ld	ra,120(sp)
    1068:	74a6                	ld	s1,104(sp)
    106a:	7906                	ld	s2,96(sp)
    106c:	69e6                	ld	s3,88(sp)
    106e:	6a46                	ld	s4,80(sp)
    1070:	6aa6                	ld	s5,72(sp)
    1072:	6b06                	ld	s6,64(sp)
    1074:	7be2                	ld	s7,56(sp)
    1076:	7c42                	ld	s8,48(sp)
    1078:	7ca2                	ld	s9,40(sp)
    107a:	7d02                	ld	s10,32(sp)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
    107c:	8846                	mv	a6,a7
    107e:	861e                	mv	a2,t2
    1080:	8596                	mv	a1,t0
    1082:	857e                	mv	a0,t6
}
    1084:	6109                	addi	sp,sp,128
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
    1086:	aa45                	j	1236 <_etoa>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
    1088:	62c5                	lui	t0,0x11
    108a:	883e                	mv	a6,a5
    108c:	ad828713          	addi	a4,t0,-1320 # 10ad8 <_ctype_+0x120>
    1090:	4791                	li	a5,4
    1092:	fc9fe06f          	j	5a <_out_rev>
    else if (flags & FLAGS_PLUS) {
    1096:	0048f993          	andi	s3,a7,4
    109a:	16099963          	bnez	s3,120c <_ftoa+0x752>
    else if (flags & FLAGS_SPACE) {
    109e:	0088fa13          	andi	s4,a7,8
    10a2:	d80a0be3          	beqz	s4,e38 <_ftoa+0x37e>
      buf[len++] = ' ';
    10a6:	02010a93          	addi	s5,sp,32
    10aa:	006a8b33          	add	s6,s5,t1
    10ae:	02000b93          	li	s7,32
    10b2:	ff7b0023          	sb	s7,-32(s6)
    10b6:	0305                	addi	t1,t1,1
    10b8:	b341                	j	e38 <_ftoa+0x37e>
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    10ba:	02000993          	li	s3,32
    10be:	173e8963          	beq	t4,s3,1230 <_ftoa+0x776>
    10c2:	ffe70a1b          	addiw	s4,a4,-2
    10c6:	8776                	mv	a4,t4
    10c8:	12058863          	beqz	a1,11f8 <_ftoa+0x73e>
    10cc:	fffeca93          	not	s5,t4
    10d0:	020a1b13          	slli	s6,s4,0x20
    10d4:	00230713          	addi	a4,t1,2
    10d8:	020b5b93          	srli	s7,s6,0x20
    10dc:	007afc13          	andi	s8,s5,7
    10e0:	975e                	add	a4,a4,s7
      buf[len++] = '0';
    10e2:	03000493          	li	s1,48
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    10e6:	02000c93          	li	s9,32
    10ea:	080c0663          	beqz	s8,1176 <_ftoa+0x6bc>
      buf[len++] = '0';
    10ee:	00230e93          	addi	t4,t1,2
    10f2:	01d10333          	add	t1,sp,t4
    10f6:	fe930fa3          	sb	s1,-1(t1)
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    10fa:	0eee8f63          	beq	t4,a4,11f8 <_ftoa+0x73e>
    10fe:	4d05                	li	s10,1
    1100:	07ac0b63          	beq	s8,s10,1176 <_ftoa+0x6bc>
    1104:	4089                	li	ra,2
    1106:	061c0163          	beq	s8,ra,1168 <_ftoa+0x6ae>
    110a:	468d                	li	a3,3
    110c:	04dc0763          	beq	s8,a3,115a <_ftoa+0x6a0>
    1110:	4811                	li	a6,4
    1112:	030c0d63          	beq	s8,a6,114c <_ftoa+0x692>
    1116:	4595                	li	a1,5
    1118:	02bc0363          	beq	s8,a1,113e <_ftoa+0x684>
    111c:	4619                	li	a2,6
    111e:	00cc0963          	beq	s8,a2,1130 <_ftoa+0x676>
      buf[len++] = '0';
    1122:	0e85                	addi	t4,t4,1
    1124:	01d10933          	add	s2,sp,t4
    1128:	fe990fa3          	sb	s1,-1(s2)
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    112c:	0cee8663          	beq	t4,a4,11f8 <_ftoa+0x73e>
      buf[len++] = '0';
    1130:	0e85                	addi	t4,t4,1
    1132:	01d10e33          	add	t3,sp,t4
    1136:	fe9e0fa3          	sb	s1,-1(t3)
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    113a:	0aee8f63          	beq	t4,a4,11f8 <_ftoa+0x73e>
      buf[len++] = '0';
    113e:	0e85                	addi	t4,t4,1
    1140:	01d109b3          	add	s3,sp,t4
    1144:	fe998fa3          	sb	s1,-1(s3)
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    1148:	0aee8863          	beq	t4,a4,11f8 <_ftoa+0x73e>
      buf[len++] = '0';
    114c:	0e85                	addi	t4,t4,1
    114e:	01d10a33          	add	s4,sp,t4
    1152:	fe9a0fa3          	sb	s1,-1(s4)
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    1156:	0aee8163          	beq	t4,a4,11f8 <_ftoa+0x73e>
      buf[len++] = '0';
    115a:	0e85                	addi	t4,t4,1
    115c:	01d10ab3          	add	s5,sp,t4
    1160:	fe9a8fa3          	sb	s1,-1(s5)
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    1164:	08ee8a63          	beq	t4,a4,11f8 <_ftoa+0x73e>
      buf[len++] = '0';
    1168:	0e85                	addi	t4,t4,1
    116a:	01d10b33          	add	s6,sp,t4
    116e:	fe9b0fa3          	sb	s1,-1(s6)
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    1172:	08ee8363          	beq	t4,a4,11f8 <_ftoa+0x73e>
      buf[len++] = '0';
    1176:	001e8693          	addi	a3,t4,1
    117a:	00d10933          	add	s2,sp,a3
    117e:	002e8613          	addi	a2,t4,2
    1182:	003e8593          	addi	a1,t4,3
    1186:	004e8813          	addi	a6,t4,4
    118a:	005e8313          	addi	t1,t4,5
    118e:	006e8e13          	addi	t3,t4,6
    1192:	007e8093          	addi	ra,t4,7
    1196:	fe990fa3          	sb	s1,-1(s2)
    119a:	0ea1                	addi	t4,t4,8
    119c:	00c109b3          	add	s3,sp,a2
    11a0:	00b10a33          	add	s4,sp,a1
    11a4:	01010ab3          	add	s5,sp,a6
    11a8:	00610b33          	add	s6,sp,t1
    11ac:	01c10bb3          	add	s7,sp,t3
    11b0:	00110c33          	add	s8,sp,ra
    11b4:	01d10d33          	add	s10,sp,t4
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    11b8:	07968c63          	beq	a3,s9,1230 <_ftoa+0x776>
    11bc:	02e68e63          	beq	a3,a4,11f8 <_ftoa+0x73e>
      buf[len++] = '0';
    11c0:	fe998fa3          	sb	s1,-1(s3)
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    11c4:	02e60a63          	beq	a2,a4,11f8 <_ftoa+0x73e>
      buf[len++] = '0';
    11c8:	fe9a0fa3          	sb	s1,-1(s4)
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    11cc:	02e58663          	beq	a1,a4,11f8 <_ftoa+0x73e>
      buf[len++] = '0';
    11d0:	fe9a8fa3          	sb	s1,-1(s5)
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    11d4:	02e80263          	beq	a6,a4,11f8 <_ftoa+0x73e>
      buf[len++] = '0';
    11d8:	fe9b0fa3          	sb	s1,-1(s6)
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    11dc:	00e30e63          	beq	t1,a4,11f8 <_ftoa+0x73e>
      buf[len++] = '0';
    11e0:	fe9b8fa3          	sb	s1,-1(s7)
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    11e4:	00ee0a63          	beq	t3,a4,11f8 <_ftoa+0x73e>
      buf[len++] = '0';
    11e8:	fe9c0fa3          	sb	s1,-1(s8)
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    11ec:	00e08663          	beq	ra,a4,11f8 <_ftoa+0x73e>
      buf[len++] = '0';
    11f0:	fe9d0fa3          	sb	s1,-1(s10)
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    11f4:	f8ee91e3          	bne	t4,a4,1176 <_ftoa+0x6bc>
      buf[len++] = '.';
    11f8:	1004                	addi	s1,sp,32
    11fa:	00e48cb3          	add	s9,s1,a4
    11fe:	00170313          	addi	t1,a4,1
    1202:	02e00713          	li	a4,46
    1206:	feec8023          	sb	a4,-32(s9)
    120a:	b489                	j	c4c <_ftoa+0x192>
      buf[len++] = '+';  // ignore the space if the '+' exists
    120c:	02010c13          	addi	s8,sp,32
    1210:	006c0d33          	add	s10,s8,t1
    1214:	02b00f13          	li	t5,43
    1218:	ffed0023          	sb	t5,-32(s10)
    121c:	0305                	addi	t1,t1,1
    121e:	b929                	j	e38 <_ftoa+0x37e>
  else if ((frac == 0U) || (frac & 1U)) {
    1220:	001e7b93          	andi	s7,t3,1
    1224:	a00b84e3          	beqz	s7,c2c <_ftoa+0x172>
    ++frac;
    1228:	0e05                	addi	t3,t3,1
    122a:	b949                	j	ebc <_ftoa+0x402>
      width--;
    122c:	37fd                	addiw	a5,a5,-1
    122e:	b1cd                	j	f10 <_ftoa+0x456>
      buf[len++] = '0';
    1230:	02000313          	li	t1,32
    1234:	b1d1                	j	ef8 <_ftoa+0x43e>

0000000000001236 <_etoa>:
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
    1236:	a2a528d3          	feq.d	a7,fa0,fa0
{
    123a:	7159                	addi	sp,sp,-112
    123c:	f0a2                	sd	s0,96(sp)
    123e:	e8ca                	sd	s2,80(sp)
    1240:	e4ce                	sd	s3,72(sp)
    1242:	e0d2                	sd	s4,64(sp)
    1244:	fc56                	sd	s5,56(sp)
    1246:	f85a                	sd	s6,48(sp)
    1248:	f486                	sd	ra,104(sp)
    124a:	eca6                	sd	s1,88(sp)
    124c:	f45e                	sd	s7,40(sp)
    124e:	f062                	sd	s8,32(sp)
    1250:	ec66                	sd	s9,24(sp)
    1252:	89aa                	mv	s3,a0
    1254:	8a2e                	mv	s4,a1
    1256:	8932                	mv	s2,a2
    1258:	8ab6                	mv	s5,a3
    125a:	8b3e                	mv	s6,a5
    125c:	8442                	mv	s0,a6
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
    125e:	38088163          	beqz	a7,15e0 <_etoa+0x3aa>
    1262:	6791                	lui	a5,0x4
    1264:	8c07b787          	fld	fa5,-1856(a5) # 38c0 <_end+0x8>
    1268:	a2a790d3          	flt.d	ra,fa5,fa0
    126c:	36009a63          	bnez	ra,15e0 <_etoa+0x3aa>
    1270:	6291                	lui	t0,0x4
    1272:	8b82b007          	fld	ft0,-1864(t0) # 38b8 <_end>
    1276:	a2051353          	flt.d	t1,fa0,ft0
    127a:	36031363          	bnez	t1,15e0 <_etoa+0x3aa>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
  }

  // determine the sign
  const bool negative = value < 0;
  if (negative) {
    127e:	f20000d3          	fmv.d.x	ft1,zero
    1282:	e20506d3          	fmv.x.d	a3,fa0
    1286:	a21513d3          	flt.d	t2,fa0,ft1
    128a:	00038663          	beqz	t2,1296 <_etoa+0x60>
    value = -value;
    128e:	22a51153          	fneg.d	ft2,fa0
    1292:	e20106d3          	fmv.x.d	a3,ft2
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
    1296:	40047613          	andi	a2,s0,1024
    129a:	e211                	bnez	a2,129e <_etoa+0x68>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
    129c:	4719                	li	a4,6
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
    129e:	0346d493          	srli	s1,a3,0x34
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
    12a2:	00c69813          	slli	a6,a3,0xc
    12a6:	3ff00c13          	li	s8,1023
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
    12aa:	7ff4f513          	andi	a0,s1,2047
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
    12ae:	00c85b93          	srli	s7,a6,0xc
    12b2:	034c1c93          	slli	s9,s8,0x34
    12b6:	019bee33          	or	t3,s7,s9
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
    12ba:	c015059b          	addiw	a1,a0,-1023
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
    12be:	6e91                	lui	t4,0x4
    12c0:	6f11                	lui	t5,0x4
    12c2:	6f91                	lui	t6,0x4
    12c4:	d20581d3          	fcvt.d.w	ft3,a1
    12c8:	8e0eb687          	fld	fa3,-1824(t4) # 38e0 <_end+0x28>
    12cc:	8e8f3707          	fld	fa4,-1816(t5) # 38e8 <_end+0x30>
    12d0:	f20e0353          	fmv.d.x	ft6,t3
    12d4:	8f0fb287          	fld	ft5,-1808(t6) # 38f0 <_end+0x38>
    12d8:	72d1f243          	fmadd.d	ft4,ft3,fa3,fa4
    12dc:	6891                	lui	a7,0x4
    12de:	0a5373d3          	fsub.d	ft7,ft6,ft5
    12e2:	8f88b587          	fld	fa1,-1800(a7) # 38f8 <_end+0x40>
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
    12e6:	6291                	lui	t0,0x4
    12e8:	6311                	lui	t1,0x4
    12ea:	9002be07          	fld	ft8,-1792(t0) # 3900 <_end+0x48>
    12ee:	8d833e87          	fld	ft9,-1832(t1) # 38d8 <_end+0x20>
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
    12f2:	6511                	lui	a0,0x4
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
    12f4:	22b3f643          	fmadd.d	fa2,ft7,fa1,ft4
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
    12f8:	90853787          	fld	fa5,-1784(a0) # 3908 <_end+0x50>
    12fc:	6811                	lui	a6,0x4
    12fe:	91083087          	fld	ft1,-1776(a6) # 3910 <_end+0x58>
  const double z2 = z * z;
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    1302:	6c91                	lui	s9,0x4
    1304:	918cb707          	fld	fa4,-1768(s9) # 3918 <_end+0x60>
    1308:	6791                	lui	a5,0x4
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
    130a:	c20610d3          	fcvt.w.d	ra,fa2,rtz
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    130e:	9207b807          	fld	fa6,-1760(a5) # 3920 <_end+0x68>
    1312:	6e11                	lui	t3,0x4
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
    1314:	d20088d3          	fcvt.d.w	fa7,ra
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    1318:	928e3607          	fld	fa2,-1752(t3) # 3928 <_end+0x70>
    131c:	6b91                	lui	s7,0x4
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
    131e:	ebc8ff43          	fmadd.d	ft10,fa7,ft8,ft9
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    1322:	930bb687          	fld	fa3,-1744(s7) # 3930 <_end+0x78>
    1326:	6e91                	lui	t4,0x4
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
    1328:	00008c1b          	sext.w	s8,ra
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
    132c:	c20f13d3          	fcvt.w.d	t2,ft10,rtz
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
    1330:	d2038fd3          	fcvt.d.w	ft11,t2
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
    1334:	3ff3849b          	addiw	s1,t2,1023
    1338:	03449593          	slli	a1,s1,0x34
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
    133c:	12fff053          	fmul.d	ft0,ft11,fa5
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    1340:	938ebf87          	fld	ft11,-1736(t4) # 3938 <_end+0x80>
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
    1344:	0218f147          	fmsub.d	ft2,fa7,ft1,ft0
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    1348:	f2058053          	fmv.d.x	ft0,a1
  // correct for rounding errors
  if (value < conv.F) {
    134c:	f20680d3          	fmv.d.x	ft1,a3
  const double z2 = z * z;
    1350:	122171d3          	fmul.d	ft3,ft2,ft2
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    1354:	0a26f253          	fsub.d	ft4,fa3,ft2
    1358:	022172d3          	fadd.d	ft5,ft2,ft2
    135c:	1ae1f353          	fdiv.d	ft6,ft3,fa4
    1360:	030373d3          	fadd.d	ft7,ft6,fa6
    1364:	1a71f5d3          	fdiv.d	fa1,ft3,ft7
    1368:	02c5f8d3          	fadd.d	fa7,fa1,fa2
    136c:	1b11fe53          	fdiv.d	ft8,ft3,fa7
    1370:	024e7ed3          	fadd.d	ft9,ft8,ft4
    1374:	1bd2ff53          	fdiv.d	ft10,ft5,ft9
    1378:	03ff77d3          	fadd.d	fa5,ft10,ft11
    137c:	1207f153          	fmul.d	ft2,fa5,ft0
  if (value < conv.F) {
    1380:	a2209f53          	flt.d	t5,ft1,ft2
    1384:	000f0663          	beqz	t5,1390 <_etoa+0x15a>
    expval--;
    conv.F /= 10;
    1388:	1b017153          	fdiv.d	ft2,ft2,fa6
    expval--;
    138c:	fff08c1b          	addiw	s8,ra,-1
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
    1390:	063c0f9b          	addiw	t6,s8,99

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
    1394:	00b45893          	srli	a7,s0,0xb
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
    1398:	0c600093          	li	ra,198
    139c:	01f0b2b3          	sltu	t0,ra,t6
  if (flags & FLAGS_ADAPT_EXP) {
    13a0:	0018f793          	andi	a5,a7,1
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
    13a4:	00428c93          	addi	s9,t0,4
  if (flags & FLAGS_ADAPT_EXP) {
    13a8:	cf8d                	beqz	a5,13e2 <_etoa+0x1ac>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
    13aa:	6311                	lui	t1,0x4
    13ac:	94033807          	fld	fa6,-1728(t1) # 3940 <_end+0x88>
    13b0:	f20681d3          	fmv.d.x	ft3,a3
    13b4:	a23803d3          	fle.d	t2,fa6,ft3
    13b8:	24038f63          	beqz	t2,1616 <_etoa+0x3e0>
    13bc:	6491                	lui	s1,0x4
    13be:	9484b687          	fld	fa3,-1720(s1) # 3948 <_end+0x90>
    13c2:	a2d195d3          	flt.d	a1,ft3,fa3
    13c6:	24058863          	beqz	a1,1616 <_etoa+0x3e0>
      if ((int)prec > expval) {
    13ca:	0007061b          	sext.w	a2,a4
        prec = (unsigned)((int)prec - expval - 1);
      }
      else {
        prec = 0;
    13ce:	4701                	li	a4,0
      if ((int)prec > expval) {
    13d0:	00cc5563          	bge	s8,a2,13da <_etoa+0x1a4>
        prec = (unsigned)((int)prec - expval - 1);
    13d4:	4186073b          	subw	a4,a2,s8
    13d8:	377d                	addiw	a4,a4,-1
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
    13da:	40046413          	ori	s0,s0,1024
      // no characters in exponent
      minwidth = 0U;
    13de:	4c81                	li	s9,0
      expval   = 0;
    13e0:	4c01                	li	s8,0
  if (width > minwidth) {
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
    13e2:	4781                	li	a5,0
  if (width > minwidth) {
    13e4:	016cf463          	bgeu	s9,s6,13ec <_etoa+0x1b6>
    fwidth -= minwidth;
    13e8:	419b07bb          	subw	a5,s6,s9
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
    13ec:	00247b93          	andi	s7,s0,2
    13f0:	000b8863          	beqz	s7,1400 <_etoa+0x1ca>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
    13f4:	001cb513          	seqz	a0,s9
    13f8:	40a00833          	neg	a6,a0
    13fc:	0107f7b3          	and	a5,a5,a6
  }

  // rescale the float value
  if (expval) {
    1400:	200c1463          	bnez	s8,1608 <_etoa+0x3d2>
    value /= conv.F;
  }

  // output the floating part
  const size_t start_idx = idx;
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
    1404:	f2000753          	fmv.d.x	fa4,zero
    1408:	a2e51e53          	flt.d	t3,fa0,fa4
    140c:	000e0863          	beqz	t3,141c <_etoa+0x1e6>
    1410:	f2068553          	fmv.d.x	fa0,a3
    1414:	22a51353          	fneg.d	ft6,fa0
    1418:	e20306d3          	fmv.x.d	a3,ft6
    141c:	f2068553          	fmv.d.x	fa0,a3
    1420:	7efd                	lui	t4,0xfffff
    1422:	7ffe8f13          	addi	t5,t4,2047 # fffffffffffff7ff <tohost+0x2fffffffafa7f7ff>
    1426:	01e47833          	and	a6,s0,t5
    142a:	86d6                	mv	a3,s5
    142c:	864a                	mv	a2,s2
    142e:	85d2                	mv	a1,s4
    1430:	854e                	mv	a0,s3
    1432:	e88ff0ef          	jal	ra,aba <_ftoa>
    1436:	84aa                	mv	s1,a0

  // output the exponent part
  if (minwidth) {
    1438:	180c8663          	beqz	s9,15c4 <_etoa+0x38e>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
    143c:	02047f93          	andi	t6,s0,32
    1440:	04500513          	li	a0,69
    1444:	000f9463          	bnez	t6,144c <_etoa+0x216>
    1448:	06500513          	li	a0,101
    144c:	8626                	mv	a2,s1
    144e:	86d6                	mv	a3,s5
    1450:	85d2                	mv	a1,s4
    1452:	9982                	jalr	s3
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
    1454:	41fc529b          	sraiw	t0,s8,0x1f
    1458:	005c4333          	xor	t1,s8,t0
    145c:	fffc889b          	addiw	a7,s9,-1
    1460:	4415                	li	s0,5
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
    1462:	00148613          	addi	a2,s1,1
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
    1466:	e046                	sd	a7,0(sp)
    1468:	e422                	sd	s0,8(sp)
    146a:	4881                	li	a7,0
    146c:	4829                	li	a6,10
    146e:	01fc579b          	srliw	a5,s8,0x1f
    1472:	4053073b          	subw	a4,t1,t0
    1476:	86d6                	mv	a3,s5
    1478:	85d2                	mv	a1,s4
    147a:	854e                	mv	a0,s3
    147c:	fe1fe0ef          	jal	ra,45c <_ntoa_long>
    1480:	84aa                	mv	s1,a0
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
    1482:	140b8163          	beqz	s7,15c4 <_etoa+0x38e>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
    1486:	1b02                	slli	s6,s6,0x20
    1488:	41250933          	sub	s2,a0,s2
    148c:	020b5c93          	srli	s9,s6,0x20
    1490:	13997a63          	bgeu	s2,s9,15c4 <_etoa+0x38e>
    1494:	fff94093          	not	ra,s2
    1498:	862a                	mv	a2,a0
    149a:	019087b3          	add	a5,ra,s9
    149e:	0905                	addi	s2,s2,1
    14a0:	86d6                	mv	a3,s5
    14a2:	85d2                	mv	a1,s4
    14a4:	02000513          	li	a0,32
    14a8:	0077fc13          	andi	s8,a5,7
    14ac:	0485                	addi	s1,s1,1
    14ae:	9982                	jalr	s3
    14b0:	11997a63          	bgeu	s2,s9,15c4 <_etoa+0x38e>
    14b4:	080c0d63          	beqz	s8,154e <_etoa+0x318>
    14b8:	4385                	li	t2,1
    14ba:	087c0063          	beq	s8,t2,153a <_etoa+0x304>
    14be:	4589                	li	a1,2
    14c0:	06bc0563          	beq	s8,a1,152a <_etoa+0x2f4>
    14c4:	460d                	li	a2,3
    14c6:	04cc0a63          	beq	s8,a2,151a <_etoa+0x2e4>
    14ca:	4711                	li	a4,4
    14cc:	02ec0f63          	beq	s8,a4,150a <_etoa+0x2d4>
    14d0:	028c0563          	beq	s8,s0,14fa <_etoa+0x2c4>
    14d4:	4b99                	li	s7,6
    14d6:	017c0a63          	beq	s8,s7,14ea <_etoa+0x2b4>
    14da:	8626                	mv	a2,s1
    14dc:	86d6                	mv	a3,s5
    14de:	85d2                	mv	a1,s4
    14e0:	02000513          	li	a0,32
    14e4:	0485                	addi	s1,s1,1
    14e6:	9982                	jalr	s3
    14e8:	0905                	addi	s2,s2,1
    14ea:	8626                	mv	a2,s1
    14ec:	86d6                	mv	a3,s5
    14ee:	85d2                	mv	a1,s4
    14f0:	02000513          	li	a0,32
    14f4:	0485                	addi	s1,s1,1
    14f6:	9982                	jalr	s3
    14f8:	0905                	addi	s2,s2,1
    14fa:	8626                	mv	a2,s1
    14fc:	86d6                	mv	a3,s5
    14fe:	85d2                	mv	a1,s4
    1500:	02000513          	li	a0,32
    1504:	0485                	addi	s1,s1,1
    1506:	9982                	jalr	s3
    1508:	0905                	addi	s2,s2,1
    150a:	8626                	mv	a2,s1
    150c:	86d6                	mv	a3,s5
    150e:	85d2                	mv	a1,s4
    1510:	02000513          	li	a0,32
    1514:	0485                	addi	s1,s1,1
    1516:	9982                	jalr	s3
    1518:	0905                	addi	s2,s2,1
    151a:	8626                	mv	a2,s1
    151c:	86d6                	mv	a3,s5
    151e:	85d2                	mv	a1,s4
    1520:	02000513          	li	a0,32
    1524:	0485                	addi	s1,s1,1
    1526:	9982                	jalr	s3
    1528:	0905                	addi	s2,s2,1
    152a:	8626                	mv	a2,s1
    152c:	86d6                	mv	a3,s5
    152e:	85d2                	mv	a1,s4
    1530:	02000513          	li	a0,32
    1534:	0485                	addi	s1,s1,1
    1536:	9982                	jalr	s3
    1538:	0905                	addi	s2,s2,1
    153a:	8626                	mv	a2,s1
    153c:	0905                	addi	s2,s2,1
    153e:	86d6                	mv	a3,s5
    1540:	85d2                	mv	a1,s4
    1542:	02000513          	li	a0,32
    1546:	0485                	addi	s1,s1,1
    1548:	9982                	jalr	s3
    154a:	07997d63          	bgeu	s2,s9,15c4 <_etoa+0x38e>
    154e:	8626                	mv	a2,s1
    1550:	86d6                	mv	a3,s5
    1552:	85d2                	mv	a1,s4
    1554:	02000513          	li	a0,32
    1558:	9982                	jalr	s3
    155a:	00148613          	addi	a2,s1,1
    155e:	86d6                	mv	a3,s5
    1560:	85d2                	mv	a1,s4
    1562:	02000513          	li	a0,32
    1566:	9982                	jalr	s3
    1568:	00248613          	addi	a2,s1,2
    156c:	86d6                	mv	a3,s5
    156e:	85d2                	mv	a1,s4
    1570:	02000513          	li	a0,32
    1574:	9982                	jalr	s3
    1576:	00348613          	addi	a2,s1,3
    157a:	86d6                	mv	a3,s5
    157c:	85d2                	mv	a1,s4
    157e:	02000513          	li	a0,32
    1582:	9982                	jalr	s3
    1584:	00448613          	addi	a2,s1,4
    1588:	86d6                	mv	a3,s5
    158a:	85d2                	mv	a1,s4
    158c:	02000513          	li	a0,32
    1590:	9982                	jalr	s3
    1592:	00548613          	addi	a2,s1,5
    1596:	86d6                	mv	a3,s5
    1598:	85d2                	mv	a1,s4
    159a:	02000513          	li	a0,32
    159e:	9982                	jalr	s3
    15a0:	00648613          	addi	a2,s1,6
    15a4:	86d6                	mv	a3,s5
    15a6:	85d2                	mv	a1,s4
    15a8:	02000513          	li	a0,32
    15ac:	9982                	jalr	s3
    15ae:	00748613          	addi	a2,s1,7
    15b2:	0921                	addi	s2,s2,8
    15b4:	86d6                	mv	a3,s5
    15b6:	85d2                	mv	a1,s4
    15b8:	02000513          	li	a0,32
    15bc:	04a1                	addi	s1,s1,8
    15be:	9982                	jalr	s3
    15c0:	f99967e3          	bltu	s2,s9,154e <_etoa+0x318>
    }
  }
  return idx;
}
    15c4:	70a6                	ld	ra,104(sp)
    15c6:	7406                	ld	s0,96(sp)
    15c8:	6946                	ld	s2,80(sp)
    15ca:	69a6                	ld	s3,72(sp)
    15cc:	6a06                	ld	s4,64(sp)
    15ce:	7ae2                	ld	s5,56(sp)
    15d0:	7b42                	ld	s6,48(sp)
    15d2:	7ba2                	ld	s7,40(sp)
    15d4:	7c02                	ld	s8,32(sp)
    15d6:	6ce2                	ld	s9,24(sp)
    15d8:	8526                	mv	a0,s1
    15da:	64e6                	ld	s1,88(sp)
    15dc:	6165                	addi	sp,sp,112
    15de:	8082                	ret
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
    15e0:	8822                	mv	a6,s0
}
    15e2:	7406                	ld	s0,96(sp)
    15e4:	70a6                	ld	ra,104(sp)
    15e6:	64e6                	ld	s1,88(sp)
    15e8:	7ba2                	ld	s7,40(sp)
    15ea:	7c02                	ld	s8,32(sp)
    15ec:	6ce2                	ld	s9,24(sp)
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
    15ee:	87da                	mv	a5,s6
    15f0:	86d6                	mv	a3,s5
}
    15f2:	7b42                	ld	s6,48(sp)
    15f4:	7ae2                	ld	s5,56(sp)
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
    15f6:	864a                	mv	a2,s2
    15f8:	85d2                	mv	a1,s4
}
    15fa:	6946                	ld	s2,80(sp)
    15fc:	6a06                	ld	s4,64(sp)
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
    15fe:	854e                	mv	a0,s3
}
    1600:	69a6                	ld	s3,72(sp)
    1602:	6165                	addi	sp,sp,112
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
    1604:	cb6ff06f          	j	aba <_ftoa>
    value /= conv.F;
    1608:	f2068253          	fmv.d.x	ft4,a3
    160c:	1a2272d3          	fdiv.d	ft5,ft4,ft2
    1610:	e20286d3          	fmv.x.d	a3,ft5
    1614:	bbc5                	j	1404 <_etoa+0x1ce>
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
    1616:	dc0706e3          	beqz	a4,13e2 <_etoa+0x1ac>
    161a:	dc0604e3          	beqz	a2,13e2 <_etoa+0x1ac>
        --prec;
    161e:	377d                	addiw	a4,a4,-1
    1620:	b3c9                	j	13e2 <_etoa+0x1ac>

0000000000001622 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    1622:	7171                	addi	sp,sp,-176
    1624:	ed26                	sd	s1,152(sp)
    1626:	e94a                	sd	s2,144(sp)
    1628:	e54e                	sd	s3,136(sp)
    162a:	f4de                	sd	s7,104(sp)
    162c:	f0e2                	sd	s8,96(sp)
    162e:	f506                	sd	ra,168(sp)
    1630:	f122                	sd	s0,160(sp)
    1632:	e152                	sd	s4,128(sp)
    1634:	fcd6                	sd	s5,120(sp)
    1636:	f8da                	sd	s6,112(sp)
    1638:	ece6                	sd	s9,88(sp)
    163a:	e8ea                	sd	s10,80(sp)
    163c:	e4ee                	sd	s11,72(sp)
    163e:	892e                	mv	s2,a1
    1640:	84b2                	mv	s1,a2
    1642:	8bb6                	mv	s7,a3
    1644:	8c3a                	mv	s8,a4
    1646:	89aa                	mv	s3,a0
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    1648:	64058a63          	beqz	a1,1c9c <_vsnprintf+0x67a>
    // use null output function
    out = _out_null;
  }

  while (*format)
    164c:	000bc503          	lbu	a0,0(s7)
    1650:	4401                	li	s0,0
    1652:	64050c63          	beqz	a0,1caa <_vsnprintf+0x688>
    1656:	67c1                	lui	a5,0x10
    1658:	6b41                	lui	s6,0x10
    165a:	6a41                	lui	s4,0x10
    165c:	09078093          	addi	ra,a5,144 # 10090 <_end+0xc7d8>
    1660:	044b0293          	addi	t0,s6,68 # 10044 <_end+0xc78c>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
    1664:	02500a93          	li	s5,37
    1668:	000a0a13          	mv	s4,s4
    166c:	ec06                	sd	ra,24(sp)
    166e:	e816                	sd	t0,16(sp)
    1670:	a811                	j	1684 <_vsnprintf+0x62>
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
    1672:	8622                	mv	a2,s0
    1674:	86a6                	mv	a3,s1
    1676:	85ca                	mv	a1,s2
    1678:	0405                	addi	s0,s0,1
    167a:	9982                	jalr	s3
  while (*format)
    167c:	000bc503          	lbu	a0,0(s7)
    1680:	18050863          	beqz	a0,1810 <_vsnprintf+0x1ee>
      format++;
    1684:	0b85                	addi	s7,s7,1
    if (*format != '%') {
    1686:	ff5516e3          	bne	a0,s5,1672 <_vsnprintf+0x50>
    flags = 0U;
    168a:	4801                	li	a6,0
    168c:	4641                	li	a2,16
      switch (*format) {
    168e:	000bc503          	lbu	a0,0(s7)
      format++;
    1692:	001b8713          	addi	a4,s7,1
    1696:	82ba                	mv	t0,a4
    1698:	fe05031b          	addiw	t1,a0,-32
    169c:	0ff37393          	zext.b	t2,t1
    16a0:	00766963          	bltu	a2,t2,16b2 <_vsnprintf+0x90>
    16a4:	00239593          	slli	a1,t2,0x2
    16a8:	014588b3          	add	a7,a1,s4
    16ac:	0008ac83          	lw	s9,0(a7)
    16b0:	8c82                	jr	s9
  return (ch >= '0') && (ch <= '9');
    16b2:	fd050d9b          	addiw	s11,a0,-48
    if (_is_digit(*format)) {
    16b6:	0ffdfe13          	zext.b	t3,s11
    16ba:	4ea5                	li	t4,9
    16bc:	0bcef163          	bgeu	t4,t3,175e <_vsnprintf+0x13c>
    else if (*format == '*') {
    16c0:	02a00f13          	li	t5,42
    16c4:	1be50463          	beq	a0,t5,186c <_vsnprintf+0x24a>
    16c8:	82de                	mv	t0,s7
    width = 0U;
    16ca:	4b01                	li	s6,0
      format++;
    16cc:	8bba                	mv	s7,a4
    if (*format == '.') {
    16ce:	02e00093          	li	ra,46
    precision = 0U;
    16d2:	4881                	li	a7,0
    if (*format == '.') {
    16d4:	16150963          	beq	a0,ra,1846 <_vsnprintf+0x224>
    switch (*format) {
    16d8:	f985031b          	addiw	t1,a0,-104
    16dc:	0ff37c93          	zext.b	s9,t1
    16e0:	4e49                	li	t3,18
    16e2:	059e6e63          	bltu	t3,s9,173e <_vsnprintf+0x11c>
    16e6:	6f42                	ld	t5,16(sp)
    16e8:	002c9e93          	slli	t4,s9,0x2
    16ec:	01ee8fb3          	add	t6,t4,t5
    16f0:	000fa783          	lw	a5,0(t6)
    16f4:	8782                	jr	a5
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    16f6:	00186813          	ori	a6,a6,1
    16fa:	2801                	sext.w	a6,a6
      format++;
    16fc:	8bba                	mv	s7,a4
    16fe:	bf41                	j	168e <_vsnprintf+0x6c>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    1700:	00286513          	ori	a0,a6,2
    1704:	0005081b          	sext.w	a6,a0
      format++;
    1708:	8bba                	mv	s7,a4
    170a:	b751                	j	168e <_vsnprintf+0x6c>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    170c:	00486693          	ori	a3,a6,4
    1710:	0006881b          	sext.w	a6,a3
      format++;
    1714:	8bba                	mv	s7,a4
    1716:	bfa5                	j	168e <_vsnprintf+0x6c>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    1718:	01086b93          	ori	s7,a6,16
    171c:	000b881b          	sext.w	a6,s7
      format++;
    1720:	8bba                	mv	s7,a4
    1722:	b7b5                	j	168e <_vsnprintf+0x6c>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    1724:	00886d13          	ori	s10,a6,8
    1728:	000d081b          	sext.w	a6,s10
      format++;
    172c:	8bba                	mv	s7,a4
    172e:	b785                	j	168e <_vsnprintf+0x6c>
    switch (*format) {
    1730:	0012c503          	lbu	a0,1(t0)
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    1734:	10086293          	ori	t0,a6,256
    1738:	0002881b          	sext.w	a6,t0
        format++;
    173c:	0b85                	addi	s7,s7,1
    switch (*format) {
    173e:	fdb5069b          	addiw	a3,a0,-37
    1742:	0ff6f093          	zext.b	ra,a3
    1746:	05300593          	li	a1,83
    174a:	f215e4e3          	bltu	a1,ra,1672 <_vsnprintf+0x50>
    174e:	6de2                	ld	s11,24(sp)
    1750:	00209d13          	slli	s10,ra,0x2
    1754:	01bd0333          	add	t1,s10,s11
    1758:	00032c83          	lw	s9,0(t1)
    175c:	8c82                	jr	s9
  unsigned int i = 0U;
    175e:	4b01                	li	s6,0
  while (_is_digit(**str)) {
    1760:	40a5                	li	ra,9
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    1762:	002b179b          	slliw	a5,s6,0x2
    1766:	01678b3b          	addw	s6,a5,s6
    176a:	001b129b          	slliw	t0,s6,0x1
    176e:	00a2863b          	addw	a2,t0,a0
  while (_is_digit(**str)) {
    1772:	00074503          	lbu	a0,0(a4)
    1776:	85de                	mv	a1,s7
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    1778:	833a                	mv	t1,a4
  return (ch >= '0') && (ch <= '9');
    177a:	fd05039b          	addiw	t2,a0,-48
  while (_is_digit(**str)) {
    177e:	0ff3f893          	zext.b	a7,t2
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    1782:	fd060b1b          	addiw	s6,a2,-48
  while (_is_digit(**str)) {
    1786:	0f10ee63          	bltu	ra,a7,1882 <_vsnprintf+0x260>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    178a:	002b159b          	slliw	a1,s6,0x2
    178e:	01658cbb          	addw	s9,a1,s6
    1792:	0705                	addi	a4,a4,1
    1794:	001c969b          	slliw	a3,s9,0x1
    1798:	00a68bbb          	addw	s7,a3,a0
  while (_is_digit(**str)) {
    179c:	00074503          	lbu	a0,0(a4)
    17a0:	8d3a                	mv	s10,a4
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    17a2:	859a                	mv	a1,t1
  return (ch >= '0') && (ch <= '9');
    17a4:	fd050d9b          	addiw	s11,a0,-48
  while (_is_digit(**str)) {
    17a8:	0ffdfe13          	zext.b	t3,s11
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    17ac:	fd0b8b1b          	addiw	s6,s7,-48
  while (_is_digit(**str)) {
    17b0:	0dc0e963          	bltu	ra,t3,1882 <_vsnprintf+0x260>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    17b4:	002b1e9b          	slliw	t4,s6,0x2
    17b8:	016e8f3b          	addw	t5,t4,s6
    17bc:	0705                	addi	a4,a4,1
    17be:	001f1f9b          	slliw	t6,t5,0x1
    17c2:	00af87bb          	addw	a5,t6,a0
  while (_is_digit(**str)) {
    17c6:	00074503          	lbu	a0,0(a4)
    17ca:	85ea                	mv	a1,s10
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    17cc:	82ba                	mv	t0,a4
  return (ch >= '0') && (ch <= '9');
    17ce:	fd050b1b          	addiw	s6,a0,-48
  while (_is_digit(**str)) {
    17d2:	0ffb7613          	zext.b	a2,s6
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    17d6:	fd078b1b          	addiw	s6,a5,-48
  while (_is_digit(**str)) {
    17da:	0ac0e463          	bltu	ra,a2,1882 <_vsnprintf+0x260>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    17de:	002b171b          	slliw	a4,s6,0x2
    17e2:	0167033b          	addw	t1,a4,s6
    17e6:	0013139b          	slliw	t2,t1,0x1
    17ea:	00a388bb          	addw	a7,t2,a0
  while (_is_digit(**str)) {
    17ee:	002d4503          	lbu	a0,2(s10)
    17f2:	002d0713          	addi	a4,s10,2
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    17f6:	8596                	mv	a1,t0
  return (ch >= '0') && (ch <= '9');
    17f8:	fd050c9b          	addiw	s9,a0,-48
  while (_is_digit(**str)) {
    17fc:	0ffcf693          	zext.b	a3,s9
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    1800:	8bba                	mv	s7,a4
    1802:	fd088b1b          	addiw	s6,a7,-48
  while (_is_digit(**str)) {
    1806:	06d0ee63          	bltu	ra,a3,1882 <_vsnprintf+0x260>
    180a:	003d0713          	addi	a4,s10,3
    180e:	bf91                	j	1762 <_vsnprintf+0x140>

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);

  // return written chars without terminating \0
  return (int)idx;
    1810:	00040a9b          	sext.w	s5,s0
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    1814:	00946463          	bltu	s0,s1,181c <_vsnprintf+0x1fa>
    1818:	fff48413          	addi	s0,s1,-1
    181c:	86a6                	mv	a3,s1
    181e:	8622                	mv	a2,s0
    1820:	85ca                	mv	a1,s2
    1822:	4501                	li	a0,0
    1824:	9982                	jalr	s3
}
    1826:	70aa                	ld	ra,168(sp)
    1828:	740a                	ld	s0,160(sp)
    182a:	64ea                	ld	s1,152(sp)
    182c:	694a                	ld	s2,144(sp)
    182e:	69aa                	ld	s3,136(sp)
    1830:	6a0a                	ld	s4,128(sp)
    1832:	7b46                	ld	s6,112(sp)
    1834:	7ba6                	ld	s7,104(sp)
    1836:	7c06                	ld	s8,96(sp)
    1838:	6ce6                	ld	s9,88(sp)
    183a:	6d46                	ld	s10,80(sp)
    183c:	6da6                	ld	s11,72(sp)
    183e:	8556                	mv	a0,s5
    1840:	7ae6                	ld	s5,120(sp)
    1842:	614d                	addi	sp,sp,176
    1844:	8082                	ret
      if (_is_digit(*format)) {
    1846:	0012c503          	lbu	a0,1(t0)
      flags |= FLAGS_PRECISION;
    184a:	40086813          	ori	a6,a6,1024
      if (_is_digit(*format)) {
    184e:	4d25                	li	s10,9
  return (ch >= '0') && (ch <= '9');
    1850:	fd050d9b          	addiw	s11,a0,-48
      if (_is_digit(*format)) {
    1854:	0ffdfe13          	zext.b	t3,s11
      flags |= FLAGS_PRECISION;
    1858:	2801                	sext.w	a6,a6
      if (_is_digit(*format)) {
    185a:	45cd7c63          	bgeu	s10,t3,1cb2 <_vsnprintf+0x690>
      else if (*format == '*') {
    185e:	02a00e93          	li	t4,42
    1862:	51d50063          	beq	a0,t4,1d62 <_vsnprintf+0x740>
      format++;
    1866:	82de                	mv	t0,s7
        format++;
    1868:	0b85                	addi	s7,s7,1
    186a:	b5bd                	j	16d8 <_vsnprintf+0xb6>
      const int w = va_arg(va, int);
    186c:	000c2703          	lw	a4,0(s8)
    1870:	0c21                	addi	s8,s8,8
        width = (unsigned int)w;
    1872:	00070b1b          	sext.w	s6,a4
      if (w < 0) {
    1876:	00074a63          	bltz	a4,188a <_vsnprintf+0x268>
    if (*format == '.') {
    187a:	001bc503          	lbu	a0,1(s7)
      format++;
    187e:	0b89                	addi	s7,s7,2
    1880:	b5b9                	j	16ce <_vsnprintf+0xac>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    1882:	82ba                	mv	t0,a4
      format++;
    1884:	00258b93          	addi	s7,a1,2
    1888:	b599                	j	16ce <_vsnprintf+0xac>
        flags |= FLAGS_LEFT;    // reverse padding
    188a:	00286f93          	ori	t6,a6,2
    if (*format == '.') {
    188e:	001bc503          	lbu	a0,1(s7)
        flags |= FLAGS_LEFT;    // reverse padding
    1892:	000f881b          	sext.w	a6,t6
        width = (unsigned int)-w;
    1896:	40e00b3b          	negw	s6,a4
      format++;
    189a:	0b89                	addi	s7,s7,2
    189c:	bd0d                	j	16ce <_vsnprintf+0xac>
        if (*format == 'x' || *format == 'X') {
    189e:	07800313          	li	t1,120
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    18a2:	008c0c93          	addi	s9,s8,8
        if (*format == 'x' || *format == 'X') {
    18a6:	2a650be3          	beq	a0,t1,235c <_vsnprintf+0xd3a>
    18aa:	05800293          	li	t0,88
    18ae:	76550563          	beq	a0,t0,2018 <_vsnprintf+0x9f6>
        else if (*format == 'o') {
    18b2:	06f00e13          	li	t3,111
    18b6:	2fc506e3          	beq	a0,t3,23a2 <_vsnprintf+0xd80>
        else if (*format == 'b') {
    18ba:	06200d93          	li	s11,98
    18be:	33b508e3          	beq	a0,s11,23ee <_vsnprintf+0xdcc>
          flags &= ~FLAGS_HASH;   // no hash for dec format
    18c2:	fef87e93          	andi	t4,a6,-17
        if ((*format != 'i') && (*format != 'd')) {
    18c6:	06900f13          	li	t5,105
          flags &= ~FLAGS_HASH;   // no hash for dec format
    18ca:	8fc2                	mv	t6,a6
    18cc:	000e869b          	sext.w	a3,t4
        if (flags & FLAGS_PRECISION) {
    18d0:	40087813          	andi	a6,a6,1024
        if ((*format != 'i') && (*format != 'd')) {
    18d4:	35e51de3          	bne	a0,t5,242e <_vsnprintf+0xe0c>
        if (flags & FLAGS_PRECISION) {
    18d8:	28081ce3          	bnez	a6,2370 <_vsnprintf+0xd4e>
          if (flags & FLAGS_LONG_LONG) {
    18dc:	200ffd13          	andi	s10,t6,512
    18e0:	43a9                	li	t2,10
    18e2:	240d17e3          	bnez	s10,2330 <_vsnprintf+0xd0e>
          else if (flags & FLAGS_LONG) {
    18e6:	1006f793          	andi	a5,a3,256
    18ea:	8636                	mv	a2,a3
    18ec:	2e0791e3          	bnez	a5,23ce <_vsnprintf+0xdac>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    18f0:	0406f713          	andi	a4,a3,64
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    18f4:	000c2083          	lw	ra,0(s8)
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    18f8:	280711e3          	bnez	a4,237a <_vsnprintf+0xd58>
    18fc:	08067593          	andi	a1,a2,128
    1900:	300582e3          	beqz	a1,2404 <_vsnprintf+0xde2>
    1904:	0100929b          	slliw	t0,ra,0x10
    1908:	4102d09b          	sraiw	ra,t0,0x10
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    190c:	40f0de1b          	sraiw	t3,ra,0xf
    1910:	01c0cdb3          	xor	s11,ra,t3
    1914:	41cd8ebb          	subw	t4,s11,t3
    1918:	030e9513          	slli	a0,t4,0x30
    191c:	03055713          	srli	a4,a0,0x30
    1920:	8622                	mv	a2,s0
    1922:	e436                	sd	a3,8(sp)
    1924:	e05a                	sd	s6,0(sp)
    1926:	881e                	mv	a6,t2
    1928:	01f0d79b          	srliw	a5,ra,0x1f
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    192c:	86a6                	mv	a3,s1
    192e:	85ca                	mv	a1,s2
    1930:	854e                	mv	a0,s3
    1932:	b2bfe0ef          	jal	ra,45c <_ntoa_long>
    1936:	842a                	mv	s0,a0
        break;
    1938:	8c66                	mv	s8,s9
    193a:	b389                	j	167c <_vsnprintf+0x5a>
        if (*format == 'l') {
    193c:	0012c503          	lbu	a0,1(t0)
    1940:	06c00613          	li	a2,108
    1944:	dec518e3          	bne	a0,a2,1734 <_vsnprintf+0x112>
          flags |= FLAGS_LONG_LONG;
    1948:	30086813          	ori	a6,a6,768
    switch (*format) {
    194c:	0022c503          	lbu	a0,2(t0)
          flags |= FLAGS_LONG_LONG;
    1950:	2801                	sext.w	a6,a6
        format++;
    1952:	00328b93          	addi	s7,t0,3
    1956:	b3e5                	j	173e <_vsnprintf+0x11c>
        if (*format == 'h') {
    1958:	0012c503          	lbu	a0,1(t0)
    195c:	06800713          	li	a4,104
    1960:	6ae50263          	beq	a0,a4,2004 <_vsnprintf+0x9e2>
        flags |= FLAGS_SHORT;
    1964:	08086393          	ori	t2,a6,128
    1968:	0003881b          	sext.w	a6,t2
        format++;
    196c:	0b85                	addi	s7,s7,1
    196e:	bbc1                	j	173e <_vsnprintf+0x11c>
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
    1970:	04600c93          	li	s9,70
    1974:	45950663          	beq	a0,s9,1dc0 <_vsnprintf+0x79e>
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    1978:	000c3507          	fld	fa0,0(s8)
    197c:	8622                	mv	a2,s0
    197e:	87da                	mv	a5,s6
    1980:	8746                	mv	a4,a7
    1982:	86a6                	mv	a3,s1
    1984:	85ca                	mv	a1,s2
    1986:	854e                	mv	a0,s3
    1988:	932ff0ef          	jal	ra,aba <_ftoa>
    198c:	0c21                	addi	s8,s8,8
    198e:	842a                	mv	s0,a0
        break;
    1990:	b1f5                	j	167c <_vsnprintf+0x5a>
        out('%', buffer, idx++, maxlen);
    1992:	8622                	mv	a2,s0
    1994:	86a6                	mv	a3,s1
    1996:	85ca                	mv	a1,s2
    1998:	02500513          	li	a0,37
    199c:	0405                	addi	s0,s0,1
    199e:	9982                	jalr	s3
        break;
    19a0:	b9f1                	j	167c <_vsnprintf+0x5a>
        const char* p = va_arg(va, char*);
    19a2:	000c3d83          	ld	s11,0(s8)
    19a6:	0c21                	addi	s8,s8,8
    19a8:	f862                	sd	s8,48(sp)
  for (s = str; *s && maxsize--; ++s);
    19aa:	000dc503          	lbu	a0,0(s11)
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
    19ae:	3c089963          	bnez	a7,1d80 <_vsnprintf+0x75e>
  for (s = str; *s && maxsize--; ++s);
    19b2:	5f79                	li	t5,-2
    19b4:	260500e3          	beqz	a0,2414 <_vsnprintf+0xdf2>
    19b8:	001f0f93          	addi	t6,t5,1
    19bc:	007ff793          	andi	a5,t6,7
    19c0:	01fd82b3          	add	t0,s11,t6
    19c4:	8d6e                	mv	s10,s11
    19c6:	c3bd                	beqz	a5,1a2c <_vsnprintf+0x40a>
    19c8:	4605                	li	a2,1
    19ca:	04c78a63          	beq	a5,a2,1a1e <_vsnprintf+0x3fc>
    19ce:	4709                	li	a4,2
    19d0:	04e78263          	beq	a5,a4,1a14 <_vsnprintf+0x3f2>
    19d4:	438d                	li	t2,3
    19d6:	02778a63          	beq	a5,t2,1a0a <_vsnprintf+0x3e8>
    19da:	4691                	li	a3,4
    19dc:	02d78263          	beq	a5,a3,1a00 <_vsnprintf+0x3de>
    19e0:	4095                	li	ra,5
    19e2:	00178a63          	beq	a5,ra,19f6 <_vsnprintf+0x3d4>
    19e6:	4599                	li	a1,6
    19e8:	18b79ee3          	bne	a5,a1,2384 <_vsnprintf+0xd62>
    19ec:	001d4c83          	lbu	s9,1(s10)
    19f0:	0d05                	addi	s10,s10,1
    19f2:	080c8863          	beqz	s9,1a82 <_vsnprintf+0x460>
    19f6:	001d4c03          	lbu	s8,1(s10)
    19fa:	0d05                	addi	s10,s10,1
    19fc:	080c0363          	beqz	s8,1a82 <_vsnprintf+0x460>
    1a00:	001d4e03          	lbu	t3,1(s10)
    1a04:	0d05                	addi	s10,s10,1
    1a06:	060e0e63          	beqz	t3,1a82 <_vsnprintf+0x460>
    1a0a:	001d4e83          	lbu	t4,1(s10)
    1a0e:	0d05                	addi	s10,s10,1
    1a10:	060e8963          	beqz	t4,1a82 <_vsnprintf+0x460>
    1a14:	001d4f03          	lbu	t5,1(s10)
    1a18:	0d05                	addi	s10,s10,1
    1a1a:	060f0463          	beqz	t5,1a82 <_vsnprintf+0x460>
    1a1e:	001d4f83          	lbu	t6,1(s10)
    1a22:	0d05                	addi	s10,s10,1
    1a24:	040f8f63          	beqz	t6,1a82 <_vsnprintf+0x460>
    1a28:	045d0d63          	beq	s10,t0,1a82 <_vsnprintf+0x460>
    1a2c:	001d4783          	lbu	a5,1(s10)
    1a30:	0d05                	addi	s10,s10,1
    1a32:	876a                	mv	a4,s10
    1a34:	c7b9                	beqz	a5,1a82 <_vsnprintf+0x460>
    1a36:	001d4603          	lbu	a2,1(s10)
    1a3a:	0d05                	addi	s10,s10,1
    1a3c:	c239                	beqz	a2,1a82 <_vsnprintf+0x460>
    1a3e:	00274383          	lbu	t2,2(a4)
    1a42:	00270d13          	addi	s10,a4,2
    1a46:	02038e63          	beqz	t2,1a82 <_vsnprintf+0x460>
    1a4a:	00374683          	lbu	a3,3(a4)
    1a4e:	00370d13          	addi	s10,a4,3
    1a52:	ca85                	beqz	a3,1a82 <_vsnprintf+0x460>
    1a54:	00474083          	lbu	ra,4(a4)
    1a58:	00470d13          	addi	s10,a4,4
    1a5c:	02008363          	beqz	ra,1a82 <_vsnprintf+0x460>
    1a60:	00574583          	lbu	a1,5(a4)
    1a64:	00570d13          	addi	s10,a4,5
    1a68:	cd89                	beqz	a1,1a82 <_vsnprintf+0x460>
    1a6a:	00674303          	lbu	t1,6(a4)
    1a6e:	00670d13          	addi	s10,a4,6
    1a72:	00030863          	beqz	t1,1a82 <_vsnprintf+0x460>
    1a76:	00774c83          	lbu	s9,7(a4)
    1a7a:	00770d13          	addi	s10,a4,7
    1a7e:	fa0c95e3          	bnez	s9,1a28 <_vsnprintf+0x406>
  return (unsigned int)(s - str);
    1a82:	41bd0d3b          	subw	s10,s10,s11
        if (flags & FLAGS_PRECISION) {
    1a86:	40087c93          	andi	s9,a6,1024
    1a8a:	000c8863          	beqz	s9,1a9a <_vsnprintf+0x478>
          l = (l < precision ? l : precision);
    1a8e:	82c6                	mv	t0,a7
    1a90:	011d7363          	bgeu	s10,a7,1a96 <_vsnprintf+0x474>
    1a94:	82ea                	mv	t0,s10
    1a96:	00028d1b          	sext.w	s10,t0
        if (!(flags & FLAGS_LEFT)) {
    1a9a:	00287813          	andi	a6,a6,2
    1a9e:	f442                	sd	a6,40(sp)
    1aa0:	5e080063          	beqz	a6,2080 <_vsnprintf+0xa5e>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    1aa4:	3a050563          	beqz	a0,1e4e <_vsnprintf+0x82c>
    1aa8:	4e0c8563          	beqz	s9,1f92 <_vsnprintf+0x970>
    1aac:	02089f93          	slli	t6,a7,0x20
    1ab0:	020fd793          	srli	a5,t6,0x20
    1ab4:	00878633          	add	a2,a5,s0
    1ab8:	0037f713          	andi	a4,a5,3
    1abc:	f032                	sd	a2,32(sp)
  for (s = str; *s && maxsize--; ++s);
    1abe:	8c22                	mv	s8,s0
    1ac0:	38070063          	beqz	a4,1e40 <_vsnprintf+0x81e>
          out(*(p++), buffer, idx++, maxlen);
    1ac4:	86a6                	mv	a3,s1
    1ac6:	fc3a                	sd	a4,56(sp)
    1ac8:	8622                	mv	a2,s0
    1aca:	85ca                	mv	a1,s2
    1acc:	9982                	jalr	s3
    1ace:	00140c93          	addi	s9,s0,1
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    1ad2:	408c83b3          	sub	t2,s9,s0
    1ad6:	007d86b3          	add	a3,s11,t2
    1ada:	0006c503          	lbu	a0,0(a3)
    1ade:	c529                	beqz	a0,1b28 <_vsnprintf+0x506>
    1ae0:	75e2                	ld	a1,56(sp)
    1ae2:	4085                	li	ra,1
          out(*(p++), buffer, idx++, maxlen);
    1ae4:	8c66                	mv	s8,s9
    1ae6:	34158d63          	beq	a1,ra,1e40 <_vsnprintf+0x81e>
    1aea:	4889                	li	a7,2
    1aec:	03158063          	beq	a1,a7,1b0c <_vsnprintf+0x4ea>
    1af0:	8662                	mv	a2,s8
    1af2:	86a6                	mv	a3,s1
    1af4:	85ca                	mv	a1,s2
    1af6:	00240c93          	addi	s9,s0,2
    1afa:	9982                	jalr	s3
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    1afc:	408c8333          	sub	t1,s9,s0
    1b00:	006d8c33          	add	s8,s11,t1
    1b04:	000c4503          	lbu	a0,0(s8)
          out(*(p++), buffer, idx++, maxlen);
    1b08:	8c66                	mv	s8,s9
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    1b0a:	cd19                	beqz	a0,1b28 <_vsnprintf+0x506>
          out(*(p++), buffer, idx++, maxlen);
    1b0c:	8662                	mv	a2,s8
    1b0e:	86a6                	mv	a3,s1
    1b10:	85ca                	mv	a1,s2
    1b12:	9982                	jalr	s3
    1b14:	0c85                	addi	s9,s9,1
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    1b16:	408c82b3          	sub	t0,s9,s0
    1b1a:	005d8833          	add	a6,s11,t0
    1b1e:	00084503          	lbu	a0,0(a6)
          out(*(p++), buffer, idx++, maxlen);
    1b22:	8c66                	mv	s8,s9
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    1b24:	30051e63          	bnez	a0,1e40 <_vsnprintf+0x81e>
          out(*(p++), buffer, idx++, maxlen);
    1b28:	8466                	mv	s0,s9
        if (flags & FLAGS_LEFT) {
    1b2a:	7da2                	ld	s11,40(sp)
    1b2c:	320d9163          	bnez	s11,1e4e <_vsnprintf+0x82c>
        const char* p = va_arg(va, char*);
    1b30:	7c42                	ld	s8,48(sp)
        break;
    1b32:	b6a9                	j	167c <_vsnprintf+0x5a>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
    1b34:	000c3703          	ld	a4,0(s8)
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
    1b38:	02186e93          	ori	t4,a6,33
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
    1b3c:	000e8f1b          	sext.w	t5,t4
    1b40:	4fc1                	li	t6,16
    1b42:	8622                	mv	a2,s0
    1b44:	e47a                	sd	t5,8(sp)
    1b46:	e07e                	sd	t6,0(sp)
    1b48:	4841                	li	a6,16
    1b4a:	4781                	li	a5,0
    1b4c:	86a6                	mv	a3,s1
    1b4e:	85ca                	mv	a1,s2
    1b50:	854e                	mv	a0,s3
    1b52:	90bfe0ef          	jal	ra,45c <_ntoa_long>
    1b56:	0c21                	addi	s8,s8,8
    1b58:	842a                	mv	s0,a0
        break;
    1b5a:	b60d                	j	167c <_vsnprintf+0x5a>
      out(*format, buffer, idx++, maxlen);
    1b5c:	00140d13          	addi	s10,s0,1
        if (!(flags & FLAGS_LEFT)) {
    1b60:	00287793          	andi	a5,a6,2
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    1b64:	008c0c93          	addi	s9,s8,8
      out(*format, buffer, idx++, maxlen);
    1b68:	8dea                	mv	s11,s10
        if (!(flags & FLAGS_LEFT)) {
    1b6a:	68078163          	beqz	a5,21ec <_vsnprintf+0xbca>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    1b6e:	000c4503          	lbu	a0,0(s8)
    1b72:	86a6                	mv	a3,s1
    1b74:	8622                	mv	a2,s0
    1b76:	85ca                	mv	a1,s2
    1b78:	9982                	jalr	s3
          while (l++ < width) {
    1b7a:	4705                	li	a4,1
    1b7c:	01677fe3          	bgeu	a4,s6,239a <_vsnprintf+0xd78>
    1b80:	ffeb061b          	addiw	a2,s6,-2
    1b84:	02061b13          	slli	s6,a2,0x20
    1b88:	00240393          	addi	t2,s0,2
    1b8c:	020b5693          	srli	a3,s6,0x20
    1b90:	00d38433          	add	s0,t2,a3
    1b94:	41b400b3          	sub	ra,s0,s11
    1b98:	0070f593          	andi	a1,ra,7
    1b9c:	c5c9                	beqz	a1,1c26 <_vsnprintf+0x604>
    1b9e:	06e58b63          	beq	a1,a4,1c14 <_vsnprintf+0x5f2>
    1ba2:	4889                	li	a7,2
    1ba4:	07158163          	beq	a1,a7,1c06 <_vsnprintf+0x5e4>
    1ba8:	430d                	li	t1,3
    1baa:	04658763          	beq	a1,t1,1bf8 <_vsnprintf+0x5d6>
    1bae:	4291                	li	t0,4
    1bb0:	02558d63          	beq	a1,t0,1bea <_vsnprintf+0x5c8>
    1bb4:	4815                	li	a6,5
    1bb6:	03058363          	beq	a1,a6,1bdc <_vsnprintf+0x5ba>
    1bba:	4e19                	li	t3,6
    1bbc:	01c58963          	beq	a1,t3,1bce <_vsnprintf+0x5ac>
            out(' ', buffer, idx++, maxlen);
    1bc0:	86a6                	mv	a3,s1
    1bc2:	866a                	mv	a2,s10
    1bc4:	85ca                	mv	a1,s2
    1bc6:	02000513          	li	a0,32
    1bca:	0d85                	addi	s11,s11,1
    1bcc:	9982                	jalr	s3
    1bce:	866e                	mv	a2,s11
    1bd0:	86a6                	mv	a3,s1
    1bd2:	85ca                	mv	a1,s2
    1bd4:	02000513          	li	a0,32
    1bd8:	0d85                	addi	s11,s11,1
    1bda:	9982                	jalr	s3
    1bdc:	866e                	mv	a2,s11
    1bde:	86a6                	mv	a3,s1
    1be0:	85ca                	mv	a1,s2
    1be2:	02000513          	li	a0,32
    1be6:	0d85                	addi	s11,s11,1
    1be8:	9982                	jalr	s3
    1bea:	866e                	mv	a2,s11
    1bec:	86a6                	mv	a3,s1
    1bee:	85ca                	mv	a1,s2
    1bf0:	02000513          	li	a0,32
    1bf4:	0d85                	addi	s11,s11,1
    1bf6:	9982                	jalr	s3
    1bf8:	866e                	mv	a2,s11
    1bfa:	86a6                	mv	a3,s1
    1bfc:	85ca                	mv	a1,s2
    1bfe:	02000513          	li	a0,32
    1c02:	0d85                	addi	s11,s11,1
    1c04:	9982                	jalr	s3
    1c06:	866e                	mv	a2,s11
    1c08:	86a6                	mv	a3,s1
    1c0a:	85ca                	mv	a1,s2
    1c0c:	02000513          	li	a0,32
    1c10:	0d85                	addi	s11,s11,1
    1c12:	9982                	jalr	s3
    1c14:	866e                	mv	a2,s11
    1c16:	86a6                	mv	a3,s1
    1c18:	0d85                	addi	s11,s11,1
    1c1a:	85ca                	mv	a1,s2
    1c1c:	02000513          	li	a0,32
    1c20:	9982                	jalr	s3
          while (l++ < width) {
    1c22:	d08d8be3          	beq	s11,s0,1938 <_vsnprintf+0x316>
            out(' ', buffer, idx++, maxlen);
    1c26:	866e                	mv	a2,s11
    1c28:	86a6                	mv	a3,s1
    1c2a:	85ca                	mv	a1,s2
    1c2c:	02000513          	li	a0,32
    1c30:	9982                	jalr	s3
    1c32:	001d8613          	addi	a2,s11,1
    1c36:	86a6                	mv	a3,s1
    1c38:	85ca                	mv	a1,s2
    1c3a:	02000513          	li	a0,32
    1c3e:	9982                	jalr	s3
    1c40:	002d8613          	addi	a2,s11,2
    1c44:	86a6                	mv	a3,s1
    1c46:	85ca                	mv	a1,s2
    1c48:	02000513          	li	a0,32
    1c4c:	9982                	jalr	s3
    1c4e:	003d8613          	addi	a2,s11,3
    1c52:	86a6                	mv	a3,s1
    1c54:	85ca                	mv	a1,s2
    1c56:	02000513          	li	a0,32
    1c5a:	9982                	jalr	s3
    1c5c:	004d8613          	addi	a2,s11,4
    1c60:	86a6                	mv	a3,s1
    1c62:	85ca                	mv	a1,s2
    1c64:	02000513          	li	a0,32
    1c68:	9982                	jalr	s3
    1c6a:	005d8613          	addi	a2,s11,5
    1c6e:	86a6                	mv	a3,s1
    1c70:	85ca                	mv	a1,s2
    1c72:	02000513          	li	a0,32
    1c76:	9982                	jalr	s3
    1c78:	006d8613          	addi	a2,s11,6
    1c7c:	86a6                	mv	a3,s1
    1c7e:	85ca                	mv	a1,s2
    1c80:	02000513          	li	a0,32
    1c84:	9982                	jalr	s3
    1c86:	007d8613          	addi	a2,s11,7
    1c8a:	86a6                	mv	a3,s1
    1c8c:	0da1                	addi	s11,s11,8
    1c8e:	85ca                	mv	a1,s2
    1c90:	02000513          	li	a0,32
    1c94:	9982                	jalr	s3
          while (l++ < width) {
    1c96:	f88d98e3          	bne	s11,s0,1c26 <_vsnprintf+0x604>
    1c9a:	b979                	j	1938 <_vsnprintf+0x316>
  while (*format)
    1c9c:	000bc503          	lbu	a0,0(s7)
    out = _out_null;
    1ca0:	05800993          	li	s3,88
  while (*format)
    1ca4:	4401                	li	s0,0
    1ca6:	9a0518e3          	bnez	a0,1656 <_vsnprintf+0x34>
    1caa:	4a81                	li	s5,0
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    1cac:	b69468e3          	bltu	s0,s1,181c <_vsnprintf+0x1fa>
    1cb0:	b6a5                	j	1818 <_vsnprintf+0x1f6>
  while (_is_digit(**str)) {
    1cb2:	4325                	li	t1,9
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    1cb4:	0028961b          	slliw	a2,a7,0x2
    1cb8:	0116073b          	addw	a4,a2,a7
    1cbc:	85de                	mv	a1,s7
    1cbe:	0017139b          	slliw	t2,a4,0x1
    1cc2:	0b85                	addi	s7,s7,1
    1cc4:	00a388bb          	addw	a7,t2,a0
  while (_is_digit(**str)) {
    1cc8:	000bc503          	lbu	a0,0(s7)
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    1ccc:	8cde                	mv	s9,s7
    1cce:	fd08889b          	addiw	a7,a7,-48
  return (ch >= '0') && (ch <= '9');
    1cd2:	fd05069b          	addiw	a3,a0,-48
  while (_is_digit(**str)) {
    1cd6:	0ff6f093          	zext.b	ra,a3
    1cda:	08136063          	bltu	t1,ra,1d5a <_vsnprintf+0x738>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    1cde:	0028959b          	slliw	a1,a7,0x2
    1ce2:	01158d3b          	addw	s10,a1,a7
    1ce6:	001d1d9b          	slliw	s11,s10,0x1
    1cea:	85de                	mv	a1,s7
    1cec:	0b85                	addi	s7,s7,1
    1cee:	00ad8e3b          	addw	t3,s11,a0
  while (_is_digit(**str)) {
    1cf2:	000bc503          	lbu	a0,0(s7)
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    1cf6:	fd0e089b          	addiw	a7,t3,-48
  return (ch >= '0') && (ch <= '9');
    1cfa:	fd050e9b          	addiw	t4,a0,-48
  while (_is_digit(**str)) {
    1cfe:	0ffeff13          	zext.b	t5,t4
    1d02:	05e36c63          	bltu	t1,t5,1d5a <_vsnprintf+0x738>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    1d06:	00289f9b          	slliw	t6,a7,0x2
    1d0a:	011f87bb          	addw	a5,t6,a7
    1d0e:	0017929b          	slliw	t0,a5,0x1
    1d12:	00a2863b          	addw	a2,t0,a0
  while (_is_digit(**str)) {
    1d16:	002cc503          	lbu	a0,2(s9)
    1d1a:	85de                	mv	a1,s7
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    1d1c:	fd06089b          	addiw	a7,a2,-48
  return (ch >= '0') && (ch <= '9');
    1d20:	fd050b9b          	addiw	s7,a0,-48
  while (_is_digit(**str)) {
    1d24:	0ffbf713          	zext.b	a4,s7
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    1d28:	002c8b93          	addi	s7,s9,2
  while (_is_digit(**str)) {
    1d2c:	02e36763          	bltu	t1,a4,1d5a <_vsnprintf+0x738>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    1d30:	0028939b          	slliw	t2,a7,0x2
    1d34:	011388bb          	addw	a7,t2,a7
    1d38:	0018969b          	slliw	a3,a7,0x1
    1d3c:	00a680bb          	addw	ra,a3,a0
  while (_is_digit(**str)) {
    1d40:	003cc503          	lbu	a0,3(s9)
    1d44:	85de                	mv	a1,s7
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    1d46:	fd00889b          	addiw	a7,ra,-48
  return (ch >= '0') && (ch <= '9');
    1d4a:	fd050d1b          	addiw	s10,a0,-48
  while (_is_digit(**str)) {
    1d4e:	0ffd7d93          	zext.b	s11,s10
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    1d52:	003c8b93          	addi	s7,s9,3
  while (_is_digit(**str)) {
    1d56:	f5b37fe3          	bgeu	t1,s11,1cb4 <_vsnprintf+0x692>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    1d5a:	82de                	mv	t0,s7
        format++;
    1d5c:	00258b93          	addi	s7,a1,2
    1d60:	baa5                	j	16d8 <_vsnprintf+0xb6>
        precision = prec > 0 ? (unsigned int)prec : 0U;
    1d62:	000c2f03          	lw	t5,0(s8)
    switch (*format) {
    1d66:	0022c503          	lbu	a0,2(t0)
        format++;
    1d6a:	00328b93          	addi	s7,t0,3
    1d6e:	ffff4f93          	not	t6,t5
    1d72:	43ffd793          	srai	a5,t6,0x3f
    1d76:	00ff78b3          	and	a7,t5,a5
        const int prec = (int)va_arg(va, int);
    1d7a:	0c21                	addi	s8,s8,8
        format++;
    1d7c:	0289                	addi	t0,t0,2
    1d7e:	baa9                	j	16d8 <_vsnprintf+0xb6>
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
    1d80:	02089e13          	slli	t3,a7,0x20
    1d84:	020e5e93          	srli	t4,t3,0x20
  for (s = str; *s && maxsize--; ++s);
    1d88:	68050663          	beqz	a0,2414 <_vsnprintf+0xdf2>
    1d8c:	fffe8f13          	addi	t5,t4,-1
    1d90:	b125                	j	19b8 <_vsnprintf+0x396>
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
    1d92:	0df57793          	andi	a5,a0,223
    1d96:	04700613          	li	a2,71
    1d9a:	1cc78b63          	beq	a5,a2,1f70 <_vsnprintf+0x94e>
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
    1d9e:	04500093          	li	ra,69
    1da2:	1e150363          	beq	a0,ra,1f88 <_vsnprintf+0x966>
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    1da6:	000c3507          	fld	fa0,0(s8)
    1daa:	8622                	mv	a2,s0
    1dac:	87da                	mv	a5,s6
    1dae:	8746                	mv	a4,a7
    1db0:	86a6                	mv	a3,s1
    1db2:	85ca                	mv	a1,s2
    1db4:	854e                	mv	a0,s3
    1db6:	c80ff0ef          	jal	ra,1236 <_etoa>
    1dba:	0c21                	addi	s8,s8,8
    1dbc:	842a                	mv	s0,a0
        break;
    1dbe:	b87d                	j	167c <_vsnprintf+0x5a>
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
    1dc0:	02086393          	ori	t2,a6,32
    1dc4:	0003881b          	sext.w	a6,t2
    1dc8:	be45                	j	1978 <_vsnprintf+0x356>
          out(*(p++), buffer, idx++, maxlen);
    1dca:	86a6                	mv	a3,s1
    1dcc:	8662                	mv	a2,s8
    1dce:	85ca                	mv	a1,s2
    1dd0:	9982                	jalr	s3
    1dd2:	001c0c93          	addi	s9,s8,1
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    1dd6:	408c8533          	sub	a0,s9,s0
    1dda:	00ad8eb3          	add	t4,s11,a0
    1dde:	000ec503          	lbu	a0,0(t4)
    1de2:	d40503e3          	beqz	a0,1b28 <_vsnprintf+0x506>
          out(*(p++), buffer, idx++, maxlen);
    1de6:	8666                	mv	a2,s9
    1de8:	86a6                	mv	a3,s1
    1dea:	85ca                	mv	a1,s2
    1dec:	9982                	jalr	s3
    1dee:	002c0c93          	addi	s9,s8,2
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    1df2:	408c8f33          	sub	t5,s9,s0
    1df6:	01ed8fb3          	add	t6,s11,t5
    1dfa:	000fc503          	lbu	a0,0(t6)
    1dfe:	d20505e3          	beqz	a0,1b28 <_vsnprintf+0x506>
          out(*(p++), buffer, idx++, maxlen);
    1e02:	86a6                	mv	a3,s1
    1e04:	002c0613          	addi	a2,s8,2
    1e08:	85ca                	mv	a1,s2
    1e0a:	9982                	jalr	s3
    1e0c:	003c0c93          	addi	s9,s8,3
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    1e10:	408c87b3          	sub	a5,s9,s0
    1e14:	00fd8733          	add	a4,s11,a5
    1e18:	00074503          	lbu	a0,0(a4)
    1e1c:	d00506e3          	beqz	a0,1b28 <_vsnprintf+0x506>
          out(*(p++), buffer, idx++, maxlen);
    1e20:	003c0613          	addi	a2,s8,3
    1e24:	86a6                	mv	a3,s1
    1e26:	85ca                	mv	a1,s2
    1e28:	9982                	jalr	s3
    1e2a:	004c0c93          	addi	s9,s8,4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    1e2e:	408c8633          	sub	a2,s9,s0
    1e32:	00cd83b3          	add	t2,s11,a2
    1e36:	0003c503          	lbu	a0,0(t2)
    1e3a:	ce0507e3          	beqz	a0,1b28 <_vsnprintf+0x506>
          out(*(p++), buffer, idx++, maxlen);
    1e3e:	8c66                	mv	s8,s9
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    1e40:	7e02                	ld	t3,32(sp)
    1e42:	f98e14e3          	bne	t3,s8,1dca <_vsnprintf+0x7a8>
        if (flags & FLAGS_LEFT) {
    1e46:	7da2                	ld	s11,40(sp)
    1e48:	8472                	mv	s0,t3
    1e4a:	ce0d83e3          	beqz	s11,1b30 <_vsnprintf+0x50e>
    1e4e:	8c22                	mv	s8,s0
          while (l++ < width) {
    1e50:	cf6d70e3          	bgeu	s10,s6,1b30 <_vsnprintf+0x50e>
    1e54:	3b7d                	addiw	s6,s6,-1
    1e56:	41ab0d3b          	subw	s10,s6,s10
    1e5a:	020d1c93          	slli	s9,s10,0x20
    1e5e:	020cd693          	srli	a3,s9,0x20
    1e62:	0405                	addi	s0,s0,1
    1e64:	9436                	add	s0,s0,a3
    1e66:	418400b3          	sub	ra,s0,s8
    1e6a:	0070f593          	andi	a1,ra,7
    1e6e:	c5d1                	beqz	a1,1efa <_vsnprintf+0x8d8>
    1e70:	4885                	li	a7,1
    1e72:	07158b63          	beq	a1,a7,1ee8 <_vsnprintf+0x8c6>
    1e76:	4309                	li	t1,2
    1e78:	06658163          	beq	a1,t1,1eda <_vsnprintf+0x8b8>
    1e7c:	428d                	li	t0,3
    1e7e:	04558763          	beq	a1,t0,1ecc <_vsnprintf+0x8aa>
    1e82:	4811                	li	a6,4
    1e84:	03058d63          	beq	a1,a6,1ebe <_vsnprintf+0x89c>
    1e88:	4e15                	li	t3,5
    1e8a:	03c58363          	beq	a1,t3,1eb0 <_vsnprintf+0x88e>
    1e8e:	4519                	li	a0,6
    1e90:	00a58963          	beq	a1,a0,1ea2 <_vsnprintf+0x880>
            out(' ', buffer, idx++, maxlen);
    1e94:	8662                	mv	a2,s8
    1e96:	86a6                	mv	a3,s1
    1e98:	85ca                	mv	a1,s2
    1e9a:	02000513          	li	a0,32
    1e9e:	0c05                	addi	s8,s8,1
    1ea0:	9982                	jalr	s3
    1ea2:	8662                	mv	a2,s8
    1ea4:	86a6                	mv	a3,s1
    1ea6:	85ca                	mv	a1,s2
    1ea8:	02000513          	li	a0,32
    1eac:	0c05                	addi	s8,s8,1
    1eae:	9982                	jalr	s3
    1eb0:	8662                	mv	a2,s8
    1eb2:	86a6                	mv	a3,s1
    1eb4:	85ca                	mv	a1,s2
    1eb6:	02000513          	li	a0,32
    1eba:	0c05                	addi	s8,s8,1
    1ebc:	9982                	jalr	s3
    1ebe:	8662                	mv	a2,s8
    1ec0:	86a6                	mv	a3,s1
    1ec2:	85ca                	mv	a1,s2
    1ec4:	02000513          	li	a0,32
    1ec8:	0c05                	addi	s8,s8,1
    1eca:	9982                	jalr	s3
    1ecc:	8662                	mv	a2,s8
    1ece:	86a6                	mv	a3,s1
    1ed0:	85ca                	mv	a1,s2
    1ed2:	02000513          	li	a0,32
    1ed6:	0c05                	addi	s8,s8,1
    1ed8:	9982                	jalr	s3
    1eda:	8662                	mv	a2,s8
    1edc:	86a6                	mv	a3,s1
    1ede:	85ca                	mv	a1,s2
    1ee0:	02000513          	li	a0,32
    1ee4:	0c05                	addi	s8,s8,1
    1ee6:	9982                	jalr	s3
    1ee8:	8662                	mv	a2,s8
    1eea:	86a6                	mv	a3,s1
    1eec:	0c05                	addi	s8,s8,1
    1eee:	85ca                	mv	a1,s2
    1ef0:	02000513          	li	a0,32
    1ef4:	9982                	jalr	s3
          while (l++ < width) {
    1ef6:	c28c0de3          	beq	s8,s0,1b30 <_vsnprintf+0x50e>
            out(' ', buffer, idx++, maxlen);
    1efa:	8662                	mv	a2,s8
    1efc:	86a6                	mv	a3,s1
    1efe:	85ca                	mv	a1,s2
    1f00:	02000513          	li	a0,32
    1f04:	9982                	jalr	s3
    1f06:	001c0613          	addi	a2,s8,1
    1f0a:	86a6                	mv	a3,s1
    1f0c:	85ca                	mv	a1,s2
    1f0e:	02000513          	li	a0,32
    1f12:	9982                	jalr	s3
    1f14:	002c0613          	addi	a2,s8,2
    1f18:	86a6                	mv	a3,s1
    1f1a:	85ca                	mv	a1,s2
    1f1c:	02000513          	li	a0,32
    1f20:	9982                	jalr	s3
    1f22:	003c0613          	addi	a2,s8,3
    1f26:	86a6                	mv	a3,s1
    1f28:	85ca                	mv	a1,s2
    1f2a:	02000513          	li	a0,32
    1f2e:	9982                	jalr	s3
    1f30:	004c0613          	addi	a2,s8,4
    1f34:	86a6                	mv	a3,s1
    1f36:	85ca                	mv	a1,s2
    1f38:	02000513          	li	a0,32
    1f3c:	9982                	jalr	s3
    1f3e:	005c0613          	addi	a2,s8,5
    1f42:	86a6                	mv	a3,s1
    1f44:	85ca                	mv	a1,s2
    1f46:	02000513          	li	a0,32
    1f4a:	9982                	jalr	s3
    1f4c:	006c0613          	addi	a2,s8,6
    1f50:	86a6                	mv	a3,s1
    1f52:	85ca                	mv	a1,s2
    1f54:	02000513          	li	a0,32
    1f58:	9982                	jalr	s3
    1f5a:	007c0613          	addi	a2,s8,7
    1f5e:	86a6                	mv	a3,s1
    1f60:	0c21                	addi	s8,s8,8
    1f62:	85ca                	mv	a1,s2
    1f64:	02000513          	li	a0,32
    1f68:	9982                	jalr	s3
          while (l++ < width) {
    1f6a:	f88c18e3          	bne	s8,s0,1efa <_vsnprintf+0x8d8>
    1f6e:	b6c9                	j	1b30 <_vsnprintf+0x50e>
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
    1f70:	6585                	lui	a1,0x1
    1f72:	80058d13          	addi	s10,a1,-2048 # 800 <_ntoa_long+0x3a4>
    1f76:	01a86833          	or	a6,a6,s10
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
    1f7a:	0fd57313          	andi	t1,a0,253
    1f7e:	04500293          	li	t0,69
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
    1f82:	2801                	sext.w	a6,a6
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
    1f84:	e25311e3          	bne	t1,t0,1da6 <_vsnprintf+0x784>
    1f88:	02086e13          	ori	t3,a6,32
    1f8c:	000e081b          	sext.w	a6,t3
    1f90:	bd19                	j	1da6 <_vsnprintf+0x784>
          out(*(p++), buffer, idx++, maxlen);
    1f92:	8ca2                	mv	s9,s0
    1f94:	8666                	mv	a2,s9
    1f96:	86a6                	mv	a3,s1
    1f98:	85ca                	mv	a1,s2
    1f9a:	9982                	jalr	s3
    1f9c:	0c85                	addi	s9,s9,1
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    1f9e:	408c88b3          	sub	a7,s9,s0
    1fa2:	011d8333          	add	t1,s11,a7
    1fa6:	00034503          	lbu	a0,0(t1)
          out(*(p++), buffer, idx++, maxlen);
    1faa:	8c66                	mv	s8,s9
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    1fac:	b6050ee3          	beqz	a0,1b28 <_vsnprintf+0x506>
          out(*(p++), buffer, idx++, maxlen);
    1fb0:	86a6                	mv	a3,s1
    1fb2:	8662                	mv	a2,s8
    1fb4:	85ca                	mv	a1,s2
    1fb6:	9982                	jalr	s3
    1fb8:	0c85                	addi	s9,s9,1
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    1fba:	408c82b3          	sub	t0,s9,s0
    1fbe:	005d8833          	add	a6,s11,t0
    1fc2:	00084503          	lbu	a0,0(a6)
    1fc6:	b60501e3          	beqz	a0,1b28 <_vsnprintf+0x506>
          out(*(p++), buffer, idx++, maxlen);
    1fca:	8666                	mv	a2,s9
    1fcc:	86a6                	mv	a3,s1
    1fce:	85ca                	mv	a1,s2
    1fd0:	9982                	jalr	s3
    1fd2:	002c0c93          	addi	s9,s8,2
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    1fd6:	408c8533          	sub	a0,s9,s0
    1fda:	00ad8e33          	add	t3,s11,a0
    1fde:	000e4503          	lbu	a0,0(t3)
    1fe2:	b40503e3          	beqz	a0,1b28 <_vsnprintf+0x506>
          out(*(p++), buffer, idx++, maxlen);
    1fe6:	8666                	mv	a2,s9
    1fe8:	86a6                	mv	a3,s1
    1fea:	85ca                	mv	a1,s2
    1fec:	9982                	jalr	s3
    1fee:	003c0c93          	addi	s9,s8,3
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    1ff2:	408c8eb3          	sub	t4,s9,s0
    1ff6:	01dd8f33          	add	t5,s11,t4
    1ffa:	000f4503          	lbu	a0,0(t5)
    1ffe:	f959                	bnez	a0,1f94 <_vsnprintf+0x972>
          out(*(p++), buffer, idx++, maxlen);
    2000:	8466                	mv	s0,s9
    2002:	b625                	j	1b2a <_vsnprintf+0x508>
          flags |= FLAGS_CHAR;
    2004:	0c086b93          	ori	s7,a6,192
    2008:	000b881b          	sext.w	a6,s7
    switch (*format) {
    200c:	0022c503          	lbu	a0,2(t0)
        format++;
    2010:	00328b93          	addi	s7,t0,3
    2014:	f2aff06f          	j	173e <_vsnprintf+0x11c>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    2018:	ff387713          	andi	a4,a6,-13
    201c:	0007009b          	sext.w	ra,a4
        if (flags & FLAGS_PRECISION) {
    2020:	40087593          	andi	a1,a6,1024
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    2024:	0200e693          	ori	a3,ra,32
        if (flags & FLAGS_PRECISION) {
    2028:	43c1                	li	t2,16
    202a:	34058563          	beqz	a1,2374 <_vsnprintf+0xd52>
          flags &= ~FLAGS_ZEROPAD;
    202e:	ffe6fe13          	andi	t3,a3,-2
    2032:	000e069b          	sext.w	a3,t3
        if ((*format == 'i') || (*format == 'd')) {
    2036:	06900d93          	li	s11,105
          if (flags & FLAGS_LONG_LONG) {
    203a:	2006fd13          	andi	s10,a3,512
        if ((*format == 'i') || (*format == 'd')) {
    203e:	8bb502e3          	beq	a0,s11,18e2 <_vsnprintf+0x2c0>
    2042:	06400e93          	li	t4,100
    2046:	89d50ee3          	beq	a0,t4,18e2 <_vsnprintf+0x2c0>
          if (flags & FLAGS_LONG_LONG) {
    204a:	360d1a63          	bnez	s10,23be <_vsnprintf+0xd9c>
          else if (flags & FLAGS_LONG) {
    204e:	1006f513          	andi	a0,a3,256
    2052:	8f36                	mv	t5,a3
    2054:	38051f63          	bnez	a0,23f2 <_vsnprintf+0xdd0>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    2058:	0406ff93          	andi	t6,a3,64
    205c:	320f9c63          	bnez	t6,2394 <_vsnprintf+0xd72>
    2060:	080f7813          	andi	a6,t5,128
    2064:	3a080b63          	beqz	a6,241a <_vsnprintf+0xdf8>
    2068:	000c5c03          	lhu	s8,0(s8)
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    206c:	8622                	mv	a2,s0
    206e:	020c1413          	slli	s0,s8,0x20
    2072:	e436                	sd	a3,8(sp)
    2074:	e05a                	sd	s6,0(sp)
    2076:	881e                	mv	a6,t2
    2078:	4781                	li	a5,0
    207a:	02045713          	srli	a4,s0,0x20
    207e:	b07d                	j	192c <_vsnprintf+0x30a>
          while (l++ < width) {
    2080:	001d0c1b          	addiw	s8,s10,1
    2084:	3b6d7163          	bgeu	s10,s6,2426 <_vsnprintf+0xe04>
    2088:	fffb051b          	addiw	a0,s6,-1
    208c:	41a50e3b          	subw	t3,a0,s10
    2090:	020e1e93          	slli	t4,t3,0x20
    2094:	020edf13          	srli	t5,t4,0x20
    2098:	00140d13          	addi	s10,s0,1
    209c:	007f7f93          	andi	t6,t5,7
    20a0:	01af0c33          	add	s8,t5,s10
    20a4:	120f8063          	beqz	t6,21c4 <_vsnprintf+0xba2>
    20a8:	f046                	sd	a7,32(sp)
            out(' ', buffer, idx++, maxlen);
    20aa:	8622                	mv	a2,s0
    20ac:	fc7e                	sd	t6,56(sp)
    20ae:	86a6                	mv	a3,s1
    20b0:	85ca                	mv	a1,s2
    20b2:	02000513          	li	a0,32
    20b6:	9982                	jalr	s3
    20b8:	7762                	ld	a4,56(sp)
    20ba:	4785                	li	a5,1
    20bc:	846a                	mv	s0,s10
          while (l++ < width) {
    20be:	7882                	ld	a7,32(sp)
    20c0:	0d05                	addi	s10,s10,1
    20c2:	10f70163          	beq	a4,a5,21c4 <_vsnprintf+0xba2>
    20c6:	4609                	li	a2,2
    20c8:	06c70f63          	beq	a4,a2,2146 <_vsnprintf+0xb24>
    20cc:	438d                	li	t2,3
    20ce:	06770263          	beq	a4,t2,2132 <_vsnprintf+0xb10>
    20d2:	4691                	li	a3,4
    20d4:	04d70563          	beq	a4,a3,211e <_vsnprintf+0xafc>
    20d8:	4095                	li	ra,5
    20da:	02170863          	beq	a4,ra,210a <_vsnprintf+0xae8>
    20de:	4599                	li	a1,6
    20e0:	00b70b63          	beq	a4,a1,20f6 <_vsnprintf+0xad4>
            out(' ', buffer, idx++, maxlen);
    20e4:	8622                	mv	a2,s0
    20e6:	86a6                	mv	a3,s1
    20e8:	85ca                	mv	a1,s2
    20ea:	02000513          	li	a0,32
    20ee:	9982                	jalr	s3
    20f0:	7882                	ld	a7,32(sp)
    20f2:	846a                	mv	s0,s10
          while (l++ < width) {
    20f4:	0d05                	addi	s10,s10,1
    20f6:	f046                	sd	a7,32(sp)
            out(' ', buffer, idx++, maxlen);
    20f8:	8622                	mv	a2,s0
    20fa:	86a6                	mv	a3,s1
    20fc:	85ca                	mv	a1,s2
    20fe:	02000513          	li	a0,32
    2102:	9982                	jalr	s3
    2104:	7882                	ld	a7,32(sp)
    2106:	846a                	mv	s0,s10
          while (l++ < width) {
    2108:	0d05                	addi	s10,s10,1
    210a:	f046                	sd	a7,32(sp)
            out(' ', buffer, idx++, maxlen);
    210c:	8622                	mv	a2,s0
    210e:	86a6                	mv	a3,s1
    2110:	85ca                	mv	a1,s2
    2112:	02000513          	li	a0,32
    2116:	9982                	jalr	s3
    2118:	7882                	ld	a7,32(sp)
    211a:	846a                	mv	s0,s10
          while (l++ < width) {
    211c:	0d05                	addi	s10,s10,1
    211e:	f046                	sd	a7,32(sp)
            out(' ', buffer, idx++, maxlen);
    2120:	8622                	mv	a2,s0
    2122:	86a6                	mv	a3,s1
    2124:	85ca                	mv	a1,s2
    2126:	02000513          	li	a0,32
    212a:	9982                	jalr	s3
    212c:	7882                	ld	a7,32(sp)
    212e:	846a                	mv	s0,s10
          while (l++ < width) {
    2130:	0d05                	addi	s10,s10,1
    2132:	f046                	sd	a7,32(sp)
            out(' ', buffer, idx++, maxlen);
    2134:	8622                	mv	a2,s0
    2136:	86a6                	mv	a3,s1
    2138:	85ca                	mv	a1,s2
    213a:	02000513          	li	a0,32
    213e:	9982                	jalr	s3
    2140:	7882                	ld	a7,32(sp)
    2142:	846a                	mv	s0,s10
          while (l++ < width) {
    2144:	0d05                	addi	s10,s10,1
    2146:	f046                	sd	a7,32(sp)
            out(' ', buffer, idx++, maxlen);
    2148:	8622                	mv	a2,s0
    214a:	86a6                	mv	a3,s1
    214c:	85ca                	mv	a1,s2
    214e:	02000513          	li	a0,32
    2152:	9982                	jalr	s3
    2154:	846a                	mv	s0,s10
          while (l++ < width) {
    2156:	7882                	ld	a7,32(sp)
    2158:	0d05                	addi	s10,s10,1
    215a:	a0ad                	j	21c4 <_vsnprintf+0xba2>
            out(' ', buffer, idx++, maxlen);
    215c:	866a                	mv	a2,s10
    215e:	86a6                	mv	a3,s1
    2160:	85ca                	mv	a1,s2
    2162:	02000513          	li	a0,32
    2166:	9982                	jalr	s3
    2168:	001d0613          	addi	a2,s10,1
    216c:	86a6                	mv	a3,s1
    216e:	85ca                	mv	a1,s2
    2170:	02000513          	li	a0,32
    2174:	9982                	jalr	s3
    2176:	002d0613          	addi	a2,s10,2
    217a:	86a6                	mv	a3,s1
    217c:	85ca                	mv	a1,s2
    217e:	02000513          	li	a0,32
    2182:	9982                	jalr	s3
    2184:	003d0613          	addi	a2,s10,3
    2188:	86a6                	mv	a3,s1
    218a:	85ca                	mv	a1,s2
    218c:	02000513          	li	a0,32
    2190:	9982                	jalr	s3
    2192:	004d0613          	addi	a2,s10,4
    2196:	86a6                	mv	a3,s1
    2198:	85ca                	mv	a1,s2
    219a:	02000513          	li	a0,32
    219e:	9982                	jalr	s3
    21a0:	005d0613          	addi	a2,s10,5
    21a4:	86a6                	mv	a3,s1
    21a6:	85ca                	mv	a1,s2
    21a8:	02000513          	li	a0,32
    21ac:	9982                	jalr	s3
    21ae:	006d0613          	addi	a2,s10,6
    21b2:	86a6                	mv	a3,s1
    21b4:	85ca                	mv	a1,s2
    21b6:	02000513          	li	a0,32
    21ba:	9982                	jalr	s3
    21bc:	7882                	ld	a7,32(sp)
    21be:	007d0413          	addi	s0,s10,7
          while (l++ < width) {
    21c2:	0d21                	addi	s10,s10,8
    21c4:	f046                	sd	a7,32(sp)
            out(' ', buffer, idx++, maxlen);
    21c6:	8622                	mv	a2,s0
    21c8:	86a6                	mv	a3,s1
    21ca:	85ca                	mv	a1,s2
    21cc:	02000513          	li	a0,32
    21d0:	9982                	jalr	s3
          while (l++ < width) {
    21d2:	7882                	ld	a7,32(sp)
            out(' ', buffer, idx++, maxlen);
    21d4:	846a                	mv	s0,s10
          while (l++ < width) {
    21d6:	f98d13e3          	bne	s10,s8,215c <_vsnprintf+0xb3a>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    21da:	000dc503          	lbu	a0,0(s11)
          while (l++ < width) {
    21de:	001b0d1b          	addiw	s10,s6,1
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    21e2:	8c0513e3          	bnez	a0,1aa8 <_vsnprintf+0x486>
        const char* p = va_arg(va, char*);
    21e6:	7c42                	ld	s8,48(sp)
    21e8:	c94ff06f          	j	167c <_vsnprintf+0x5a>
          while (l++ < width) {
    21ec:	4505                	li	a0,1
    21ee:	23657963          	bgeu	a0,s6,2420 <_vsnprintf+0xdfe>
    21f2:	ffeb0e9b          	addiw	t4,s6,-2
    21f6:	020e9f13          	slli	t5,t4,0x20
    21fa:	020f5f93          	srli	t6,t5,0x20
    21fe:	007ff793          	andi	a5,t6,7
    2202:	01af8b33          	add	s6,t6,s10
    2206:	10078263          	beqz	a5,230a <_vsnprintf+0xce8>
            out(' ', buffer, idx++, maxlen);
    220a:	8622                	mv	a2,s0
    220c:	f03e                	sd	a5,32(sp)
    220e:	86a6                	mv	a3,s1
    2210:	85ca                	mv	a1,s2
    2212:	02000513          	li	a0,32
    2216:	9982                	jalr	s3
    2218:	7602                	ld	a2,32(sp)
    221a:	4705                	li	a4,1
    221c:	846a                	mv	s0,s10
          while (l++ < width) {
    221e:	0d05                	addi	s10,s10,1
    2220:	0ee60563          	beq	a2,a4,230a <_vsnprintf+0xce8>
    2224:	4389                	li	t2,2
    2226:	06760663          	beq	a2,t2,2292 <_vsnprintf+0xc70>
    222a:	468d                	li	a3,3
    222c:	04d60b63          	beq	a2,a3,2282 <_vsnprintf+0xc60>
    2230:	4091                	li	ra,4
    2232:	04160063          	beq	a2,ra,2272 <_vsnprintf+0xc50>
    2236:	4595                	li	a1,5
    2238:	02b60563          	beq	a2,a1,2262 <_vsnprintf+0xc40>
    223c:	4899                	li	a7,6
    223e:	01160a63          	beq	a2,a7,2252 <_vsnprintf+0xc30>
            out(' ', buffer, idx++, maxlen);
    2242:	86a6                	mv	a3,s1
    2244:	866e                	mv	a2,s11
    2246:	85ca                	mv	a1,s2
    2248:	02000513          	li	a0,32
    224c:	846a                	mv	s0,s10
    224e:	9982                	jalr	s3
          while (l++ < width) {
    2250:	0d05                	addi	s10,s10,1
            out(' ', buffer, idx++, maxlen);
    2252:	8622                	mv	a2,s0
    2254:	86a6                	mv	a3,s1
    2256:	85ca                	mv	a1,s2
    2258:	02000513          	li	a0,32
    225c:	846a                	mv	s0,s10
    225e:	9982                	jalr	s3
          while (l++ < width) {
    2260:	0d05                	addi	s10,s10,1
            out(' ', buffer, idx++, maxlen);
    2262:	8622                	mv	a2,s0
    2264:	86a6                	mv	a3,s1
    2266:	85ca                	mv	a1,s2
    2268:	02000513          	li	a0,32
    226c:	846a                	mv	s0,s10
    226e:	9982                	jalr	s3
          while (l++ < width) {
    2270:	0d05                	addi	s10,s10,1
            out(' ', buffer, idx++, maxlen);
    2272:	8622                	mv	a2,s0
    2274:	86a6                	mv	a3,s1
    2276:	85ca                	mv	a1,s2
    2278:	02000513          	li	a0,32
    227c:	846a                	mv	s0,s10
    227e:	9982                	jalr	s3
          while (l++ < width) {
    2280:	0d05                	addi	s10,s10,1
            out(' ', buffer, idx++, maxlen);
    2282:	8622                	mv	a2,s0
    2284:	86a6                	mv	a3,s1
    2286:	85ca                	mv	a1,s2
    2288:	02000513          	li	a0,32
    228c:	846a                	mv	s0,s10
    228e:	9982                	jalr	s3
          while (l++ < width) {
    2290:	0d05                	addi	s10,s10,1
            out(' ', buffer, idx++, maxlen);
    2292:	8622                	mv	a2,s0
    2294:	86a6                	mv	a3,s1
    2296:	85ca                	mv	a1,s2
    2298:	02000513          	li	a0,32
    229c:	846a                	mv	s0,s10
    229e:	9982                	jalr	s3
          while (l++ < width) {
    22a0:	0d05                	addi	s10,s10,1
    22a2:	a0a5                	j	230a <_vsnprintf+0xce8>
            out(' ', buffer, idx++, maxlen);
    22a4:	866a                	mv	a2,s10
    22a6:	86a6                	mv	a3,s1
    22a8:	85ca                	mv	a1,s2
    22aa:	02000513          	li	a0,32
    22ae:	9982                	jalr	s3
    22b0:	001d0613          	addi	a2,s10,1
    22b4:	86a6                	mv	a3,s1
    22b6:	85ca                	mv	a1,s2
    22b8:	02000513          	li	a0,32
    22bc:	9982                	jalr	s3
    22be:	002d0613          	addi	a2,s10,2
    22c2:	86a6                	mv	a3,s1
    22c4:	85ca                	mv	a1,s2
    22c6:	02000513          	li	a0,32
    22ca:	9982                	jalr	s3
    22cc:	003d0613          	addi	a2,s10,3
    22d0:	86a6                	mv	a3,s1
    22d2:	85ca                	mv	a1,s2
    22d4:	02000513          	li	a0,32
    22d8:	9982                	jalr	s3
    22da:	004d0613          	addi	a2,s10,4
    22de:	86a6                	mv	a3,s1
    22e0:	85ca                	mv	a1,s2
    22e2:	02000513          	li	a0,32
    22e6:	9982                	jalr	s3
    22e8:	005d0613          	addi	a2,s10,5
    22ec:	86a6                	mv	a3,s1
    22ee:	85ca                	mv	a1,s2
    22f0:	02000513          	li	a0,32
    22f4:	9982                	jalr	s3
    22f6:	006d0613          	addi	a2,s10,6
    22fa:	86a6                	mv	a3,s1
    22fc:	85ca                	mv	a1,s2
    22fe:	02000513          	li	a0,32
    2302:	007d0413          	addi	s0,s10,7
    2306:	9982                	jalr	s3
          while (l++ < width) {
    2308:	0d21                	addi	s10,s10,8
            out(' ', buffer, idx++, maxlen);
    230a:	86a6                	mv	a3,s1
    230c:	8622                	mv	a2,s0
    230e:	85ca                	mv	a1,s2
    2310:	02000513          	li	a0,32
    2314:	9982                	jalr	s3
          while (l++ < width) {
    2316:	f96d17e3          	bne	s10,s6,22a4 <_vsnprintf+0xc82>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    231a:	001b0413          	addi	s0,s6,1
    231e:	000c4503          	lbu	a0,0(s8)
    2322:	86a6                	mv	a3,s1
    2324:	865a                	mv	a2,s6
    2326:	85ca                	mv	a1,s2
    2328:	9982                	jalr	s3
        break;
    232a:	8c66                	mv	s8,s9
    232c:	b50ff06f          	j	167c <_vsnprintf+0x5a>
            const long long value = va_arg(va, long long);
    2330:	000c3c03          	ld	s8,0(s8)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    2334:	8622                	mv	a2,s0
    2336:	e436                	sd	a3,8(sp)
    2338:	43fc5413          	srai	s0,s8,0x3f
    233c:	01844733          	xor	a4,s0,s8
    2340:	e05a                	sd	s6,0(sp)
    2342:	881e                	mv	a6,t2
    2344:	03fc5793          	srli	a5,s8,0x3f
    2348:	8f01                	sub	a4,a4,s0
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    234a:	86a6                	mv	a3,s1
    234c:	85ca                	mv	a1,s2
    234e:	854e                	mv	a0,s3
    2350:	90cfe0ef          	jal	ra,45c <_ntoa_long>
    2354:	842a                	mv	s0,a0
        break;
    2356:	8c66                	mv	s8,s9
    2358:	b24ff06f          	j	167c <_vsnprintf+0x5a>
        if (flags & FLAGS_PRECISION) {
    235c:	40087313          	andi	t1,a6,1024
    2360:	43c1                	li	t2,16
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    2362:	ff387293          	andi	t0,a6,-13
    2366:	0002869b          	sext.w	a3,t0
        if (flags & FLAGS_PRECISION) {
    236a:	cc0306e3          	beqz	t1,2036 <_vsnprintf+0xa14>
    236e:	b1c1                	j	202e <_vsnprintf+0xa0c>
    2370:	43a9                	li	t2,10
    2372:	b975                	j	202e <_vsnprintf+0xa0c>
        if ((*format == 'i') || (*format == 'd')) {
    2374:	20087d13          	andi	s10,a6,512
    2378:	b9c9                	j	204a <_vsnprintf+0xa28>
    237a:	0ff0f093          	zext.b	ra,ra
    237e:	8706                	mv	a4,ra
    2380:	da0ff06f          	j	1920 <_vsnprintf+0x2fe>
  for (s = str; *s && maxsize--; ++s);
    2384:	001dc303          	lbu	t1,1(s11)
    2388:	001d8d13          	addi	s10,s11,1
    238c:	e6031063          	bnez	t1,19ec <_vsnprintf+0x3ca>
    2390:	ef2ff06f          	j	1a82 <_vsnprintf+0x460>
    2394:	000c4c03          	lbu	s8,0(s8)
    2398:	b9d1                	j	206c <_vsnprintf+0xa4a>
          while (l++ < width) {
    239a:	846a                	mv	s0,s10
        break;
    239c:	8c66                	mv	s8,s9
    239e:	adeff06f          	j	167c <_vsnprintf+0x5a>
    23a2:	43a1                	li	t2,8
    precision = 0U;
    23a4:	86c2                	mv	a3,a6
        if ((*format != 'i') && (*format != 'd')) {
    23a6:	06400613          	li	a2,100
        if (flags & FLAGS_PRECISION) {
    23aa:	87b6                	mv	a5,a3
    23ac:	4006f313          	andi	t1,a3,1024
        if ((*format != 'i') && (*format != 'd')) {
    23b0:	08c51163          	bne	a0,a2,2432 <_vsnprintf+0xe10>
          if (flags & FLAGS_LONG_LONG) {
    23b4:	2007fd13          	andi	s10,a5,512
        if (flags & FLAGS_PRECISION) {
    23b8:	d2030563          	beqz	t1,18e2 <_vsnprintf+0x2c0>
    23bc:	b98d                	j	202e <_vsnprintf+0xa0c>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    23be:	000c3703          	ld	a4,0(s8)
    23c2:	8622                	mv	a2,s0
    23c4:	e436                	sd	a3,8(sp)
    23c6:	e05a                	sd	s6,0(sp)
    23c8:	881e                	mv	a6,t2
    23ca:	4781                	li	a5,0
    23cc:	bfbd                	j	234a <_vsnprintf+0xd28>
            const long value = va_arg(va, long);
    23ce:	000c3f03          	ld	t5,0(s8)
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    23d2:	e436                	sd	a3,8(sp)
    23d4:	8622                	mv	a2,s0
    23d6:	43ff5f93          	srai	t6,t5,0x3f
    23da:	01efc6b3          	xor	a3,t6,t5
    23de:	e05a                	sd	s6,0(sp)
    23e0:	881e                	mv	a6,t2
    23e2:	03ff5793          	srli	a5,t5,0x3f
    23e6:	41f68733          	sub	a4,a3,t6
    23ea:	d42ff06f          	j	192c <_vsnprintf+0x30a>
    23ee:	4389                	li	t2,2
    23f0:	bf55                	j	23a4 <_vsnprintf+0xd82>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    23f2:	000c3703          	ld	a4,0(s8)
    23f6:	8622                	mv	a2,s0
    23f8:	e436                	sd	a3,8(sp)
    23fa:	e05a                	sd	s6,0(sp)
    23fc:	881e                	mv	a6,t2
    23fe:	4781                	li	a5,0
    2400:	d2cff06f          	j	192c <_vsnprintf+0x30a>
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    2404:	41f0dd1b          	sraiw	s10,ra,0x1f
    2408:	01a0c333          	xor	t1,ra,s10
    240c:	41a3073b          	subw	a4,t1,s10
    2410:	d10ff06f          	j	1920 <_vsnprintf+0x2fe>
  for (s = str; *s && maxsize--; ++s);
    2414:	4d01                	li	s10,0
    2416:	e70ff06f          	j	1a86 <_vsnprintf+0x464>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    241a:	000c2c03          	lw	s8,0(s8)
    241e:	b1b9                	j	206c <_vsnprintf+0xa4a>
          while (l++ < width) {
    2420:	8b22                	mv	s6,s0
    2422:	846a                	mv	s0,s10
    2424:	bded                	j	231e <_vsnprintf+0xcfc>
          while (l++ < width) {
    2426:	8d62                	mv	s10,s8
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    2428:	e8051063          	bnez	a0,1aa8 <_vsnprintf+0x486>
    242c:	bb6d                	j	21e6 <_vsnprintf+0xbc4>
    242e:	43a9                	li	t2,10
    2430:	bf9d                	j	23a6 <_vsnprintf+0xd84>
    2432:	8836                	mv	a6,a3
    2434:	b73d                	j	2362 <_vsnprintf+0xd40>

0000000000002436 <_out_char>:
  if (character) {
    2436:	cd09                	beqz	a0,2450 <_out_char+0x1a>
  if (character == '\n')
    2438:	47a9                	li	a5,10
    243a:	00f50c63          	beq	a0,a5,2452 <_out_char+0x1c>
  asm volatile ("li t1, 0xd000000050580000"   : : : "t1" );
    243e:	a0000337          	lui	t1,0xa0000
    2442:	2305                	addiw	t1,t1,1
    2444:	0332                	slli	t1,t1,0xc
    2446:	a0b30313          	addi	t1,t1,-1525 # ffffffff9ffffa0b <tohost+0x2fffffff4fa7fa0b>
    244a:	034e                	slli	t1,t1,0x13
  asm volatile ("sb %0, 0(t1)"                : : "r" (character)  );
    244c:	00a30023          	sb	a0,0(t1)
}
    2450:	8082                	ret
  asm volatile ("li t1, 0xd000000050580000"   : : : "t1" );
    2452:	a0000337          	lui	t1,0xa0000
    2456:	2305                	addiw	t1,t1,1
    2458:	0332                	slli	t1,t1,0xc
    245a:	a0b30313          	addi	t1,t1,-1525 # ffffffff9ffffa0b <tohost+0x2fffffff4fa7fa0b>
    245e:	034e                	slli	t1,t1,0x13
  asm volatile ("sb %0, 0(t1)"                : : "r" (character)  );
    2460:	42b5                	li	t0,13
    2462:	00530023          	sb	t0,0(t1)
  asm volatile ("li t1, 0xd000000050580000"   : : : "t1" );
    2466:	a0000337          	lui	t1,0xa0000
    246a:	2305                	addiw	t1,t1,1
    246c:	0332                	slli	t1,t1,0xc
    246e:	a0b30313          	addi	t1,t1,-1525 # ffffffff9ffffa0b <tohost+0x2fffffff4fa7fa0b>
    2472:	034e                	slli	t1,t1,0x13
  asm volatile ("sb %0, 0(t1)"                : : "r" (character)  );
    2474:	00a30023          	sb	a0,0(t1)
    2478:	bfe1                	j	2450 <_out_char+0x1a>

000000000000247a <_putchar>:
  if (character == '\n')
    247a:	47a9                	li	a5,10
    247c:	00f50c63          	beq	a0,a5,2494 <_putchar+0x1a>
  asm volatile ("li t1, 0xd000000050580000"   : : : "t1" );
    2480:	a0000337          	lui	t1,0xa0000
    2484:	2305                	addiw	t1,t1,1
    2486:	0332                	slli	t1,t1,0xc
    2488:	a0b30313          	addi	t1,t1,-1525 # ffffffff9ffffa0b <tohost+0x2fffffff4fa7fa0b>
    248c:	034e                	slli	t1,t1,0x13
  asm volatile ("sb %0, 0(t1)"                : : "r" (character)  );
    248e:	00a30023          	sb	a0,0(t1)
}
    2492:	8082                	ret
  asm volatile ("li t1, 0xd000000050580000"   : : : "t1" );
    2494:	a0000337          	lui	t1,0xa0000
    2498:	2305                	addiw	t1,t1,1
    249a:	0332                	slli	t1,t1,0xc
    249c:	a0b30313          	addi	t1,t1,-1525 # ffffffff9ffffa0b <tohost+0x2fffffff4fa7fa0b>
    24a0:	034e                	slli	t1,t1,0x13
  asm volatile ("sb %0, 0(t1)"                : : "r" (character)  );
    24a2:	42b5                	li	t0,13
    24a4:	00530023          	sb	t0,0(t1)
  asm volatile ("li t1, 0xd000000050580000"   : : : "t1" );
    24a8:	a0000337          	lui	t1,0xa0000
    24ac:	2305                	addiw	t1,t1,1
    24ae:	0332                	slli	t1,t1,0xc
    24b0:	a0b30313          	addi	t1,t1,-1525 # ffffffff9ffffa0b <tohost+0x2fffffff4fa7fa0b>
    24b4:	034e                	slli	t1,t1,0x13
  asm volatile ("sb %0, 0(t1)"                : : "r" (character)  );
    24b6:	00a30023          	sb	a0,0(t1)
}
    24ba:	8082                	ret

00000000000024bc <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
    24bc:	711d                	addi	sp,sp,-96
  va_list va;
  va_start(va, format);
    24be:	02810313          	addi	t1,sp,40
{
    24c2:	fc36                	sd	a3,56(sp)
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    24c4:	86aa                	mv	a3,a0
    24c6:	6509                	lui	a0,0x2
{
    24c8:	f42e                	sd	a1,40(sp)
    24ca:	f832                	sd	a2,48(sp)
    24cc:	e0ba                	sd	a4,64(sp)
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    24ce:	858a                	mv	a1,sp
    24d0:	871a                	mv	a4,t1
    24d2:	567d                	li	a2,-1
    24d4:	43650513          	addi	a0,a0,1078 # 2436 <_out_char>
{
    24d8:	ec06                	sd	ra,24(sp)
    24da:	e4be                	sd	a5,72(sp)
    24dc:	e8c2                	sd	a6,80(sp)
    24de:	ecc6                	sd	a7,88(sp)
  va_start(va, format);
    24e0:	e41a                	sd	t1,8(sp)
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    24e2:	940ff0ef          	jal	ra,1622 <_vsnprintf>
  va_end(va);
  return ret;
}
    24e6:	60e2                	ld	ra,24(sp)
    24e8:	6125                	addi	sp,sp,96
    24ea:	8082                	ret

00000000000024ec <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
    24ec:	715d                	addi	sp,sp,-80
  va_list va;
  va_start(va, format);
    24ee:	02010313          	addi	t1,sp,32
{
    24f2:	f436                	sd	a3,40(sp)
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
    24f4:	86ae                	mv	a3,a1
    24f6:	85aa                	mv	a1,a0
{
    24f8:	f032                	sd	a2,32(sp)
    24fa:	f83a                	sd	a4,48(sp)
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
    24fc:	567d                	li	a2,-1
    24fe:	871a                	mv	a4,t1
    2500:	04c00513          	li	a0,76
{
    2504:	ec06                	sd	ra,24(sp)
    2506:	fc3e                	sd	a5,56(sp)
    2508:	e0c2                	sd	a6,64(sp)
    250a:	e4c6                	sd	a7,72(sp)
  va_start(va, format);
    250c:	e41a                	sd	t1,8(sp)
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
    250e:	914ff0ef          	jal	ra,1622 <_vsnprintf>
  va_end(va);
  return ret;
}
    2512:	60e2                	ld	ra,24(sp)
    2514:	6161                	addi	sp,sp,80
    2516:	8082                	ret

0000000000002518 <snprintf_>:


int snprintf_(char* buffer, size_t count, const char* format, ...)
{
    2518:	715d                	addi	sp,sp,-80
  va_list va;
  va_start(va, format);
    251a:	02810313          	addi	t1,sp,40
{
    251e:	f436                	sd	a3,40(sp)
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
    2520:	86b2                	mv	a3,a2
    2522:	862e                	mv	a2,a1
    2524:	85aa                	mv	a1,a0
{
    2526:	f83a                	sd	a4,48(sp)
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
    2528:	04c00513          	li	a0,76
    252c:	871a                	mv	a4,t1
{
    252e:	ec06                	sd	ra,24(sp)
    2530:	fc3e                	sd	a5,56(sp)
    2532:	e0c2                	sd	a6,64(sp)
    2534:	e4c6                	sd	a7,72(sp)
  va_start(va, format);
    2536:	e41a                	sd	t1,8(sp)
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
    2538:	8eaff0ef          	jal	ra,1622 <_vsnprintf>
  va_end(va);
  return ret;
}
    253c:	60e2                	ld	ra,24(sp)
    253e:	6161                	addi	sp,sp,80
    2540:	8082                	ret

0000000000002542 <vprintf_>:


int vprintf_(const char* format, va_list va)
{
    2542:	1101                	addi	sp,sp,-32
    2544:	86aa                	mv	a3,a0
  char buffer[1];
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    2546:	6509                	lui	a0,0x2
{
    2548:	872e                	mv	a4,a1
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    254a:	567d                	li	a2,-1
    254c:	002c                	addi	a1,sp,8
    254e:	43650513          	addi	a0,a0,1078 # 2436 <_out_char>
{
    2552:	ec06                	sd	ra,24(sp)
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    2554:	8ceff0ef          	jal	ra,1622 <_vsnprintf>
}
    2558:	60e2                	ld	ra,24(sp)
    255a:	6105                	addi	sp,sp,32
    255c:	8082                	ret

000000000000255e <vsnprintf_>:


int vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
{
    255e:	8736                	mv	a4,a3
  return _vsnprintf(_out_buffer, buffer, count, format, va);
    2560:	86b2                	mv	a3,a2
    2562:	862e                	mv	a2,a1
    2564:	85aa                	mv	a1,a0
    2566:	04c00513          	li	a0,76
    256a:	8b8ff06f          	j	1622 <_vsnprintf>

000000000000256e <fctprintf>:
}


int fctprintf(void (*out)(char character, void* arg), void* arg, const char* format, ...)
{
    256e:	711d                	addi	sp,sp,-96
  va_list va;
  va_start(va, format);
    2570:	03810313          	addi	t1,sp,56
{
    2574:	8eaa                	mv	t4,a0
  const out_fct_wrap_type out_fct_wrap = { out, arg };
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
    2576:	6505                	lui	a0,0x1
{
    2578:	8e2e                	mv	t3,a1
    257a:	fc36                	sd	a3,56(sp)
    257c:	e0ba                	sd	a4,64(sp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
    257e:	86b2                	mv	a3,a2
    2580:	080c                	addi	a1,sp,16
    2582:	871a                	mv	a4,t1
    2584:	567d                	li	a2,-1
    2586:	ab050513          	addi	a0,a0,-1360 # ab0 <_out_fct>
{
    258a:	f406                	sd	ra,40(sp)
    258c:	e4be                	sd	a5,72(sp)
    258e:	e8c2                	sd	a6,80(sp)
    2590:	ecc6                	sd	a7,88(sp)
  va_start(va, format);
    2592:	e41a                	sd	t1,8(sp)
  const out_fct_wrap_type out_fct_wrap = { out, arg };
    2594:	e876                	sd	t4,16(sp)
    2596:	ec72                	sd	t3,24(sp)
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
    2598:	88aff0ef          	jal	ra,1622 <_vsnprintf>
  va_end(va);
  return ret;
}
    259c:	70a2                	ld	ra,40(sp)
    259e:	6125                	addi	sp,sp,96
    25a0:	8082                	ret

00000000000025a2 <PA>:
}

void
PA(double E[])
{
	J = 0;
    25a2:	291c                	fld	fa5,16(a0)

L10:
	E[1] = ( E[1] + E[2] + E[3] - E[4]) * T;
    25a4:	2518                	fld	fa4,8(a0)
    25a6:	2d10                	fld	fa2,24(a0)
    25a8:	3108                	fld	fa0,32(a0)
    25aa:	02e7f053          	fadd.d	ft0,fa5,fa4
    25ae:	67c5                	lui	a5,0x11
    25b0:	c307b687          	fld	fa3,-976(a5) # 10c30 <T>
	E[2] = ( E[1] + E[2] - E[3] + E[4]) * T;
	E[3] = ( E[1] - E[2] + E[3] + E[4]) * T;
	E[4] = (-E[1] + E[2] + E[3] + E[4]) / T2;
    25b4:	62c5                	lui	t0,0x11
    25b6:	c202b587          	fld	fa1,-992(t0) # 10c20 <T2>
	E[1] = ( E[1] + E[2] + E[3] - E[4]) * T;
    25ba:	6345                	lui	t1,0x11
    25bc:	4719                	li	a4,6
    25be:	02c070d3          	fadd.d	ft1,ft0,fa2
    25c2:	c0e32c23          	sw	a4,-1000(t1) # 10c18 <J>
    25c6:	0aa0f153          	fsub.d	ft2,ft1,fa0
	E[2] = ( E[1] + E[2] - E[3] + E[4]) * T;
    25ca:	7a26f1c3          	fmadd.d	ft3,fa3,ft2,fa5
    25ce:	0ac1f253          	fsub.d	ft4,ft3,fa2
    25d2:	02a272d3          	fadd.d	ft5,ft4,fa0
    25d6:	12d2f353          	fmul.d	ft6,ft5,fa3
	E[3] = ( E[1] - E[2] + E[3] + E[4]) * T;
    25da:	3226f3c7          	fmsub.d	ft7,fa3,ft2,ft6
	E[4] = (-E[1] + E[2] + E[3] + E[4]) / T2;
    25de:	3226f84b          	fnmsub.d	fa6,fa3,ft2,ft6
	E[1] = ( E[1] + E[2] + E[3] - E[4]) * T;
    25e2:	3226f8c3          	fmadd.d	fa7,fa3,ft2,ft6
	E[3] = ( E[1] - E[2] + E[3] + E[4]) * T;
    25e6:	02767e53          	fadd.d	ft8,fa2,ft7
    25ea:	02ae7ed3          	fadd.d	ft9,ft8,fa0
	E[4] = (-E[1] + E[2] + E[3] + E[4]) / T2;
    25ee:	83d6ff43          	fmadd.d	ft10,fa3,ft9,fa6
	E[1] = ( E[1] + E[2] + E[3] - E[4]) * T;
    25f2:	8bd6ffc3          	fmadd.d	ft11,fa3,ft9,fa7
	E[4] = (-E[1] + E[2] + E[3] + E[4]) / T2;
    25f6:	03e577d3          	fadd.d	fa5,fa0,ft10
    25fa:	1ab7f553          	fdiv.d	fa0,fa5,fa1
	E[1] = ( E[1] + E[2] + E[3] - E[4]) * T;
    25fe:	0aaff753          	fsub.d	fa4,ft11,fa0
	E[2] = ( E[1] + E[2] - E[3] + E[4]) * T;
    2602:	32e6f643          	fmadd.d	fa2,fa3,fa4,ft6
    2606:	63d6f04b          	fnmsub.d	ft0,fa3,ft9,fa2
    260a:	02a070d3          	fadd.d	ft1,ft0,fa0
    260e:	12d0f153          	fmul.d	ft2,ft1,fa3
	E[3] = ( E[1] - E[2] + E[3] + E[4]) * T;
    2612:	12e6f1c7          	fmsub.d	ft3,fa3,fa4,ft2
	E[4] = (-E[1] + E[2] + E[3] + E[4]) / T2;
    2616:	12e6f24b          	fnmsub.d	ft4,fa3,fa4,ft2
	E[1] = ( E[1] + E[2] + E[3] - E[4]) * T;
    261a:	12e6f2c3          	fmadd.d	ft5,fa3,fa4,ft2
	E[3] = ( E[1] - E[2] + E[3] + E[4]) * T;
    261e:	1bd6f343          	fmadd.d	ft6,fa3,ft9,ft3
    2622:	02a373d3          	fadd.d	ft7,ft6,fa0
	E[4] = (-E[1] + E[2] + E[3] + E[4]) / T2;
    2626:	2276f843          	fmadd.d	fa6,fa3,ft7,ft4
	E[1] = ( E[1] + E[2] + E[3] - E[4]) * T;
    262a:	2a76f8c3          	fmadd.d	fa7,fa3,ft7,ft5
	E[4] = (-E[1] + E[2] + E[3] + E[4]) / T2;
    262e:	03057e53          	fadd.d	ft8,fa0,fa6
    2632:	1abe7ed3          	fdiv.d	ft9,ft8,fa1
	E[1] = ( E[1] + E[2] + E[3] - E[4]) * T;
    2636:	0bd8ff53          	fsub.d	ft10,fa7,ft9
	E[2] = ( E[1] + E[2] - E[3] + E[4]) * T;
    263a:	13e6ffc3          	fmadd.d	ft11,fa3,ft10,ft2
    263e:	fa76f7cb          	fnmsub.d	fa5,fa3,ft7,ft11
    2642:	02fef553          	fadd.d	fa0,ft9,fa5
    2646:	12d57153          	fmul.d	ft2,fa0,fa3
	E[3] = ( E[1] - E[2] + E[3] + E[4]) * T;
    264a:	13e6f647          	fmsub.d	fa2,fa3,ft10,ft2
	E[4] = (-E[1] + E[2] + E[3] + E[4]) / T2;
    264e:	13e6f04b          	fnmsub.d	ft0,fa3,ft10,ft2
	E[1] = ( E[1] + E[2] + E[3] - E[4]) * T;
    2652:	13e6f743          	fmadd.d	fa4,fa3,ft10,ft2
	E[3] = ( E[1] - E[2] + E[3] + E[4]) * T;
    2656:	6276f0c3          	fmadd.d	ft1,fa3,ft7,fa2
    265a:	021ef1d3          	fadd.d	ft3,ft9,ft1
	E[4] = (-E[1] + E[2] + E[3] + E[4]) / T2;
    265e:	0236f243          	fmadd.d	ft4,fa3,ft3,ft0
	E[1] = ( E[1] + E[2] + E[3] - E[4]) * T;
    2662:	7236f2c3          	fmadd.d	ft5,fa3,ft3,fa4
	E[4] = (-E[1] + E[2] + E[3] + E[4]) / T2;
    2666:	024ef353          	fadd.d	ft6,ft9,ft4
    266a:	1ab373d3          	fdiv.d	ft7,ft6,fa1
	E[1] = ( E[1] + E[2] + E[3] - E[4]) * T;
    266e:	0a72f853          	fsub.d	fa6,ft5,ft7
	E[2] = ( E[1] + E[2] - E[3] + E[4]) * T;
    2672:	1306f8c3          	fmadd.d	fa7,fa3,fa6,ft2
    2676:	8a36fe4b          	fnmsub.d	ft8,fa3,ft3,fa7
    267a:	03c3fed3          	fadd.d	ft9,ft7,ft8
    267e:	12deff53          	fmul.d	ft10,ft9,fa3
	E[3] = ( E[1] - E[2] + E[3] + E[4]) * T;
    2682:	f306ffc7          	fmsub.d	ft11,fa3,fa6,ft10
	E[4] = (-E[1] + E[2] + E[3] + E[4]) / T2;
    2686:	f306f7cb          	fnmsub.d	fa5,fa3,fa6,ft10
	E[1] = ( E[1] + E[2] + E[3] - E[4]) * T;
    268a:	f306f543          	fmadd.d	fa0,fa3,fa6,ft10
	E[3] = ( E[1] - E[2] + E[3] + E[4]) * T;
    268e:	fa36f143          	fmadd.d	ft2,fa3,ft3,ft11
    2692:	0223f653          	fadd.d	fa2,ft7,ft2
	E[4] = (-E[1] + E[2] + E[3] + E[4]) / T2;
    2696:	7ac6f043          	fmadd.d	ft0,fa3,fa2,fa5
	E[1] = ( E[1] + E[2] + E[3] - E[4]) * T;
    269a:	52c6f743          	fmadd.d	fa4,fa3,fa2,fa0
	E[4] = (-E[1] + E[2] + E[3] + E[4]) / T2;
    269e:	0203f0d3          	fadd.d	ft1,ft7,ft0
    26a2:	1ab0f1d3          	fdiv.d	ft3,ft1,fa1
	E[1] = ( E[1] + E[2] + E[3] - E[4]) * T;
    26a6:	0a377253          	fsub.d	ft4,fa4,ft3
	E[2] = ( E[1] + E[2] - E[3] + E[4]) * T;
    26aa:	f246f2c3          	fmadd.d	ft5,fa3,ft4,ft10
    26ae:	2ac6f34b          	fnmsub.d	ft6,fa3,fa2,ft5
    26b2:	0261f3d3          	fadd.d	ft7,ft3,ft6
    26b6:	12d3f853          	fmul.d	fa6,ft7,fa3
	E[3] = ( E[1] - E[2] + E[3] + E[4]) * T;
    26ba:	8246f8c7          	fmsub.d	fa7,fa3,ft4,fa6
	E[4] = (-E[1] + E[2] + E[3] + E[4]) / T2;
    26be:	8246fe4b          	fnmsub.d	ft8,fa3,ft4,fa6
	E[1] = ( E[1] + E[2] + E[3] - E[4]) * T;
    26c2:	8246fec3          	fmadd.d	ft9,fa3,ft4,fa6
	E[3] = ( E[1] - E[2] + E[3] + E[4]) * T;
    26c6:	8ac6ff43          	fmadd.d	ft10,fa3,fa2,fa7
    26ca:	03e1ffd3          	fadd.d	ft11,ft3,ft10
	E[4] = (-E[1] + E[2] + E[3] + E[4]) / T2;
    26ce:	e3f6f7c3          	fmadd.d	fa5,fa3,ft11,ft8
	E[1] = ( E[1] + E[2] + E[3] - E[4]) * T;
    26d2:	ebf6f143          	fmadd.d	ft2,fa3,ft11,ft9
	E[4] = (-E[1] + E[2] + E[3] + E[4]) / T2;
    26d6:	02f1f553          	fadd.d	fa0,ft3,fa5
    26da:	1ab570d3          	fdiv.d	ft1,fa0,fa1
	E[1] = ( E[1] + E[2] + E[3] - E[4]) * T;
    26de:	0a117653          	fsub.d	fa2,ft2,ft1
    26e2:	12d67753          	fmul.d	fa4,fa2,fa3
	E[2] = ( E[1] + E[2] - E[3] + E[4]) * T;
    26e6:	03077053          	fadd.d	ft0,fa4,fa6
    26ea:	a518                	fsd	fa4,8(a0)
    26ec:	03f6f1cb          	fnmsub.d	ft3,fa3,ft11,ft0
    26f0:	0211f253          	fadd.d	ft4,ft3,ft1
    26f4:	12d272d3          	fmul.d	ft5,ft4,fa3
	E[3] = ( E[1] - E[2] + E[3] + E[4]) * T;
    26f8:	0a577353          	fsub.d	ft6,fa4,ft5
	E[4] = (-E[1] + E[2] + E[3] + E[4]) / T2;
    26fc:	0ae2f3d3          	fsub.d	ft7,ft5,fa4
    2700:	00553827          	fsd	ft5,16(a0)
	E[3] = ( E[1] - E[2] + E[3] + E[4]) * T;
    2704:	33f6f843          	fmadd.d	fa6,fa3,ft11,ft6
    2708:	021878d3          	fadd.d	fa7,fa6,ft1
    270c:	12d8f6d3          	fmul.d	fa3,fa7,fa3
	E[4] = (-E[1] + E[2] + E[3] + E[4]) / T2;
    2710:	02d3fe53          	fadd.d	ft8,ft7,fa3
    2714:	ad14                	fsd	fa3,24(a0)
    2716:	021e7ed3          	fadd.d	ft9,ft8,ft1
    271a:	1abef5d3          	fdiv.d	fa1,ft9,fa1
    271e:	b10c                	fsd	fa1,32(a0)
	J += 1;

	if (J < 6)
		goto L10;
}
    2720:	8082                	ret

0000000000002722 <P0>:

void
P0(void)
{
	E1[J] = E1[K];
    2722:	67c5                	lui	a5,0x11
    2724:	c147a683          	lw	a3,-1004(a5) # 10c14 <K>
    2728:	62c5                	lui	t0,0x11
    272a:	6745                	lui	a4,0x11
    272c:	be828313          	addi	t1,t0,-1048 # 10be8 <E1>
    2730:	c1872383          	lw	t2,-1000(a4) # 10c18 <J>
    2734:	00369513          	slli	a0,a3,0x3
	E1[K] = E1[L];
    2738:	6645                	lui	a2,0x11
	E1[J] = E1[K];
    273a:	00a305b3          	add	a1,t1,a0
	E1[K] = E1[L];
    273e:	c1062803          	lw	a6,-1008(a2) # 10c10 <L>
	E1[J] = E1[K];
    2742:	219c                	fld	fa5,0(a1)
    2744:	00339893          	slli	a7,t2,0x3
    2748:	01130e33          	add	t3,t1,a7
	E1[K] = E1[L];
    274c:	00381e93          	slli	t4,a6,0x3
	E1[J] = E1[K];
    2750:	00fe3027          	fsd	fa5,0(t3)
	E1[K] = E1[L];
    2754:	01d30f33          	add	t5,t1,t4
    2758:	000f3007          	fld	ft0,0(t5)
    275c:	0005b027          	fsd	ft0,0(a1)
	E1[L] = E1[J];
    2760:	000e3087          	fld	ft1,0(t3)
    2764:	001f3027          	fsd	ft1,0(t5)
}
    2768:	8082                	ret

000000000000276a <P3>:
{
	double X1, Y1;

	X1 = X;
	Y1 = Y;
	X1 = T * (X1 + Y1);
    276a:	02b57553          	fadd.d	fa0,fa0,fa1
    276e:	67c5                	lui	a5,0x11
    2770:	c307b787          	fld	fa5,-976(a5) # 10c30 <T>
	Y1 = T * (X1 + Y1);
	*Z  = (X1 + Y1) / T2;
    2774:	62c5                	lui	t0,0x11
    2776:	c202b707          	fld	fa4,-992(t0) # 10c20 <T2>
	Y1 = T * (X1 + Y1);
    277a:	5af575c3          	fmadd.d	fa1,fa0,fa5,fa1
    277e:	12b7f053          	fmul.d	ft0,fa5,fa1
	*Z  = (X1 + Y1) / T2;
    2782:	02f570c3          	fmadd.d	ft1,fa0,fa5,ft0
    2786:	1ae0f153          	fdiv.d	ft2,ft1,fa4
    278a:	00253027          	fsd	ft2,0(a0)
}
    278e:	8082                	ret

0000000000002790 <get_cycles>:
}
#endif

unsigned long get_cycles() {
    unsigned long cycles;
    asm volatile ("csrr %0,mcycle"   : "=r" (cycles)  );
    2790:	b0002573          	csrr	a0,mcycle

    return cycles;
}
    2794:	8082                	ret

0000000000002796 <cycles_to_secs>:

float cycles_to_secs(unsigned long cycles)
{
  return (1.0f * cycles / EE_TICKS_PER_SEC);
    2796:	6791                	lui	a5,0x4
    2798:	d0357553          	fcvt.s.lu	fa0,a0
    279c:	a587a787          	flw	fa5,-1448(a5) # 3a58 <_end+0x1a0>
}
    27a0:	18f57553          	fdiv.s	fa0,fa0,fa5
    27a4:	8082                	ret

00000000000027a6 <main>:
{
    27a6:	7155                	addi	sp,sp,-208
    27a8:	e586                	sd	ra,200(sp)
    27aa:	e1a2                	sd	s0,192(sp)
    27ac:	fd26                	sd	s1,184(sp)
    27ae:	f94a                	sd	s2,176(sp)
    27b0:	f54e                	sd	s3,168(sp)
    27b2:	f152                	sd	s4,160(sp)
    27b4:	ed56                	sd	s5,152(sp)
    27b6:	e95a                	sd	s6,144(sp)
    27b8:	e55e                	sd	s7,136(sp)
    27ba:	e162                	sd	s8,128(sp)
    27bc:	fce6                	sd	s9,120(sp)
    27be:	f8ea                	sd	s10,112(sp)
    27c0:	f4ee                	sd	s11,104(sp)
    27c2:	aca2                	fsd	fs0,88(sp)
    27c4:	a8a6                	fsd	fs1,80(sp)
    27c6:	a4ca                	fsd	fs2,72(sp)
    27c8:	a0ce                	fsd	fs3,64(sp)
    27ca:	bc52                	fsd	fs4,56(sp)
    27cc:	b856                	fsd	fs5,48(sp)
    27ce:	b45a                	fsd	fs6,40(sp)
	while (II < argc) {
    27d0:	4705                	li	a4,1
    27d2:	7ea75563          	bge	a4,a0,2fbc <main+0x816>
    27d6:	ffe5049b          	addiw	s1,a0,-2
    27da:	02049093          	slli	ra,s1,0x20
    27de:	01058313          	addi	t1,a1,16
    27e2:	01d0d293          	srli	t0,ra,0x1d
    27e6:	00858413          	addi	s0,a1,8
    27ea:	00628a33          	add	s4,t0,t1
    27ee:	408a03b3          	sub	t2,s4,s0
    27f2:	ff838513          	addi	a0,t2,-8
    27f6:	00355593          	srli	a1,a0,0x3
    27fa:	00158613          	addi	a2,a1,1
    27fe:	00367693          	andi	a3,a2,3
	continuous = 0;
    2802:	4b01                	li	s6,0
	loopstart = ITERATIONS;		/* see the note about LOOP below */
    2804:	06400993          	li	s3,100
		if (strncmp(argv[II], "-c", 2) == 0 || argv[II][0] == 'c') {
    2808:	06300913          	li	s2,99
    280c:	caa5                	beqz	a3,287c <main+0xd6>
    280e:	04e68863          	beq	a3,a4,285e <main+0xb8>
    2812:	4809                	li	a6,2
    2814:	03068663          	beq	a3,a6,2840 <main+0x9a>
    2818:	6008                	ld	a0,0(s0)
    281a:	00054883          	lbu	a7,0(a0)
    281e:	fd388a9b          	addiw	s5,a7,-45
    2822:	760a8963          	beqz	s5,2f94 <main+0x7ee>
    2826:	00054c83          	lbu	s9,0(a0)
    282a:	772c8b63          	beq	s9,s2,2fa0 <main+0x7fa>
		} else if (atol(argv[II]) > 0) {
    282e:	691000ef          	jal	ra,36be <atol>
    2832:	76a05b63          	blez	a0,2fa8 <main+0x802>
			loopstart = atol(argv[II]);
    2836:	6008                	ld	a0,0(s0)
	while (II < argc) {
    2838:	0421                	addi	s0,s0,8
			loopstart = atol(argv[II]);
    283a:	685000ef          	jal	ra,36be <atol>
    283e:	89aa                	mv	s3,a0
		if (strncmp(argv[II], "-c", 2) == 0 || argv[II][0] == 'c') {
    2840:	6008                	ld	a0,0(s0)
    2842:	00054d03          	lbu	s10,0(a0)
    2846:	fd3d0d9b          	addiw	s11,s10,-45
    284a:	700d9763          	bnez	s11,2f58 <main+0x7b2>
    284e:	00154e03          	lbu	t3,1(a0)
    2852:	f9de0e9b          	addiw	t4,t3,-99
    2856:	700e9163          	bnez	t4,2f58 <main+0x7b2>
			continuous = 1;
    285a:	4b05                	li	s6,1
	while (II < argc) {
    285c:	0421                	addi	s0,s0,8
		if (strncmp(argv[II], "-c", 2) == 0 || argv[II][0] == 'c') {
    285e:	6008                	ld	a0,0(s0)
    2860:	00054f83          	lbu	t6,0(a0)
    2864:	fd3f871b          	addiw	a4,t6,-45
    2868:	6e070163          	beqz	a4,2f4a <main+0x7a4>
    286c:	00054083          	lbu	ra,0(a0)
    2870:	71209963          	bne	ra,s2,2f82 <main+0x7dc>
			continuous = 1;
    2874:	4b05                	li	s6,1
	while (II < argc) {
    2876:	0421                	addi	s0,s0,8
    2878:	09440363          	beq	s0,s4,28fe <main+0x158>
		if (strncmp(argv[II], "-c", 2) == 0 || argv[II][0] == 'c') {
    287c:	6008                	ld	a0,0(s0)
    287e:	00054283          	lbu	t0,0(a0)
    2882:	fd32831b          	addiw	t1,t0,-45
    2886:	62031163          	bnez	t1,2ea8 <main+0x702>
    288a:	00154383          	lbu	t2,1(a0)
    288e:	f9d3859b          	addiw	a1,t2,-99
    2892:	60059b63          	bnez	a1,2ea8 <main+0x702>
    2896:	6408                	ld	a0,8(s0)
			continuous = 1;
    2898:	4b05                	li	s6,1
	while (II < argc) {
    289a:	0421                	addi	s0,s0,8
		if (strncmp(argv[II], "-c", 2) == 0 || argv[II][0] == 'c') {
    289c:	00054683          	lbu	a3,0(a0)
    28a0:	fd36881b          	addiw	a6,a3,-45
    28a4:	62080663          	beqz	a6,2ed0 <main+0x72a>
    28a8:	00054b83          	lbu	s7,0(a0)
    28ac:	632b8863          	beq	s7,s2,2edc <main+0x736>
		} else if (atol(argv[II]) > 0) {
    28b0:	60f000ef          	jal	ra,36be <atol>
    28b4:	6ea05a63          	blez	a0,2fa8 <main+0x802>
			loopstart = atol(argv[II]);
    28b8:	6008                	ld	a0,0(s0)
    28ba:	605000ef          	jal	ra,36be <atol>
    28be:	89aa                	mv	s3,a0
		if (strncmp(argv[II], "-c", 2) == 0 || argv[II][0] == 'c') {
    28c0:	6408                	ld	a0,8(s0)
    28c2:	00054c03          	lbu	s8,0(a0)
    28c6:	fd3c0c9b          	addiw	s9,s8,-45
    28ca:	620c9163          	bnez	s9,2eec <main+0x746>
    28ce:	00154d03          	lbu	s10,1(a0)
    28d2:	f9dd0d9b          	addiw	s11,s10,-99
    28d6:	600d9b63          	bnez	s11,2eec <main+0x746>
    28da:	6808                	ld	a0,16(s0)
			continuous = 1;
    28dc:	4b05                	li	s6,1
		if (strncmp(argv[II], "-c", 2) == 0 || argv[II][0] == 'c') {
    28de:	00054e83          	lbu	t4,0(a0)
    28e2:	fd3e8f1b          	addiw	t5,t4,-45
    28e6:	620f1663          	bnez	t5,2f12 <main+0x76c>
    28ea:	00154f83          	lbu	t6,1(a0)
    28ee:	f9df871b          	addiw	a4,t6,-99
    28f2:	62071063          	bnez	a4,2f12 <main+0x76c>
			continuous = 1;
    28f6:	4b05                	li	s6,1
	while (II < argc) {
    28f8:	0461                	addi	s0,s0,24
    28fa:	f94411e3          	bne	s0,s4,287c <main+0xd6>
	N9  = 616 * LOOP;
    28fe:	26800513          	li	a0,616
    2902:	02a98933          	mul	s2,s3,a0
	N2  = 12 * LOOP;
    2906:	00199493          	slli	s1,s3,0x1
	T  = .499975;
    290a:	6311                	lui	t1,0x4
	E[1] = ( E[1] + E[2] + E[3] - E[4]) * T;
    290c:	6391                	lui	t2,0x4
	E1[3] = 3.0;
    290e:	6591                	lui	a1,0x4
	X = 0.75;
    2910:	6611                	lui	a2,0x4
	KIPS = (100.0f*LOOP*II)/totalsec;
    2912:	6691                	lui	a3,0x4
	if (KIPS >= 1000.0f)
    2914:	6811                	lui	a6,0x4
	N2  = 12 * LOOP;
    2916:	013480b3          	add	ra,s1,s3
	N3  = 14 * LOOP;
    291a:	00399293          	slli	t0,s3,0x3
	T  = .499975;
    291e:	96833987          	fld	fs3,-1688(t1) # 3968 <_end+0xb0>
	E[1] = ( E[1] + E[2] + E[3] - E[4]) * T;
    2922:	8d83ba87          	fld	fs5,-1832(t2) # 38d8 <_end+0x20>
	E1[3] = 3.0;
    2926:	9585b407          	fld	fs0,-1704(a1) # 3958 <_end+0xa0>
	X = 0.75;
    292a:	96063907          	fld	fs2,-1696(a2) # 3960 <_end+0xa8>
	KIPS = (100.0f*LOOP*II)/totalsec;
    292e:	a5c6aa07          	flw	fs4,-1444(a3) # 3a5c <_end+0x1a4>
	if (KIPS >= 1000.0f)
    2932:	a6082487          	flw	fs1,-1440(a6) # 3a60 <_end+0x1a8>
	N2  = 12 * LOOP;
    2936:	00209b93          	slli	s7,ra,0x2
    293a:	6c45                	lui	s8,0x11
	N3  = 14 * LOOP;
    293c:	413288b3          	sub	a7,t0,s3
	N11 = 93 * LOOP;
    2940:	00509a93          	slli	s5,ra,0x5
	N9  = 616 * LOOP;
    2944:	e44a                	sd	s2,8(sp)
	N2  = 12 * LOOP;
    2946:	e85e                	sd	s7,16(sp)
    2948:	be8c0913          	addi	s2,s8,-1048 # 10be8 <E1>
	N3  = 14 * LOOP;
    294c:	00189d93          	slli	s11,a7,0x1
	N11 = 93 * LOOP;
    2950:	401a8ab3          	sub	s5,s5,ra
    2954:	64c5                	lui	s1,0x11
    2956:	6d11                	lui	s10,0x4
    2958:	6c91                	lui	s9,0x4
    295a:	6c45                	lui	s8,0x11
    295c:	6bc5                	lui	s7,0x11
    295e:	ec5a                	sd	s6,24(sp)
    asm volatile ("csrr %0,mcycle"   : "=r" (cycles)  );
    2960:	b0002b73          	csrr	s6,mcycle
	T1 = 0.50025;
    2964:	6e11                	lui	t3,0x4
	E1[2] = -1.0;
    2966:	6e91                	lui	t4,0x4
	T1 = 0.50025;
    2968:	970e3707          	fld	fa4,-1680(t3) # 3970 <_end+0xb8>
	T2 = 2.0;
    296c:	930d3787          	fld	fa5,-1744(s10) # 3930 <_end+0x78>
	E1[2] = -1.0;
    2970:	950eb507          	fld	fa0,-1712(t4) # 3950 <_end+0x98>
	for (I = 1; I <= N2; I++) {
    2974:	67c2                	ld	a5,16(sp)
	T  = .499975;
    2976:	6f45                	lui	t5,0x11
	T2 = 2.0;
    2978:	6fc5                	lui	t6,0x11
	T  = .499975;
    297a:	c33f3827          	fsd	fs3,-976(t5) # 10c30 <T>
	T1 = 0.50025;
    297e:	c2e4b427          	fsd	fa4,-984(s1) # 10c28 <T1>
	T2 = 2.0;
    2982:	c2ffb027          	fsd	fa5,-992(t6) # 10c20 <T2>
	E1[4] = -1.0;
    2986:	02a93027          	fsd	fa0,32(s2)
	E1[1] =  1.0;
    298a:	938cb807          	fld	fa6,-1736(s9) # 3938 <_end+0x80>
	for (I = 1; I <= N2; I++) {
    298e:	5af05963          	blez	a5,2f40 <main+0x79a>
	    E1[1] = ( E1[1] + E1[2] + E1[3] - E1[4]) * T;
    2992:	6711                	lui	a4,0x4
    2994:	96873687          	fld	fa3,-1688(a4) # 3968 <_end+0xb0>
	for (I = 1; I <= N2; I++) {
    2998:	22a50fd3          	fmv.d	ft11,fa0
    299c:	22a50b53          	fmv.d	fs6,fa0
    29a0:	00178a13          	addi	s4,a5,1
    29a4:	4405                	li	s0,1
	    E1[1] = ( E1[1] + E1[2] + E1[3] - E1[4]) * T;
    29a6:	030b7053          	fadd.d	ft0,fs6,fa6
	for (I = 1; I <= N2; I++) {
    29aa:	0411                	addi	s0,s0,4
	    E1[1] = ( E1[1] + E1[2] + E1[3] - E1[4]) * T;
    29ac:	03f070d3          	fadd.d	ft1,ft0,ft11
    29b0:	0aa0f153          	fsub.d	ft2,ft1,fa0
    29b4:	12d171d3          	fmul.d	ft3,ft2,fa3
	    E1[2] = ( E1[1] + E1[2] - E1[3] + E1[4]) * T;
    29b8:	0361f253          	fadd.d	ft4,ft3,fs6
    29bc:	0bf272d3          	fsub.d	ft5,ft4,ft11
    29c0:	02a2f353          	fadd.d	ft6,ft5,fa0
    29c4:	12d373d3          	fmul.d	ft7,ft6,fa3
	    E1[3] = ( E1[1] - E1[2] + E1[3] + E1[4]) * T;
    29c8:	0a71f853          	fsub.d	fa6,ft3,ft7
	    E1[4] = (-E1[1] + E1[2] + E1[3] + E1[4]) * T;
    29cc:	0a33f5d3          	fsub.d	fa1,ft7,ft3
	    E1[1] = ( E1[1] + E1[2] + E1[3] - E1[4]) * T;
    29d0:	0233f8d3          	fadd.d	fa7,ft7,ft3
	    E1[3] = ( E1[1] - E1[2] + E1[3] + E1[4]) * T;
    29d4:	03f87653          	fadd.d	fa2,fa6,ft11
    29d8:	02a67b53          	fadd.d	fs6,fa2,fa0
    29dc:	12db7e53          	fmul.d	ft8,fs6,fa3
	    E1[4] = (-E1[1] + E1[2] + E1[3] + E1[4]) * T;
    29e0:	03c5fed3          	fadd.d	ft9,fa1,ft8
	    E1[1] = ( E1[1] + E1[2] + E1[3] - E1[4]) * T;
    29e4:	03c8ff53          	fadd.d	ft10,fa7,ft8
	    E1[4] = (-E1[1] + E1[2] + E1[3] + E1[4]) * T;
    29e8:	02aef553          	fadd.d	fa0,ft9,fa0
    29ec:	12d57fd3          	fmul.d	ft11,fa0,fa3
	    E1[1] = ( E1[1] + E1[2] + E1[3] - E1[4]) * T;
    29f0:	0bff7753          	fsub.d	fa4,ft10,ft11
    29f4:	12d77053          	fmul.d	ft0,fa4,fa3
	    E1[2] = ( E1[1] + E1[2] - E1[3] + E1[4]) * T;
    29f8:	027077d3          	fadd.d	fa5,ft0,ft7
    29fc:	0bc7f0d3          	fsub.d	ft1,fa5,ft8
    2a00:	03f0f153          	fadd.d	ft2,ft1,ft11
    2a04:	12d171d3          	fmul.d	ft3,ft2,fa3
	    E1[3] = ( E1[1] - E1[2] + E1[3] + E1[4]) * T;
    2a08:	0a307253          	fsub.d	ft4,ft0,ft3
	    E1[4] = (-E1[1] + E1[2] + E1[3] + E1[4]) * T;
    2a0c:	0a01f2d3          	fsub.d	ft5,ft3,ft0
	    E1[1] = ( E1[1] + E1[2] + E1[3] - E1[4]) * T;
    2a10:	0201f353          	fadd.d	ft6,ft3,ft0
	    E1[3] = ( E1[1] - E1[2] + E1[3] + E1[4]) * T;
    2a14:	03c273d3          	fadd.d	ft7,ft4,ft8
    2a18:	03f3f853          	fadd.d	fa6,ft7,ft11
    2a1c:	12d878d3          	fmul.d	fa7,fa6,fa3
	    E1[4] = (-E1[1] + E1[2] + E1[3] + E1[4]) * T;
    2a20:	0312f5d3          	fadd.d	fa1,ft5,fa7
	    E1[1] = ( E1[1] + E1[2] + E1[3] - E1[4]) * T;
    2a24:	03137653          	fadd.d	fa2,ft6,fa7
	    E1[4] = (-E1[1] + E1[2] + E1[3] + E1[4]) * T;
    2a28:	03f5fb53          	fadd.d	fs6,fa1,ft11
    2a2c:	12db7e53          	fmul.d	ft8,fs6,fa3
	    E1[1] = ( E1[1] + E1[2] + E1[3] - E1[4]) * T;
    2a30:	0bc67ed3          	fsub.d	ft9,fa2,ft8
    2a34:	12deff53          	fmul.d	ft10,ft9,fa3
	    E1[2] = ( E1[1] + E1[2] - E1[3] + E1[4]) * T;
    2a38:	023f7553          	fadd.d	fa0,ft10,ft3
    2a3c:	0b157fd3          	fsub.d	ft11,fa0,fa7
    2a40:	03cff753          	fadd.d	fa4,ft11,ft8
    2a44:	12d777d3          	fmul.d	fa5,fa4,fa3
	    E1[3] = ( E1[1] - E1[2] + E1[3] + E1[4]) * T;
    2a48:	0aff7053          	fsub.d	ft0,ft10,fa5
	    E1[4] = (-E1[1] + E1[2] + E1[3] + E1[4]) * T;
    2a4c:	0be7f0d3          	fsub.d	ft1,fa5,ft10
	    E1[1] = ( E1[1] + E1[2] + E1[3] - E1[4]) * T;
    2a50:	03e7f153          	fadd.d	ft2,fa5,ft10
	    E1[3] = ( E1[1] - E1[2] + E1[3] + E1[4]) * T;
    2a54:	031071d3          	fadd.d	ft3,ft0,fa7
    2a58:	03c1f253          	fadd.d	ft4,ft3,ft8
    2a5c:	12d272d3          	fmul.d	ft5,ft4,fa3
	    E1[4] = (-E1[1] + E1[2] + E1[3] + E1[4]) * T;
    2a60:	0250f353          	fadd.d	ft6,ft1,ft5
	    E1[1] = ( E1[1] + E1[2] + E1[3] - E1[4]) * T;
    2a64:	025173d3          	fadd.d	ft7,ft2,ft5
	    E1[4] = (-E1[1] + E1[2] + E1[3] + E1[4]) * T;
    2a68:	03c37853          	fadd.d	fa6,ft6,ft8
    2a6c:	12d878d3          	fmul.d	fa7,fa6,fa3
	    E1[1] = ( E1[1] + E1[2] + E1[3] - E1[4]) * T;
    2a70:	0b13f5d3          	fsub.d	fa1,ft7,fa7
    2a74:	12d5f853          	fmul.d	fa6,fa1,fa3
	    E1[2] = ( E1[1] + E1[2] - E1[3] + E1[4]) * T;
    2a78:	02f87653          	fadd.d	fa2,fa6,fa5
    2a7c:	0a567b53          	fsub.d	fs6,fa2,ft5
    2a80:	031b7e53          	fadd.d	ft8,fs6,fa7
    2a84:	12de7b53          	fmul.d	fs6,ft8,fa3
	    E1[3] = ( E1[1] - E1[2] + E1[3] + E1[4]) * T;
    2a88:	0b687ed3          	fsub.d	ft9,fa6,fs6
	    E1[4] = (-E1[1] + E1[2] + E1[3] + E1[4]) * T;
    2a8c:	0b0b7f53          	fsub.d	ft10,fs6,fa6
	    E1[3] = ( E1[1] - E1[2] + E1[3] + E1[4]) * T;
    2a90:	025ef553          	fadd.d	fa0,ft9,ft5
    2a94:	03157fd3          	fadd.d	ft11,fa0,fa7
    2a98:	12dfffd3          	fmul.d	ft11,ft11,fa3
	    E1[4] = (-E1[1] + E1[2] + E1[3] + E1[4]) * T;
    2a9c:	03ff7053          	fadd.d	ft0,ft10,ft11
    2aa0:	031070d3          	fadd.d	ft1,ft0,fa7
    2aa4:	12d0f553          	fmul.d	fa0,ft1,fa3
	for (I = 1; I <= N2; I++) {
    2aa8:	ef441fe3          	bne	s0,s4,29a6 <main+0x200>
    2aac:	02a93027          	fsd	fa0,32(s2)
	for (I = 1; I <= N3; I++)
    2ab0:	15b05f63          	blez	s11,2c0e <main+0x468>
	E[2] = ( E[1] + E[2] - E[3] + E[4]) * T;
    2ab4:	6511                	lui	a0,0x4
    2ab6:	96853687          	fld	fa3,-1688(a0) # 3968 <_end+0xb0>
    2aba:	001d8093          	addi	ra,s11,1
	for (I = 1; I <= N3; I++)
    2abe:	4285                	li	t0,1
	E[1] = ( E[1] + E[2] + E[3] - E[4]) * T;
    2ac0:	030b7753          	fadd.d	fa4,fs6,fa6
	for (I = 1; I <= N3; I++)
    2ac4:	0285                	addi	t0,t0,1
	E[1] = ( E[1] + E[2] + E[3] - E[4]) * T;
    2ac6:	03f77153          	fadd.d	ft2,fa4,ft11
    2aca:	0aa171d3          	fsub.d	ft3,ft2,fa0
	E[2] = ( E[1] + E[2] - E[3] + E[4]) * T;
    2ace:	b2d1f7c3          	fmadd.d	fa5,ft3,fa3,fs6
    2ad2:	0bf7f253          	fsub.d	ft4,fa5,ft11
    2ad6:	02a272d3          	fadd.d	ft5,ft4,fa0
    2ada:	12d2f353          	fmul.d	ft6,ft5,fa3
	E[3] = ( E[1] - E[2] + E[3] + E[4]) * T;
    2ade:	32d1f3c7          	fmsub.d	ft7,ft3,fa3,ft6
	E[4] = (-E[1] + E[2] + E[3] + E[4]) / T2;
    2ae2:	32d1f84b          	fnmsub.d	fa6,ft3,fa3,ft6
	E[1] = ( E[1] + E[2] + E[3] - E[4]) * T;
    2ae6:	32d1f8c3          	fmadd.d	fa7,ft3,fa3,ft6
	E[3] = ( E[1] - E[2] + E[3] + E[4]) * T;
    2aea:	027ff5d3          	fadd.d	fa1,ft11,ft7
    2aee:	02a5f653          	fadd.d	fa2,fa1,fa0
	E[4] = (-E[1] + E[2] + E[3] + E[4]) / T2;
    2af2:	82d67b43          	fmadd.d	fs6,fa2,fa3,fa6
	E[1] = ( E[1] + E[2] + E[3] - E[4]) * T;
    2af6:	8ad67e43          	fmadd.d	ft8,fa2,fa3,fa7
	E[4] = (-E[1] + E[2] + E[3] + E[4]) / T2;
    2afa:	03657ed3          	fadd.d	ft9,fa0,fs6
	E[1] = ( E[1] + E[2] + E[3] - E[4]) * T;
    2afe:	e35eff4b          	fnmsub.d	ft10,ft9,fs5,ft8
	E[2] = ( E[1] + E[2] - E[3] + E[4]) * T;
    2b02:	32df7543          	fmadd.d	fa0,ft10,fa3,ft6
    2b06:	52d67fcb          	fnmsub.d	ft11,fa2,fa3,fa0
    2b0a:	fb5ef043          	fmadd.d	ft0,ft9,fs5,ft11
    2b0e:	12d070d3          	fmul.d	ft1,ft0,fa3
	E[3] = ( E[1] - E[2] + E[3] + E[4]) * T;
    2b12:	0adf7147          	fmsub.d	ft2,ft10,fa3,ft1
	E[4] = (-E[1] + E[2] + E[3] + E[4]) / T2;
    2b16:	0adf71cb          	fnmsub.d	ft3,ft10,fa3,ft1
	E[1] = ( E[1] + E[2] + E[3] - E[4]) * T;
    2b1a:	0adf7743          	fmadd.d	fa4,ft10,fa3,ft1
	E[3] = ( E[1] - E[2] + E[3] + E[4]) * T;
    2b1e:	12d677c3          	fmadd.d	fa5,fa2,fa3,ft2
    2b22:	7b5ef243          	fmadd.d	ft4,ft9,fs5,fa5
	E[4] = (-E[1] + E[2] + E[3] + E[4]) / T2;
    2b26:	1ad272c3          	fmadd.d	ft5,ft4,fa3,ft3
	E[1] = ( E[1] + E[2] + E[3] - E[4]) * T;
    2b2a:	72d27343          	fmadd.d	ft6,ft4,fa3,fa4
	E[4] = (-E[1] + E[2] + E[3] + E[4]) / T2;
    2b2e:	2b5ef3c3          	fmadd.d	ft7,ft9,fs5,ft5
	E[1] = ( E[1] + E[2] + E[3] - E[4]) * T;
    2b32:	3353f84b          	fnmsub.d	fa6,ft7,fs5,ft6
	E[2] = ( E[1] + E[2] - E[3] + E[4]) * T;
    2b36:	0ad878c3          	fmadd.d	fa7,fa6,fa3,ft1
    2b3a:	8ad275cb          	fnmsub.d	fa1,ft4,fa3,fa7
    2b3e:	5b53f643          	fmadd.d	fa2,ft7,fs5,fa1
    2b42:	12d67b53          	fmul.d	fs6,fa2,fa3
	E[3] = ( E[1] - E[2] + E[3] + E[4]) * T;
    2b46:	b2d87e47          	fmsub.d	ft8,fa6,fa3,fs6
	E[4] = (-E[1] + E[2] + E[3] + E[4]) / T2;
    2b4a:	b2d87ecb          	fnmsub.d	ft9,fa6,fa3,fs6
	E[1] = ( E[1] + E[2] + E[3] - E[4]) * T;
    2b4e:	b2d87f43          	fmadd.d	ft10,fa6,fa3,fs6
	E[3] = ( E[1] - E[2] + E[3] + E[4]) * T;
    2b52:	e2d27543          	fmadd.d	fa0,ft4,fa3,ft8
    2b56:	5353ffc3          	fmadd.d	ft11,ft7,fs5,fa0
	E[4] = (-E[1] + E[2] + E[3] + E[4]) / T2;
    2b5a:	eadff043          	fmadd.d	ft0,ft11,fa3,ft9
	E[1] = ( E[1] + E[2] + E[3] - E[4]) * T;
    2b5e:	f2dff0c3          	fmadd.d	ft1,ft11,fa3,ft10
	E[4] = (-E[1] + E[2] + E[3] + E[4]) / T2;
    2b62:	0353f143          	fmadd.d	ft2,ft7,fs5,ft0
	E[1] = ( E[1] + E[2] + E[3] - E[4]) * T;
    2b66:	0b5171cb          	fnmsub.d	ft3,ft2,fs5,ft1
	E[2] = ( E[1] + E[2] - E[3] + E[4]) * T;
    2b6a:	b2d1f743          	fmadd.d	fa4,ft3,fa3,fs6
    2b6e:	72dff7cb          	fnmsub.d	fa5,ft11,fa3,fa4
    2b72:	7b517243          	fmadd.d	ft4,ft2,fs5,fa5
    2b76:	12d272d3          	fmul.d	ft5,ft4,fa3
	E[3] = ( E[1] - E[2] + E[3] + E[4]) * T;
    2b7a:	2ad1f347          	fmsub.d	ft6,ft3,fa3,ft5
	E[4] = (-E[1] + E[2] + E[3] + E[4]) / T2;
    2b7e:	2ad1f3cb          	fnmsub.d	ft7,ft3,fa3,ft5
	E[1] = ( E[1] + E[2] + E[3] - E[4]) * T;
    2b82:	2ad1f843          	fmadd.d	fa6,ft3,fa3,ft5
	E[3] = ( E[1] - E[2] + E[3] + E[4]) * T;
    2b86:	32dff8c3          	fmadd.d	fa7,ft11,fa3,ft6
    2b8a:	8b517643          	fmadd.d	fa2,ft2,fs5,fa7
	E[4] = (-E[1] + E[2] + E[3] + E[4]) / T2;
    2b8e:	3ad675c3          	fmadd.d	fa1,fa2,fa3,ft7
	E[1] = ( E[1] + E[2] + E[3] - E[4]) * T;
    2b92:	82d67b43          	fmadd.d	fs6,fa2,fa3,fa6
	E[4] = (-E[1] + E[2] + E[3] + E[4]) / T2;
    2b96:	5b517e43          	fmadd.d	ft8,ft2,fs5,fa1
	E[1] = ( E[1] + E[2] + E[3] - E[4]) * T;
    2b9a:	b35e7ecb          	fnmsub.d	ft9,ft8,fs5,fs6
	E[2] = ( E[1] + E[2] - E[3] + E[4]) * T;
    2b9e:	2adeff43          	fmadd.d	ft10,ft9,fa3,ft5
    2ba2:	f2d6754b          	fnmsub.d	fa0,fa2,fa3,ft10
    2ba6:	535e7fc3          	fmadd.d	ft11,ft8,fs5,fa0
    2baa:	12dff0d3          	fmul.d	ft1,ft11,fa3
	E[3] = ( E[1] - E[2] + E[3] + E[4]) * T;
    2bae:	0adef047          	fmsub.d	ft0,ft9,fa3,ft1
	E[4] = (-E[1] + E[2] + E[3] + E[4]) / T2;
    2bb2:	0adef14b          	fnmsub.d	ft2,ft9,fa3,ft1
	E[1] = ( E[1] + E[2] + E[3] - E[4]) * T;
    2bb6:	0adef1c3          	fmadd.d	ft3,ft9,fa3,ft1
	E[3] = ( E[1] - E[2] + E[3] + E[4]) * T;
    2bba:	02d67743          	fmadd.d	fa4,fa2,fa3,ft0
    2bbe:	735e7243          	fmadd.d	ft4,ft8,fs5,fa4
	E[4] = (-E[1] + E[2] + E[3] + E[4]) / T2;
    2bc2:	12d277c3          	fmadd.d	fa5,ft4,fa3,ft2
	E[1] = ( E[1] + E[2] + E[3] - E[4]) * T;
    2bc6:	1ad272c3          	fmadd.d	ft5,ft4,fa3,ft3
	E[4] = (-E[1] + E[2] + E[3] + E[4]) / T2;
    2bca:	7b5e7343          	fmadd.d	ft6,ft8,fs5,fa5
	E[1] = ( E[1] + E[2] + E[3] - E[4]) * T;
    2bce:	2b5373cb          	fnmsub.d	ft7,ft6,fs5,ft5
    2bd2:	12d3f853          	fmul.d	fa6,ft7,fa3
	E[2] = ( E[1] + E[2] - E[3] + E[4]) * T;
    2bd6:	021878d3          	fadd.d	fa7,fa6,ft1
    2bda:	8ad2764b          	fnmsub.d	fa2,ft4,fa3,fa7
    2bde:	635375c3          	fmadd.d	fa1,ft6,fs5,fa2
    2be2:	12d5fb53          	fmul.d	fs6,fa1,fa3
	E[3] = ( E[1] - E[2] + E[3] + E[4]) * T;
    2be6:	0b687e53          	fsub.d	ft8,fa6,fs6
	E[4] = (-E[1] + E[2] + E[3] + E[4]) / T2;
    2bea:	0b0b7ed3          	fsub.d	ft9,fs6,fa6
	E[3] = ( E[1] - E[2] + E[3] + E[4]) * T;
    2bee:	e2d27f43          	fmadd.d	ft10,ft4,fa3,ft8
    2bf2:	f3537543          	fmadd.d	fa0,ft6,fs5,ft10
    2bf6:	12d57fd3          	fmul.d	ft11,fa0,fa3
	E[4] = (-E[1] + E[2] + E[3] + E[4]) / T2;
    2bfa:	03fef0d3          	fadd.d	ft1,ft9,ft11
    2bfe:	0b537043          	fmadd.d	ft0,ft6,fs5,ft1
    2c02:	13507553          	fmul.d	fa0,ft0,fs5
	for (I = 1; I <= N3; I++)
    2c06:	ea129de3          	bne	t0,ra,2ac0 <main+0x31a>
    2c0a:	02a93027          	fsd	fa0,32(s2)
	E1[1] = 1.0;
    2c0e:	938cb687          	fld	fa3,-1736(s9)
	E1[2] = 2.0;
    2c12:	930d3787          	fld	fa5,-1744(s10)
	for (I = 1; I <= N9; I++)
    2c16:	66a2                	ld	a3,8(sp)
	J = 1;
    2c18:	4305                	li	t1,1
	L = 3;
    2c1a:	438d                	li	t2,3
	K = 2;
    2c1c:	4589                	li	a1,2
	L = 3;
    2c1e:	6645                	lui	a2,0x11
	J = 1;
    2c20:	c06c2c23          	sw	t1,-1000(s8) # 10c18 <J>
	K = 2;
    2c24:	c0bbaa23          	sw	a1,-1004(s7) # 10c14 <K>
	L = 3;
    2c28:	c0762823          	sw	t2,-1008(a2) # 10c10 <L>
	E1[1] = 1.0;
    2c2c:	00d93427          	fsd	fa3,8(s2)
	E1[2] = 2.0;
    2c30:	00f93827          	fsd	fa5,16(s2)
	E1[3] = 3.0;
    2c34:	00893c27          	fsd	fs0,24(s2)
	for (I = 1; I <= N9; I++)
    2c38:	08d05b63          	blez	a3,2cce <main+0x528>
    2c3c:	481d                	li	a6,7
    2c3e:	22840753          	fmv.d	fa4,fs0
    2c42:	00168513          	addi	a0,a3,1
    2c46:	4f09                	li	t5,2
    2c48:	06680963          	beq	a6,t1,2cba <main+0x514>
    2c4c:	05e80e63          	beq	a6,t5,2ca8 <main+0x502>
    2c50:	04780563          	beq	a6,t2,2c9a <main+0x4f4>
    2c54:	4891                	li	a7,4
    2c56:	03180b63          	beq	a6,a7,2c8c <main+0x4e6>
    2c5a:	4e15                	li	t3,5
    2c5c:	03c80163          	beq	a6,t3,2c7e <main+0x4d8>
    2c60:	4e99                	li	t4,6
    2c62:	01d80763          	beq	a6,t4,2c70 <main+0x4ca>
    2c66:	22f78753          	fmv.d	fa4,fa5
    2c6a:	228407d3          	fmv.d	fa5,fs0
    2c6e:	4f0d                	li	t5,3
    2c70:	22e70153          	fmv.d	ft2,fa4
    2c74:	22f78753          	fmv.d	fa4,fa5
    2c78:	0f05                	addi	t5,t5,1
    2c7a:	222107d3          	fmv.d	fa5,ft2
    2c7e:	22e701d3          	fmv.d	ft3,fa4
    2c82:	22f78753          	fmv.d	fa4,fa5
    2c86:	0f05                	addi	t5,t5,1
    2c88:	223187d3          	fmv.d	fa5,ft3
    2c8c:	22e70253          	fmv.d	ft4,fa4
    2c90:	22f78753          	fmv.d	fa4,fa5
    2c94:	0f05                	addi	t5,t5,1
    2c96:	224207d3          	fmv.d	fa5,ft4
    2c9a:	22e702d3          	fmv.d	ft5,fa4
    2c9e:	22f78753          	fmv.d	fa4,fa5
    2ca2:	0f05                	addi	t5,t5,1
    2ca4:	225287d3          	fmv.d	fa5,ft5
    2ca8:	22e70353          	fmv.d	ft6,fa4
    2cac:	0f05                	addi	t5,t5,1
    2cae:	22f78753          	fmv.d	fa4,fa5
    2cb2:	226307d3          	fmv.d	fa5,ft6
    2cb6:	a011                	j	2cba <main+0x514>
    2cb8:	0f21                	addi	t5,t5,8
    2cba:	001f0f93          	addi	t6,t5,1
    2cbe:	feaf9de3          	bne	t6,a0,2cb8 <main+0x512>
    2cc2:	00f93827          	fsd	fa5,16(s2)
    2cc6:	00e93427          	fsd	fa4,8(s2)
    2cca:	00e93c27          	fsd	fa4,24(s2)
	J = 2;
    2cce:	4709                	li	a4,2
	K = 3;
    2cd0:	478d                	li	a5,3
	J = 2;
    2cd2:	c0ec2c23          	sw	a4,-1000(s8)
	K = 3;
    2cd6:	c0fbaa23          	sw	a5,-1004(s7)
	for (I = 1; I <= N11; I++)
    2cda:	13505763          	blez	s5,2e08 <main+0x662>
    2cde:	003af513          	andi	a0,s5,3
	X = 0.75;
    2ce2:	23290553          	fmv.d	fa0,fs2
    2ce6:	f2000b53          	fmv.d.x	fs6,zero
    2cea:	001a8a13          	addi	s4,s5,1
	for (I = 1; I <= N11; I++)
    2cee:	4405                	li	s0,1
    2cf0:	c141                	beqz	a0,2d70 <main+0x5ca>
    2cf2:	04850a63          	beq	a0,s0,2d46 <main+0x5a0>
    2cf6:	02e50563          	beq	a0,a4,2d20 <main+0x57a>
		X = DSQRT(DEXP(DLOG(X)/T1));
    2cfa:	36c000ef          	jal	ra,3066 <log>
    2cfe:	c284b387          	fld	ft7,-984(s1)
    2d02:	1a757553          	fdiv.d	fa0,fa0,ft7
    2d06:	2e8000ef          	jal	ra,2fee <exp>
    2d0a:	00102773          	frflags	a4
    2d0e:	a3651453          	flt.d	s0,fa0,fs6
    2d12:	00171073          	fsflags	a4
    2d16:	2a041763          	bnez	s0,2fc4 <main+0x81e>
    2d1a:	5a057553          	fsqrt.d	fa0,fa0
	for (I = 1; I <= N11; I++)
    2d1e:	4409                	li	s0,2
		X = DSQRT(DEXP(DLOG(X)/T1));
    2d20:	346000ef          	jal	ra,3066 <log>
    2d24:	c284b887          	fld	fa7,-984(s1)
    2d28:	1b157553          	fdiv.d	fa0,fa0,fa7
    2d2c:	2c2000ef          	jal	ra,2fee <exp>
    2d30:	00102773          	frflags	a4
    2d34:	a36512d3          	flt.d	t0,fa0,fs6
    2d38:	00171073          	fsflags	a4
    2d3c:	28029a63          	bnez	t0,2fd0 <main+0x82a>
    2d40:	5a057553          	fsqrt.d	fa0,fa0
	for (I = 1; I <= N11; I++)
    2d44:	0405                	addi	s0,s0,1
		X = DSQRT(DEXP(DLOG(X)/T1));
    2d46:	320000ef          	jal	ra,3066 <log>
    2d4a:	c284b587          	fld	fa1,-984(s1)
    2d4e:	1ab57553          	fdiv.d	fa0,fa0,fa1
    2d52:	29c000ef          	jal	ra,2fee <exp>
    2d56:	00102773          	frflags	a4
    2d5a:	a3651353          	flt.d	t1,fa0,fs6
    2d5e:	00171073          	fsflags	a4
    2d62:	26031463          	bnez	t1,2fca <main+0x824>
    2d66:	5a057553          	fsqrt.d	fa0,fa0
	for (I = 1; I <= N11; I++)
    2d6a:	0405                	addi	s0,s0,1
    2d6c:	09440e63          	beq	s0,s4,2e08 <main+0x662>
		X = DSQRT(DEXP(DLOG(X)/T1));
    2d70:	2f6000ef          	jal	ra,3066 <log>
    2d74:	c284be87          	fld	ft9,-984(s1)
    2d78:	1bd57553          	fdiv.d	fa0,fa0,ft9
    2d7c:	272000ef          	jal	ra,2fee <exp>
    2d80:	00102773          	frflags	a4
    2d84:	a36513d3          	flt.d	t2,fa0,fs6
    2d88:	00171073          	fsflags	a4
    2d8c:	24039e63          	bnez	t2,2fe8 <main+0x842>
    2d90:	5a057553          	fsqrt.d	fa0,fa0
    2d94:	2d2000ef          	jal	ra,3066 <log>
    2d98:	c284bf87          	fld	ft11,-984(s1)
	for (I = 1; I <= N11; I++)
    2d9c:	0405                	addi	s0,s0,1
		X = DSQRT(DEXP(DLOG(X)/T1));
    2d9e:	1bf57553          	fdiv.d	fa0,fa0,ft11
    2da2:	24c000ef          	jal	ra,2fee <exp>
    2da6:	00102773          	frflags	a4
    2daa:	a36515d3          	flt.d	a1,fa0,fs6
    2dae:	00171073          	fsflags	a4
    2db2:	22059863          	bnez	a1,2fe2 <main+0x83c>
    2db6:	5a057553          	fsqrt.d	fa0,fa0
    2dba:	2ac000ef          	jal	ra,3066 <log>
    2dbe:	c284b007          	fld	ft0,-984(s1)
    2dc2:	1a057553          	fdiv.d	fa0,fa0,ft0
    2dc6:	228000ef          	jal	ra,2fee <exp>
    2dca:	00102773          	frflags	a4
    2dce:	a3651653          	flt.d	a2,fa0,fs6
    2dd2:	00171073          	fsflags	a4
    2dd6:	20061363          	bnez	a2,2fdc <main+0x836>
    2dda:	5a057553          	fsqrt.d	fa0,fa0
    2dde:	288000ef          	jal	ra,3066 <log>
    2de2:	c284b107          	fld	ft2,-984(s1)
    2de6:	1a257553          	fdiv.d	fa0,fa0,ft2
    2dea:	204000ef          	jal	ra,2fee <exp>
    2dee:	00102773          	frflags	a4
    2df2:	a36516d3          	flt.d	a3,fa0,fs6
    2df6:	00171073          	fsflags	a4
    2dfa:	1c069e63          	bnez	a3,2fd6 <main+0x830>
    2dfe:	5a057553          	fsqrt.d	fa0,fa0
	for (I = 1; I <= N11; I++)
    2e02:	040d                	addi	s0,s0,3
    2e04:	f74416e3          	bne	s0,s4,2d70 <main+0x5ca>
    asm volatile ("csrr %0,mcycle"   : "=r" (cycles)  );
    2e08:	b00020f3          	csrr	ra,mcycle
  return (1.0f * cycles / EE_TICKS_PER_SEC);
    2e0c:	6811                	lui	a6,0x4
    totalcycles = finicycles - startcycles;
    2e0e:	41608b33          	sub	s6,ra,s6
  return (1.0f * cycles / EE_TICKS_PER_SEC);
    2e12:	d03b7553          	fcvt.s.lu	fa0,s6
    2e16:	a5882207          	flw	ft4,-1448(a6) # 3a58 <_end+0x1a0>
	printf("\n");
    2e1a:	68c5                	lui	a7,0x11
    2e1c:	b6888513          	addi	a0,a7,-1176 # 10b68 <_ctype_+0x1b0>
  return (1.0f * cycles / EE_TICKS_PER_SEC);
    2e20:	18457b53          	fdiv.s	fs6,fa0,ft4
	printf("\n");
    2e24:	e98ff0ef          	jal	ra,24bc <printf_>
	if (totalsec <= 0) {
    2e28:	f00002d3          	fmv.w.x	ft5,zero
    2e2c:	a05b0e53          	fle.s	t3,fs6,ft5
    2e30:	140e1263          	bnez	t3,2f74 <main+0x7ce>
	printf("Loops: %ld, Iterations: %d, Duration: %.1lf sec.\n",
    2e34:	420b0353          	fcvt.d.s	ft6,fs6
    2e38:	6ec5                	lui	t4,0x11
    2e3a:	4605                	li	a2,1
    2e3c:	e20306d3          	fmv.x.d	a3,ft6
    2e40:	85ce                	mv	a1,s3
    2e42:	b38e8513          	addi	a0,t4,-1224 # 10b38 <_ctype_+0x180>
    2e46:	e76ff0ef          	jal	ra,24bc <printf_>
	KIPS = (100.0f*LOOP*II)/totalsec;
    2e4a:	d029f753          	fcvt.s.l	fa4,s3
    2e4e:	114777d3          	fmul.s	fa5,fa4,fs4
    2e52:	1967f3d3          	fdiv.s	ft7,fa5,fs6
	if (KIPS >= 1000.0f)
    2e56:	a0748f53          	fle.s	t5,fs1,ft7
    2e5a:	0c0f0963          	beqz	t5,2f2c <main+0x786>
		printf("C Converted Double Precision Whetstones: %.2f MIPS\n", KIPS/1000.0f);
    2e5e:	1893f8d3          	fdiv.s	fa7,ft7,fs1
    2e62:	6745                	lui	a4,0x11
    2e64:	b7070513          	addi	a0,a4,-1168 # 10b70 <_ctype_+0x1b8>
    2e68:	42088653          	fcvt.d.s	fa2,fa7
    2e6c:	e20605d3          	fmv.x.d	a1,fa2
    2e70:	e4cff0ef          	jal	ra,24bc <printf_>
	if (continuous)
    2e74:	67e2                	ld	a5,24(sp)
    2e76:	ae0795e3          	bnez	a5,2960 <main+0x1ba>
}
    2e7a:	60ae                	ld	ra,200(sp)
    2e7c:	640e                	ld	s0,192(sp)
    2e7e:	74ea                	ld	s1,184(sp)
    2e80:	794a                	ld	s2,176(sp)
    2e82:	79aa                	ld	s3,168(sp)
    2e84:	7a0a                	ld	s4,160(sp)
    2e86:	6aea                	ld	s5,152(sp)
    2e88:	6b4a                	ld	s6,144(sp)
    2e8a:	6baa                	ld	s7,136(sp)
    2e8c:	6c0a                	ld	s8,128(sp)
    2e8e:	7ce6                	ld	s9,120(sp)
    2e90:	7d46                	ld	s10,112(sp)
    2e92:	7da6                	ld	s11,104(sp)
    2e94:	2466                	fld	fs0,88(sp)
    2e96:	24c6                	fld	fs1,80(sp)
    2e98:	2926                	fld	fs2,72(sp)
    2e9a:	2986                	fld	fs3,64(sp)
    2e9c:	3a62                	fld	fs4,56(sp)
    2e9e:	3ac2                	fld	fs5,48(sp)
    2ea0:	3b22                	fld	fs6,40(sp)
    2ea2:	853e                	mv	a0,a5
    2ea4:	6169                	addi	sp,sp,208
    2ea6:	8082                	ret
		if (strncmp(argv[II], "-c", 2) == 0 || argv[II][0] == 'c') {
    2ea8:	00054603          	lbu	a2,0(a0)
    2eac:	9f2605e3          	beq	a2,s2,2896 <main+0xf0>
		} else if (atol(argv[II]) > 0) {
    2eb0:	00f000ef          	jal	ra,36be <atol>
    2eb4:	0ea05a63          	blez	a0,2fa8 <main+0x802>
			loopstart = atol(argv[II]);
    2eb8:	6008                	ld	a0,0(s0)
	while (II < argc) {
    2eba:	0421                	addi	s0,s0,8
			loopstart = atol(argv[II]);
    2ebc:	003000ef          	jal	ra,36be <atol>
    2ec0:	89aa                	mv	s3,a0
		if (strncmp(argv[II], "-c", 2) == 0 || argv[II][0] == 'c') {
    2ec2:	6008                	ld	a0,0(s0)
    2ec4:	00054683          	lbu	a3,0(a0)
    2ec8:	fd36881b          	addiw	a6,a3,-45
    2ecc:	9c081ee3          	bnez	a6,28a8 <main+0x102>
    2ed0:	00154883          	lbu	a7,1(a0)
    2ed4:	f9d88a9b          	addiw	s5,a7,-99
    2ed8:	9c0a98e3          	bnez	s5,28a8 <main+0x102>
    2edc:	6408                	ld	a0,8(s0)
			continuous = 1;
    2ede:	4b05                	li	s6,1
		if (strncmp(argv[II], "-c", 2) == 0 || argv[II][0] == 'c') {
    2ee0:	00054c03          	lbu	s8,0(a0)
    2ee4:	fd3c0c9b          	addiw	s9,s8,-45
    2ee8:	9e0c83e3          	beqz	s9,28ce <main+0x128>
    2eec:	00054e03          	lbu	t3,0(a0)
    2ef0:	9f2e05e3          	beq	t3,s2,28da <main+0x134>
		} else if (atol(argv[II]) > 0) {
    2ef4:	7ca000ef          	jal	ra,36be <atol>
    2ef8:	0aa05863          	blez	a0,2fa8 <main+0x802>
			loopstart = atol(argv[II]);
    2efc:	6408                	ld	a0,8(s0)
    2efe:	7c0000ef          	jal	ra,36be <atol>
    2f02:	89aa                	mv	s3,a0
		if (strncmp(argv[II], "-c", 2) == 0 || argv[II][0] == 'c') {
    2f04:	6808                	ld	a0,16(s0)
    2f06:	00054e83          	lbu	t4,0(a0)
    2f0a:	fd3e8f1b          	addiw	t5,t4,-45
    2f0e:	9c0f0ee3          	beqz	t5,28ea <main+0x144>
    2f12:	00054783          	lbu	a5,0(a0)
    2f16:	9f2780e3          	beq	a5,s2,28f6 <main+0x150>
		} else if (atol(argv[II]) > 0) {
    2f1a:	7a4000ef          	jal	ra,36be <atol>
    2f1e:	08a05563          	blez	a0,2fa8 <main+0x802>
			loopstart = atol(argv[II]);
    2f22:	6808                	ld	a0,16(s0)
    2f24:	79a000ef          	jal	ra,36be <atol>
    2f28:	89aa                	mv	s3,a0
    2f2a:	b2f9                	j	28f8 <main+0x152>
		printf("C Converted Double Precision Whetstones: %.2f KIPS\n", KIPS);
    2f2c:	42038853          	fcvt.d.s	fa6,ft7
    2f30:	6fc5                	lui	t6,0x11
    2f32:	ba8f8513          	addi	a0,t6,-1112 # 10ba8 <_ctype_+0x1f0>
    2f36:	e20805d3          	fmv.x.d	a1,fa6
    2f3a:	d82ff0ef          	jal	ra,24bc <printf_>
    2f3e:	bf1d                	j	2e74 <main+0x6ce>
	for (I = 1; I <= N2; I++) {
    2f40:	22a50fd3          	fmv.d	ft11,fa0
    2f44:	22a50b53          	fmv.d	fs6,fa0
    2f48:	b6a5                	j	2ab0 <main+0x30a>
		if (strncmp(argv[II], "-c", 2) == 0 || argv[II][0] == 'c') {
    2f4a:	00154783          	lbu	a5,1(a0)
    2f4e:	f9d7849b          	addiw	s1,a5,-99
    2f52:	920481e3          	beqz	s1,2874 <main+0xce>
    2f56:	ba19                	j	286c <main+0xc6>
    2f58:	00054f03          	lbu	t5,0(a0)
    2f5c:	8f2f0fe3          	beq	t5,s2,285a <main+0xb4>
		} else if (atol(argv[II]) > 0) {
    2f60:	75e000ef          	jal	ra,36be <atol>
    2f64:	04a05263          	blez	a0,2fa8 <main+0x802>
			loopstart = atol(argv[II]);
    2f68:	6008                	ld	a0,0(s0)
	while (II < argc) {
    2f6a:	0421                	addi	s0,s0,8
			loopstart = atol(argv[II]);
    2f6c:	752000ef          	jal	ra,36be <atol>
    2f70:	89aa                	mv	s3,a0
	while (II < argc) {
    2f72:	b0f5                	j	285e <main+0xb8>
		printf("Insufficient duration- Increase the LOOP count\n");
    2f74:	6cc5                	lui	s9,0x11
    2f76:	b08c8513          	addi	a0,s9,-1272 # 10b08 <_ctype_+0x150>
    2f7a:	d42ff0ef          	jal	ra,24bc <printf_>
		return(1);
    2f7e:	4785                	li	a5,1
    2f80:	bded                	j	2e7a <main+0x6d4>
		} else if (atol(argv[II]) > 0) {
    2f82:	73c000ef          	jal	ra,36be <atol>
    2f86:	02a05163          	blez	a0,2fa8 <main+0x802>
			loopstart = atol(argv[II]);
    2f8a:	6008                	ld	a0,0(s0)
    2f8c:	732000ef          	jal	ra,36be <atol>
    2f90:	89aa                	mv	s3,a0
    2f92:	b0d5                	j	2876 <main+0xd0>
		if (strncmp(argv[II], "-c", 2) == 0 || argv[II][0] == 'c') {
    2f94:	00154b83          	lbu	s7,1(a0)
    2f98:	f9db8c1b          	addiw	s8,s7,-99
    2f9c:	880c15e3          	bnez	s8,2826 <main+0x80>
			continuous = 1;
    2fa0:	4b05                	li	s6,1
	while (II < argc) {
    2fa2:	0421                	addi	s0,s0,8
    2fa4:	89dff06f          	j	2840 <main+0x9a>
            printf("%s", USAGE);
    2fa8:	69c5                	lui	s3,0x11
    2faa:	6a45                	lui	s4,0x11
    2fac:	ae098593          	addi	a1,s3,-1312 # 10ae0 <_ctype_+0x128>
    2fb0:	b00a0513          	addi	a0,s4,-1280 # 10b00 <_ctype_+0x148>
    2fb4:	d08ff0ef          	jal	ra,24bc <printf_>
			return(1);
    2fb8:	4785                	li	a5,1
    2fba:	b5c1                	j	2e7a <main+0x6d4>
	continuous = 0;
    2fbc:	4b01                	li	s6,0
	loopstart = ITERATIONS;		/* see the note about LOOP below */
    2fbe:	06400993          	li	s3,100
    2fc2:	ba35                	j	28fe <main+0x158>
		X = DSQRT(DEXP(DLOG(X)/T1));
    2fc4:	0fa000ef          	jal	ra,30be <sqrt>
    2fc8:	bb99                	j	2d1e <main+0x578>
    2fca:	0f4000ef          	jal	ra,30be <sqrt>
    2fce:	bb71                	j	2d6a <main+0x5c4>
    2fd0:	0ee000ef          	jal	ra,30be <sqrt>
    2fd4:	bb85                	j	2d44 <main+0x59e>
    2fd6:	0e8000ef          	jal	ra,30be <sqrt>
    2fda:	b525                	j	2e02 <main+0x65c>
    2fdc:	0e2000ef          	jal	ra,30be <sqrt>
    2fe0:	bbfd                	j	2dde <main+0x638>
    2fe2:	0dc000ef          	jal	ra,30be <sqrt>
    2fe6:	bbd1                	j	2dba <main+0x614>
    2fe8:	0d6000ef          	jal	ra,30be <sqrt>
    2fec:	b365                	j	2d94 <main+0x5ee>

0000000000002fee <exp>:
    2fee:	1101                	addi	sp,sp,-32
    2ff0:	a422                	fsd	fs0,8(sp)
    2ff2:	22a50453          	fmv.d	fs0,fa0
    2ff6:	a026                	fsd	fs1,0(sp)
    2ff8:	ec06                	sd	ra,24(sp)
    2ffa:	106000ef          	jal	ra,3100 <__ieee754_exp>
    2ffe:	22a504d3          	fmv.d	fs1,fa0
    3002:	22840553          	fmv.d	fa0,fs0
    3006:	6a0000ef          	jal	ra,36a6 <finite>
    300a:	cd19                	beqz	a0,3028 <exp+0x3a>
    300c:	00001797          	auipc	a5,0x1
    3010:	9747b787          	fld	fa5,-1676(a5) # 3980 <_end+0xc8>
    3014:	a28797d3          	flt.d	a5,fa5,fs0
    3018:	ef99                	bnez	a5,3036 <exp+0x48>
    301a:	00001797          	auipc	a5,0x1
    301e:	96e7b787          	fld	fa5,-1682(a5) # 3988 <_end+0xd0>
    3022:	a2f417d3          	flt.d	a5,fs0,fa5
    3026:	eb85                	bnez	a5,3056 <exp+0x68>
    3028:	60e2                	ld	ra,24(sp)
    302a:	22948553          	fmv.d	fa0,fs1
    302e:	2422                	fld	fs0,8(sp)
    3030:	2482                	fld	fs1,0(sp)
    3032:	6105                	addi	sp,sp,32
    3034:	8082                	ret
    3036:	694000ef          	jal	ra,36ca <__errno>
    303a:	60e2                	ld	ra,24(sp)
    303c:	02200793          	li	a5,34
    3040:	c11c                	sw	a5,0(a0)
    3042:	00001797          	auipc	a5,0x1
    3046:	9367b487          	fld	fs1,-1738(a5) # 3978 <_end+0xc0>
    304a:	22948553          	fmv.d	fa0,fs1
    304e:	2422                	fld	fs0,8(sp)
    3050:	2482                	fld	fs1,0(sp)
    3052:	6105                	addi	sp,sp,32
    3054:	8082                	ret
    3056:	674000ef          	jal	ra,36ca <__errno>
    305a:	02200793          	li	a5,34
    305e:	f20004d3          	fmv.d.x	fs1,zero
    3062:	c11c                	sw	a5,0(a0)
    3064:	b7d1                	j	3028 <exp+0x3a>

0000000000003066 <log>:
    3066:	1101                	addi	sp,sp,-32
    3068:	a422                	fsd	fs0,8(sp)
    306a:	22a50453          	fmv.d	fs0,fa0
    306e:	ec06                	sd	ra,24(sp)
    3070:	2fc000ef          	jal	ra,336c <__ieee754_log>
    3074:	a28427d3          	feq.d	a5,fs0,fs0
    3078:	c395                	beqz	a5,309c <log+0x36>
    307a:	f20007d3          	fmv.d.x	fa5,zero
    307e:	a28797d3          	flt.d	a5,fa5,fs0
    3082:	ef89                	bnez	a5,309c <log+0x36>
    3084:	a2f427d3          	feq.d	a5,fs0,fa5
    3088:	cf91                	beqz	a5,30a4 <log+0x3e>
    308a:	640000ef          	jal	ra,36ca <__errno>
    308e:	02200793          	li	a5,34
    3092:	c11c                	sw	a5,0(a0)
    3094:	00001797          	auipc	a5,0x1
    3098:	8fc7b507          	fld	fa0,-1796(a5) # 3990 <_end+0xd8>
    309c:	60e2                	ld	ra,24(sp)
    309e:	2422                	fld	fs0,8(sp)
    30a0:	6105                	addi	sp,sp,32
    30a2:	8082                	ret
    30a4:	626000ef          	jal	ra,36ca <__errno>
    30a8:	60e2                	ld	ra,24(sp)
    30aa:	2422                	fld	fs0,8(sp)
    30ac:	02100793          	li	a5,33
    30b0:	c11c                	sw	a5,0(a0)
    30b2:	0000e517          	auipc	a0,0xe
    30b6:	b2e50513          	addi	a0,a0,-1234 # 10be0 <_ctype_+0x228>
    30ba:	6105                	addi	sp,sp,32
    30bc:	abe5                	j	36b4 <nan>

00000000000030be <sqrt>:
    30be:	1101                	addi	sp,sp,-32
    30c0:	a422                	fsd	fs0,8(sp)
    30c2:	22a50453          	fmv.d	fs0,fa0
    30c6:	ec06                	sd	ra,24(sp)
    30c8:	a026                	fsd	fs1,0(sp)
    30ca:	4fc000ef          	jal	ra,35c6 <__ieee754_sqrt>
    30ce:	a28427d3          	feq.d	a5,fs0,fs0
    30d2:	c791                	beqz	a5,30de <sqrt+0x20>
    30d4:	f20004d3          	fmv.d.x	fs1,zero
    30d8:	a29417d3          	flt.d	a5,fs0,fs1
    30dc:	e791                	bnez	a5,30e8 <sqrt+0x2a>
    30de:	60e2                	ld	ra,24(sp)
    30e0:	2422                	fld	fs0,8(sp)
    30e2:	2482                	fld	fs1,0(sp)
    30e4:	6105                	addi	sp,sp,32
    30e6:	8082                	ret
    30e8:	5e2000ef          	jal	ra,36ca <__errno>
    30ec:	60e2                	ld	ra,24(sp)
    30ee:	02100793          	li	a5,33
    30f2:	c11c                	sw	a5,0(a0)
    30f4:	1a94f553          	fdiv.d	fa0,fs1,fs1
    30f8:	2422                	fld	fs0,8(sp)
    30fa:	2482                	fld	fs1,0(sp)
    30fc:	6105                	addi	sp,sp,32
    30fe:	8082                	ret

0000000000003100 <__ieee754_exp>:
    3100:	e20507d3          	fmv.x.d	a5,fa0
    3104:	40863637          	lui	a2,0x40863
    3108:	e4160613          	addi	a2,a2,-447 # 40862e41 <STACK+0x4084a251>
    310c:	4207d693          	srai	a3,a5,0x20
    3110:	02169713          	slli	a4,a3,0x21
    3114:	9305                	srli	a4,a4,0x21
    3116:	03f7d513          	srli	a0,a5,0x3f
    311a:	0007a593          	slti	a1,a5,0
    311e:	02e67263          	bgeu	a2,a4,3142 <__ieee754_exp+0x42>
    3122:	7ff00637          	lui	a2,0x7ff00
    3126:	0ac76563          	bltu	a4,a2,31d0 <__ieee754_exp+0xd0>
    312a:	02c69713          	slli	a4,a3,0x2c
    312e:	9331                	srli	a4,a4,0x2c
    3130:	8f5d                	or	a4,a4,a5
    3132:	2701                	sext.w	a4,a4
    3134:	1e071563          	bnez	a4,331e <__ieee754_exp+0x21e>
    3138:	18058963          	beqz	a1,32ca <__ieee754_exp+0x1ca>
    313c:	00000793          	li	a5,0
    3140:	a269                	j	32ca <__ieee754_exp+0x1ca>
    3142:	3fd636b7          	lui	a3,0x3fd63
    3146:	e4268693          	addi	a3,a3,-446 # 3fd62e42 <STACK+0x3fd4a252>
    314a:	18e6e363          	bltu	a3,a4,32d0 <__ieee754_exp+0x1d0>
    314e:	3df006b7          	lui	a3,0x3df00
    3152:	1ad76363          	bltu	a4,a3,32f8 <__ieee754_exp+0x1f8>
    3156:	00000717          	auipc	a4,0x0
    315a:	7e273687          	fld	fa3,2018(a4) # 3938 <_end+0x80>
    315e:	f20787d3          	fmv.d.x	fa5,a5
    3162:	00001717          	auipc	a4,0x1
    3166:	84e73707          	fld	fa4,-1970(a4) # 39b0 <_end+0xf8>
    316a:	00001717          	auipc	a4,0x1
    316e:	84e73007          	fld	ft0,-1970(a4) # 39b8 <_end+0x100>
    3172:	12f7f7d3          	fmul.d	fa5,fa5,fa5
    3176:	00001717          	auipc	a4,0x1
    317a:	84a73507          	fld	fa0,-1974(a4) # 39c0 <_end+0x108>
    317e:	00001717          	auipc	a4,0x1
    3182:	84a73587          	fld	fa1,-1974(a4) # 39c8 <_end+0x110>
    3186:	00001717          	auipc	a4,0x1
    318a:	84a73607          	fld	fa2,-1974(a4) # 39d0 <_end+0x118>
    318e:	02e7f743          	fmadd.d	fa4,fa5,fa4,ft0
    3192:	52e7f743          	fmadd.d	fa4,fa5,fa4,fa0
    3196:	5ae7f743          	fmadd.d	fa4,fa5,fa4,fa1
    319a:	62e7f743          	fmadd.d	fa4,fa5,fa4,fa2
    319e:	f2078653          	fmv.d.x	fa2,a5
    31a2:	62e7f7cb          	fnmsub.d	fa5,fa5,fa4,fa2
    31a6:	12f67753          	fmul.d	fa4,fa2,fa5
    31aa:	00000717          	auipc	a4,0x0
    31ae:	78673607          	fld	fa2,1926(a4) # 3930 <_end+0x78>
    31b2:	0ac7f7d3          	fsub.d	fa5,fa5,fa2
    31b6:	1af777d3          	fdiv.d	fa5,fa4,fa5
    31ba:	f2078753          	fmv.d.x	fa4,a5
    31be:	0ae7f7d3          	fsub.d	fa5,fa5,fa4
    31c2:	0af6f7d3          	fsub.d	fa5,fa3,fa5
    31c6:	e20787d3          	fmv.x.d	a5,fa5
    31ca:	f2078553          	fmv.d.x	fa0,a5
    31ce:	8082                	ret
    31d0:	00000717          	auipc	a4,0x0
    31d4:	7b073787          	fld	fa5,1968(a4) # 3980 <_end+0xc8>
    31d8:	a2a79753          	flt.d	a4,fa5,fa0
    31dc:	14071863          	bnez	a4,332c <__ieee754_exp+0x22c>
    31e0:	00000717          	auipc	a4,0x0
    31e4:	7a873787          	fld	fa5,1960(a4) # 3988 <_end+0xd0>
    31e8:	a2f51753          	flt.d	a4,fa0,fa5
    31ec:	16071963          	bnez	a4,335e <__ieee754_exp+0x25e>
    31f0:	0000d717          	auipc	a4,0xd
    31f4:	04070713          	addi	a4,a4,64 # 10230 <ln2HI>
    31f8:	058e                	slli	a1,a1,0x3
    31fa:	95ba                	add	a1,a1,a4
    31fc:	f20786d3          	fmv.d.x	fa3,a5
    3200:	3198                	fld	fa4,32(a1)
    3202:	00000717          	auipc	a4,0x0
    3206:	79673787          	fld	fa5,1942(a4) # 3998 <_end+0xe0>
    320a:	00000717          	auipc	a4,0x0
    320e:	79673587          	fld	fa1,1942(a4) # 39a0 <_end+0xe8>
    3212:	72f6f7c3          	fmadd.d	fa5,fa3,fa5,fa4
    3216:	00000717          	auipc	a4,0x0
    321a:	79273607          	fld	fa2,1938(a4) # 39a8 <_end+0xf0>
    321e:	c2079753          	fcvt.w.d	a4,fa5,rtz
    3222:	d2070753          	fcvt.d.w	fa4,a4
    3226:	2701                	sext.w	a4,a4
    3228:	6ab775cb          	fnmsub.d	fa1,fa4,fa1,fa3
    322c:	12c776d3          	fmul.d	fa3,fa4,fa2
    3230:	0ad5f7d3          	fsub.d	fa5,fa1,fa3
    3234:	00000697          	auipc	a3,0x0
    3238:	77c6b707          	fld	fa4,1916(a3) # 39b0 <_end+0xf8>
    323c:	00000697          	auipc	a3,0x0
    3240:	7846b087          	fld	ft1,1924(a3) # 39c0 <_end+0x108>
    3244:	00000697          	auipc	a3,0x0
    3248:	7846b007          	fld	ft0,1924(a3) # 39c8 <_end+0x110>
    324c:	00000697          	auipc	a3,0x0
    3250:	7846b507          	fld	fa0,1924(a3) # 39d0 <_end+0x118>
    3254:	e20787d3          	fmv.x.d	a5,fa5
    3258:	00000697          	auipc	a3,0x0
    325c:	7606b787          	fld	fa5,1888(a3) # 39b8 <_end+0x100>
    3260:	f2078653          	fmv.d.x	fa2,a5
    3264:	12c67653          	fmul.d	fa2,fa2,fa2
    3268:	7ae677c3          	fmadd.d	fa5,fa2,fa4,fa5
    326c:	f2078753          	fmv.d.x	fa4,a5
    3270:	0ac7f7c3          	fmadd.d	fa5,fa5,fa2,ft1
    3274:	02c7f7c3          	fmadd.d	fa5,fa5,fa2,ft0
    3278:	52c7f7c3          	fmadd.d	fa5,fa5,fa2,fa0
    327c:	72c7f7cb          	fnmsub.d	fa5,fa5,fa2,fa4
    3280:	12f77753          	fmul.d	fa4,fa4,fa5
    3284:	cf79                	beqz	a4,3362 <__ieee754_exp+0x262>
    3286:	00000797          	auipc	a5,0x0
    328a:	6aa7b607          	fld	fa2,1706(a5) # 3930 <_end+0x78>
    328e:	0af677d3          	fsub.d	fa5,fa2,fa5
    3292:	00000797          	auipc	a5,0x0
    3296:	6a67b607          	fld	fa2,1702(a5) # 3938 <_end+0x80>
    329a:	c0300613          	li	a2,-1021
    329e:	1af77753          	fdiv.d	fa4,fa4,fa5
    32a2:	0ae6f6d3          	fsub.d	fa3,fa3,fa4
    32a6:	0ab6f6d3          	fsub.d	fa3,fa3,fa1
    32aa:	0ad677d3          	fsub.d	fa5,fa2,fa3
    32ae:	e20786d3          	fmv.x.d	a3,fa5
    32b2:	4206d793          	srai	a5,a3,0x20
    32b6:	06c74d63          	blt	a4,a2,3330 <__ieee754_exp+0x230>
    32ba:	0147171b          	slliw	a4,a4,0x14
    32be:	9f3d                	addw	a4,a4,a5
    32c0:	57fd                	li	a5,-1
    32c2:	9381                	srli	a5,a5,0x20
    32c4:	1702                	slli	a4,a4,0x20
    32c6:	8ff5                	and	a5,a5,a3
    32c8:	8fd9                	or	a5,a5,a4
    32ca:	f2078553          	fmv.d.x	fa0,a5
    32ce:	8082                	ret
    32d0:	3ff0a6b7          	lui	a3,0x3ff0a
    32d4:	2b168693          	addi	a3,a3,689 # 3ff0a2b1 <STACK+0x3fef16c1>
    32d8:	f0e6ece3          	bltu	a3,a4,31f0 <__ieee754_exp+0xf0>
    32dc:	0000d717          	auipc	a4,0xd
    32e0:	f5470713          	addi	a4,a4,-172 # 10230 <ln2HI>
    32e4:	058e                	slli	a1,a1,0x3
    32e6:	95ba                	add	a1,a1,a4
    32e8:	2194                	fld	fa3,0(a1)
    32ea:	4705                	li	a4,1
    32ec:	9f09                	subw	a4,a4,a0
    32ee:	0ad575d3          	fsub.d	fa1,fa0,fa3
    32f2:	9f09                	subw	a4,a4,a0
    32f4:	2994                	fld	fa3,16(a1)
    32f6:	bf2d                	j	3230 <__ieee754_exp+0x130>
    32f8:	00000717          	auipc	a4,0x0
    32fc:	6e073787          	fld	fa5,1760(a4) # 39d8 <_end+0x120>
    3300:	02f577d3          	fadd.d	fa5,fa0,fa5
    3304:	00000717          	auipc	a4,0x0
    3308:	63473687          	fld	fa3,1588(a4) # 3938 <_end+0x80>
    330c:	a2f69753          	flt.d	a4,fa3,fa5
    3310:	e40707e3          	beqz	a4,315e <__ieee754_exp+0x5e>
    3314:	02d577d3          	fadd.d	fa5,fa0,fa3
    3318:	e20787d3          	fmv.x.d	a5,fa5
    331c:	b77d                	j	32ca <__ieee754_exp+0x1ca>
    331e:	02a577d3          	fadd.d	fa5,fa0,fa0
    3322:	e20787d3          	fmv.x.d	a5,fa5
    3326:	f2078553          	fmv.d.x	fa0,a5
    332a:	8082                	ret
    332c:	4501                	li	a0,0
    332e:	a4e5                	j	3616 <__math_oflow>
    3330:	3e87071b          	addiw	a4,a4,1000
    3334:	0147171b          	slliw	a4,a4,0x14
    3338:	9f3d                	addw	a4,a4,a5
    333a:	57fd                	li	a5,-1
    333c:	9381                	srli	a5,a5,0x20
    333e:	8ff5                	and	a5,a5,a3
    3340:	1702                	slli	a4,a4,0x20
    3342:	8f5d                	or	a4,a4,a5
    3344:	f2070753          	fmv.d.x	fa4,a4
    3348:	00000797          	auipc	a5,0x0
    334c:	6987b787          	fld	fa5,1688(a5) # 39e0 <_end+0x128>
    3350:	12e7f7d3          	fmul.d	fa5,fa5,fa4
    3354:	e20787d3          	fmv.x.d	a5,fa5
    3358:	f2078553          	fmv.d.x	fa0,a5
    335c:	8082                	ret
    335e:	4501                	li	a0,0
    3360:	a44d                	j	3602 <__math_uflow>
    3362:	00000717          	auipc	a4,0x0
    3366:	5d673687          	fld	fa3,1494(a4) # 3938 <_end+0x80>
    336a:	b581                	j	31aa <__ieee754_exp+0xaa>

000000000000336c <__ieee754_log>:
    336c:	e20507d3          	fmv.x.d	a5,fa0
    3370:	00100637          	lui	a2,0x100
    3374:	4207d713          	srai	a4,a5,0x20
    3378:	0cc75a63          	bge	a4,a2,344c <__ieee754_log+0xe0>
    337c:	02171693          	slli	a3,a4,0x21
    3380:	9285                	srli	a3,a3,0x21
    3382:	8edd                	or	a3,a3,a5
    3384:	2681                	sext.w	a3,a3
    3386:	18068863          	beqz	a3,3516 <__ieee754_log+0x1aa>
    338a:	20074663          	bltz	a4,3596 <__ieee754_log+0x22a>
    338e:	00000717          	auipc	a4,0x0
    3392:	66273787          	fld	fa5,1634(a4) # 39f0 <_end+0x138>
    3396:	12f577d3          	fmul.d	fa5,fa0,fa5
    339a:	7ff006b7          	lui	a3,0x7ff00
    339e:	fca00593          	li	a1,-54
    33a2:	e20787d3          	fmv.x.d	a5,fa5
    33a6:	4207d713          	srai	a4,a5,0x20
    33aa:	0ad75663          	bge	a4,a3,3456 <__ieee754_log+0xea>
    33ae:	00100537          	lui	a0,0x100
    33b2:	fff50893          	addi	a7,a0,-1 # fffff <STACK+0xe740f>
    33b6:	000966b7          	lui	a3,0x96
    33ba:	01177833          	and	a6,a4,a7
    33be:	f646869b          	addiw	a3,a3,-156
    33c2:	00100637          	lui	a2,0x100
    33c6:	00d806bb          	addw	a3,a6,a3
    33ca:	8ef1                	and	a3,a3,a2
    33cc:	3ff00637          	lui	a2,0x3ff00
    33d0:	8e35                	xor	a2,a2,a3
    33d2:	4147571b          	sraiw	a4,a4,0x14
    33d6:	00c86633          	or	a2,a6,a2
    33da:	c017071b          	addiw	a4,a4,-1023
    33de:	9f2d                	addw	a4,a4,a1
    33e0:	02061593          	slli	a1,a2,0x20
    33e4:	567d                	li	a2,-1
    33e6:	9201                	srli	a2,a2,0x20
    33e8:	8ff1                	and	a5,a5,a2
    33ea:	00b7e633          	or	a2,a5,a1
    33ee:	f2060753          	fmv.d.x	fa4,a2
    33f2:	0028051b          	addiw	a0,a6,2
    33f6:	01157533          	and	a0,a0,a7
    33fa:	4146d69b          	sraiw	a3,a3,0x14
    33fe:	9eb9                	addw	a3,a3,a4
    3400:	00000797          	auipc	a5,0x0
    3404:	5387b787          	fld	fa5,1336(a5) # 3938 <_end+0x80>
    3408:	0005059b          	sext.w	a1,a0
    340c:	4889                	li	a7,2
    340e:	0af777d3          	fsub.d	fa5,fa4,fa5
    3412:	0006851b          	sext.w	a0,a3
    3416:	04b8c563          	blt	a7,a1,3460 <__ieee754_log+0xf4>
    341a:	f2000753          	fmv.d.x	fa4,zero
    341e:	a2e7a7d3          	feq.d	a5,fa5,fa4
    3422:	10078363          	beqz	a5,3528 <__ieee754_log+0x1bc>
    3426:	22e70553          	fmv.d	fa0,fa4
    342a:	16050263          	beqz	a0,358e <__ieee754_log+0x222>
    342e:	d20687d3          	fcvt.d.w	fa5,a3
    3432:	00000797          	auipc	a5,0x0
    3436:	5767b507          	fld	fa0,1398(a5) # 39a8 <_end+0xf0>
    343a:	00000797          	auipc	a5,0x0
    343e:	5667b707          	fld	fa4,1382(a5) # 39a0 <_end+0xe8>
    3442:	12a7f553          	fmul.d	fa0,fa5,fa0
    3446:	52e7f543          	fmadd.d	fa0,fa5,fa4,fa0
    344a:	8082                	ret
    344c:	7ff006b7          	lui	a3,0x7ff00
    3450:	4581                	li	a1,0
    3452:	f4d74ee3          	blt	a4,a3,33ae <__ieee754_log+0x42>
    3456:	f20787d3          	fmv.d.x	fa5,a5
    345a:	02f7f553          	fadd.d	fa0,fa5,fa5
    345e:	8082                	ret
    3460:	00000797          	auipc	a5,0x0
    3464:	4d07b507          	fld	fa0,1232(a5) # 3930 <_end+0x78>
    3468:	02a7f553          	fadd.d	fa0,fa5,fa0
    346c:	00000797          	auipc	a5,0x0
    3470:	5ac7b687          	fld	fa3,1452(a5) # 3a18 <_end+0x160>
    3474:	00000797          	auipc	a5,0x0
    3478:	5ac7b207          	fld	ft4,1452(a5) # 3a20 <_end+0x168>
    347c:	00000797          	auipc	a5,0x0
    3480:	5ac7b107          	fld	ft2,1452(a5) # 3a28 <_end+0x170>
    3484:	00000797          	auipc	a5,0x0
    3488:	57c7b707          	fld	fa4,1404(a5) # 3a00 <_end+0x148>
    348c:	00000797          	auipc	a5,0x0
    3490:	57c7b187          	fld	ft3,1404(a5) # 3a08 <_end+0x150>
    3494:	00000797          	auipc	a5,0x0
    3498:	59c7b007          	fld	ft0,1436(a5) # 3a30 <_end+0x178>
    349c:	1aa7f553          	fdiv.d	fa0,fa5,fa0
    34a0:	00000797          	auipc	a5,0x0
    34a4:	5707b087          	fld	ft1,1392(a5) # 3a10 <_end+0x158>
    34a8:	fff9f637          	lui	a2,0xfff9f
    34ac:	0006c7b7          	lui	a5,0x6c
    34b0:	b866061b          	addiw	a2,a2,-1146
    34b4:	8517879b          	addiw	a5,a5,-1967
    34b8:	0106063b          	addw	a2,a2,a6
    34bc:	4107883b          	subw	a6,a5,a6
    34c0:	01066633          	or	a2,a2,a6
    34c4:	2601                	sext.w	a2,a2
    34c6:	d20682d3          	fcvt.d.w	ft5,a3
    34ca:	12a575d3          	fmul.d	fa1,fa0,fa0
    34ce:	12b5f653          	fmul.d	fa2,fa1,fa1
    34d2:	22d676c3          	fmadd.d	fa3,fa2,fa3,ft4
    34d6:	1ae67743          	fmadd.d	fa4,fa2,fa4,ft3
    34da:	12c6f6c3          	fmadd.d	fa3,fa3,fa2,ft2
    34de:	0ac77743          	fmadd.d	fa4,fa4,fa2,ft1
    34e2:	02c6f6c3          	fmadd.d	fa3,fa3,fa2,ft0
    34e6:	12b6f6d3          	fmul.d	fa3,fa3,fa1
    34ea:	6ac77743          	fmadd.d	fa4,fa4,fa2,fa3
    34ee:	06c05d63          	blez	a2,3568 <__ieee754_log+0x1fc>
    34f2:	00000797          	auipc	a5,0x0
    34f6:	3e67b687          	fld	fa3,998(a5) # 38d8 <_end+0x20>
    34fa:	12d7f6d3          	fmul.d	fa3,fa5,fa3
    34fe:	12f6f6d3          	fmul.d	fa3,fa3,fa5
    3502:	02d77753          	fadd.d	fa4,fa4,fa3
    3506:	12a77753          	fmul.d	fa4,fa4,fa0
    350a:	ed49                	bnez	a0,35a4 <__ieee754_log+0x238>
    350c:	0ae6f553          	fsub.d	fa0,fa3,fa4
    3510:	0aa7f553          	fsub.d	fa0,fa5,fa0
    3514:	8082                	ret
    3516:	f2000553          	fmv.d.x	fa0,zero
    351a:	00000797          	auipc	a5,0x0
    351e:	4ce7b787          	fld	fa5,1230(a5) # 39e8 <_end+0x130>
    3522:	1aa7f553          	fdiv.d	fa0,fa5,fa0
    3526:	8082                	ret
    3528:	00000797          	auipc	a5,0x0
    352c:	4d07b507          	fld	fa0,1232(a5) # 39f8 <_end+0x140>
    3530:	00000797          	auipc	a5,0x0
    3534:	3a87b687          	fld	fa3,936(a5) # 38d8 <_end+0x20>
    3538:	12f7f753          	fmul.d	fa4,fa5,fa5
    353c:	6aa7f54b          	fnmsub.d	fa0,fa5,fa0,fa3
    3540:	12a77753          	fmul.d	fa4,fa4,fa0
    3544:	c531                	beqz	a0,3590 <__ieee754_log+0x224>
    3546:	d20686d3          	fcvt.d.w	fa3,a3
    354a:	00000797          	auipc	a5,0x0
    354e:	45e7b507          	fld	fa0,1118(a5) # 39a8 <_end+0xf0>
    3552:	00000797          	auipc	a5,0x0
    3556:	44e7b607          	fld	fa2,1102(a5) # 39a0 <_end+0xe8>
    355a:	72a6f54b          	fnmsub.d	fa0,fa3,fa0,fa4
    355e:	0af57553          	fsub.d	fa0,fa0,fa5
    3562:	52c6f547          	fmsub.d	fa0,fa3,fa2,fa0
    3566:	8082                	ret
    3568:	0ae7f753          	fsub.d	fa4,fa5,fa4
    356c:	12a77753          	fmul.d	fa4,fa4,fa0
    3570:	c105                	beqz	a0,3590 <__ieee754_log+0x224>
    3572:	00000797          	auipc	a5,0x0
    3576:	4367b507          	fld	fa0,1078(a5) # 39a8 <_end+0xf0>
    357a:	72a2f54b          	fnmsub.d	fa0,ft5,fa0,fa4
    357e:	00000797          	auipc	a5,0x0
    3582:	4227b707          	fld	fa4,1058(a5) # 39a0 <_end+0xe8>
    3586:	0af57553          	fsub.d	fa0,fa0,fa5
    358a:	52e2f547          	fmsub.d	fa0,ft5,fa4,fa0
    358e:	8082                	ret
    3590:	0ae7f553          	fsub.d	fa0,fa5,fa4
    3594:	8082                	ret
    3596:	0aa577d3          	fsub.d	fa5,fa0,fa0
    359a:	f2000553          	fmv.d.x	fa0,zero
    359e:	1aa7f553          	fdiv.d	fa0,fa5,fa0
    35a2:	8082                	ret
    35a4:	00000797          	auipc	a5,0x0
    35a8:	4047b507          	fld	fa0,1028(a5) # 39a8 <_end+0xf0>
    35ac:	72a2f543          	fmadd.d	fa0,ft5,fa0,fa4
    35b0:	00000797          	auipc	a5,0x0
    35b4:	3f07b607          	fld	fa2,1008(a5) # 39a0 <_end+0xe8>
    35b8:	0aa6f553          	fsub.d	fa0,fa3,fa0
    35bc:	0af57553          	fsub.d	fa0,fa0,fa5
    35c0:	52c2f547          	fmsub.d	fa0,ft5,fa2,fa0
    35c4:	8082                	ret

00000000000035c6 <__ieee754_sqrt>:
    35c6:	5a057553          	fsqrt.d	fa0,fa0
    35ca:	8082                	ret

00000000000035cc <with_errno>:
    35cc:	1101                	addi	sp,sp,-32
    35ce:	e822                	sd	s0,16(sp)
    35d0:	ec06                	sd	ra,24(sp)
    35d2:	842a                	mv	s0,a0
    35d4:	a42a                	fsd	fa0,8(sp)
    35d6:	0f4000ef          	jal	ra,36ca <__errno>
    35da:	60e2                	ld	ra,24(sp)
    35dc:	c100                	sw	s0,0(a0)
    35de:	6442                	ld	s0,16(sp)
    35e0:	2522                	fld	fa0,8(sp)
    35e2:	6105                	addi	sp,sp,32
    35e4:	8082                	ret

00000000000035e6 <xflow>:
    35e6:	22a507d3          	fmv.d	fa5,fa0
    35ea:	1141                	addi	sp,sp,-16
    35ec:	c119                	beqz	a0,35f2 <xflow+0xc>
    35ee:	22a517d3          	fneg.d	fa5,fa0
    35f2:	a43e                	fsd	fa5,8(sp)
    35f4:	27a2                	fld	fa5,8(sp)
    35f6:	02200513          	li	a0,34
    35fa:	12f57553          	fmul.d	fa0,fa0,fa5
    35fe:	0141                	addi	sp,sp,16
    3600:	b7f1                	j	35cc <with_errno>

0000000000003602 <__math_uflow>:
    3602:	00000797          	auipc	a5,0x0
    3606:	4367b507          	fld	fa0,1078(a5) # 3a38 <_end+0x180>
    360a:	bff1                	j	35e6 <xflow>

000000000000360c <__math_may_uflow>:
    360c:	00000797          	auipc	a5,0x0
    3610:	4347b507          	fld	fa0,1076(a5) # 3a40 <_end+0x188>
    3614:	bfc9                	j	35e6 <xflow>

0000000000003616 <__math_oflow>:
    3616:	00000797          	auipc	a5,0x0
    361a:	4327b507          	fld	fa0,1074(a5) # 3a48 <_end+0x190>
    361e:	b7e1                	j	35e6 <xflow>

0000000000003620 <__math_divzero>:
    3620:	1141                	addi	sp,sp,-16
    3622:	ed19                	bnez	a0,3640 <__math_divzero+0x20>
    3624:	00000797          	auipc	a5,0x0
    3628:	3147b787          	fld	fa5,788(a5) # 3938 <_end+0x80>
    362c:	a43e                	fsd	fa5,8(sp)
    362e:	2522                	fld	fa0,8(sp)
    3630:	f20007d3          	fmv.d.x	fa5,zero
    3634:	02200513          	li	a0,34
    3638:	1af57553          	fdiv.d	fa0,fa0,fa5
    363c:	0141                	addi	sp,sp,16
    363e:	b779                	j	35cc <with_errno>
    3640:	00000797          	auipc	a5,0x0
    3644:	3107b787          	fld	fa5,784(a5) # 3950 <_end+0x98>
    3648:	a43e                	fsd	fa5,8(sp)
    364a:	2522                	fld	fa0,8(sp)
    364c:	f20007d3          	fmv.d.x	fa5,zero
    3650:	02200513          	li	a0,34
    3654:	1af57553          	fdiv.d	fa0,fa0,fa5
    3658:	0141                	addi	sp,sp,16
    365a:	bf8d                	j	35cc <with_errno>

000000000000365c <__math_invalid>:
    365c:	0aa577d3          	fsub.d	fa5,fa0,fa0
    3660:	a2a527d3          	feq.d	a5,fa0,fa0
    3664:	1af7f553          	fdiv.d	fa0,fa5,fa5
    3668:	c781                	beqz	a5,3670 <__math_invalid+0x14>
    366a:	02100513          	li	a0,33
    366e:	bfb9                	j	35cc <with_errno>
    3670:	8082                	ret

0000000000003672 <__math_check_uflow>:
    3672:	f20007d3          	fmv.d.x	fa5,zero
    3676:	a2f527d3          	feq.d	a5,fa0,fa5
    367a:	e391                	bnez	a5,367e <__math_check_uflow+0xc>
    367c:	8082                	ret
    367e:	02200513          	li	a0,34
    3682:	b7a9                	j	35cc <with_errno>

0000000000003684 <__math_check_oflow>:
    3684:	22a527d3          	fabs.d	fa5,fa0
    3688:	00000797          	auipc	a5,0x0
    368c:	2387b707          	fld	fa4,568(a5) # 38c0 <_end+0x8>
    3690:	00102773          	frflags	a4
    3694:	a2f717d3          	flt.d	a5,fa4,fa5
    3698:	00171073          	fsflags	a4
    369c:	e391                	bnez	a5,36a0 <__math_check_oflow+0x1c>
    369e:	8082                	ret
    36a0:	02200513          	li	a0,34
    36a4:	b725                	j	35cc <with_errno>

00000000000036a6 <finite>:
    36a6:	e2051553          	fclass.d	a0,fa0
    36aa:	38157513          	andi	a0,a0,897
    36ae:	00153513          	seqz	a0,a0
    36b2:	8082                	ret

00000000000036b4 <nan>:
    36b4:	00000797          	auipc	a5,0x0
    36b8:	39c7b507          	fld	fa0,924(a5) # 3a50 <_end+0x198>
    36bc:	8082                	ret

00000000000036be <atol>:
    36be:	4629                	li	a2,10
    36c0:	4581                	li	a1,0
    36c2:	a2d1                	j	3886 <strtol>

00000000000036c4 <_atol_r>:
    36c4:	46a9                	li	a3,10
    36c6:	4601                	li	a2,0
    36c8:	a2a5                	j	3830 <_strtol_r>

00000000000036ca <__errno>:
    36ca:	0000d517          	auipc	a0,0xd
    36ce:	2de53503          	ld	a0,734(a0) # 109a8 <_impure_ptr>
    36d2:	8082                	ret

00000000000036d4 <_strtol_l.part.0>:
    36d4:	1141                	addi	sp,sp,-16
    36d6:	e422                	sd	s0,8(sp)
    36d8:	e026                	sd	s1,0(sp)
    36da:	82aa                	mv	t0,a0
    36dc:	882e                	mv	a6,a1
    36de:	0000d897          	auipc	a7,0xd
    36e2:	2db88893          	addi	a7,a7,731 # 109b9 <_ctype_+0x1>
    36e6:	00084703          	lbu	a4,0(a6)
    36ea:	8342                	mv	t1,a6
    36ec:	0805                	addi	a6,a6,1
    36ee:	00e887b3          	add	a5,a7,a4
    36f2:	0007c783          	lbu	a5,0(a5)
    36f6:	8ba1                	andi	a5,a5,8
    36f8:	f7fd                	bnez	a5,36e6 <_strtol_l.part.0+0x12>
    36fa:	02d00513          	li	a0,45
    36fe:	0007079b          	sext.w	a5,a4
    3702:	0ca70e63          	beq	a4,a0,37de <_strtol_l.part.0+0x10a>
    3706:	02b00713          	li	a4,43
    370a:	08e78563          	beq	a5,a4,3794 <_strtol_l.part.0+0xc0>
    370e:	547d                	li	s0,-1
    3710:	8005                	srli	s0,s0,0x1
    3712:	4481                	li	s1,0
    3714:	cac1                	beqz	a3,37a4 <_strtol_l.part.0+0xd0>
    3716:	4741                	li	a4,16
    3718:	83b6                	mv	t2,a3
    371a:	0ce68c63          	beq	a3,a4,37f2 <_strtol_l.part.0+0x11e>
    371e:	02747fb3          	remu	t6,s0,t2
    3722:	4e25                	li	t3,9
    3724:	fd07871b          	addiw	a4,a5,-48
    3728:	4881                	li	a7,0
    372a:	4501                	li	a0,0
    372c:	4f65                	li	t5,25
    372e:	0007831b          	sext.w	t1,a5
    3732:	02745eb3          	divu	t4,s0,t2
    3736:	2f81                	sext.w	t6,t6
    3738:	02ee6963          	bltu	t3,a4,376a <_strtol_l.part.0+0x96>
    373c:	87ba                	mv	a5,a4
    373e:	02d7de63          	bge	a5,a3,377a <_strtol_l.part.0+0xa6>
    3742:	0608c863          	bltz	a7,37b2 <_strtol_l.part.0+0xde>
    3746:	58fd                	li	a7,-1
    3748:	00aee863          	bltu	t4,a0,3758 <_strtol_l.part.0+0x84>
    374c:	06ae8c63          	beq	t4,a0,37c4 <_strtol_l.part.0+0xf0>
    3750:	4885                	li	a7,1
    3752:	02750533          	mul	a0,a0,t2
    3756:	953e                	add	a0,a0,a5
    3758:	00084783          	lbu	a5,0(a6)
    375c:	0805                	addi	a6,a6,1
    375e:	fd07871b          	addiw	a4,a5,-48
    3762:	0007831b          	sext.w	t1,a5
    3766:	fcee7be3          	bgeu	t3,a4,373c <_strtol_l.part.0+0x68>
    376a:	fbf3071b          	addiw	a4,t1,-65
    376e:	04ef6463          	bltu	t5,a4,37b6 <_strtol_l.part.0+0xe2>
    3772:	fc97879b          	addiw	a5,a5,-55
    3776:	fcd7c6e3          	blt	a5,a3,3742 <_strtol_l.part.0+0x6e>
    377a:	0408c863          	bltz	a7,37ca <_strtol_l.part.0+0xf6>
    377e:	c099                	beqz	s1,3784 <_strtol_l.part.0+0xb0>
    3780:	40a00533          	neg	a0,a0
    3784:	c601                	beqz	a2,378c <_strtol_l.part.0+0xb8>
    3786:	06089463          	bnez	a7,37ee <_strtol_l.part.0+0x11a>
    378a:	e20c                	sd	a1,0(a2)
    378c:	6422                	ld	s0,8(sp)
    378e:	6482                	ld	s1,0(sp)
    3790:	0141                	addi	sp,sp,16
    3792:	8082                	ret
    3794:	547d                	li	s0,-1
    3796:	00084783          	lbu	a5,0(a6)
    379a:	8005                	srli	s0,s0,0x1
    379c:	00230813          	addi	a6,t1,2
    37a0:	4481                	li	s1,0
    37a2:	fab5                	bnez	a3,3716 <_strtol_l.part.0+0x42>
    37a4:	03000713          	li	a4,48
    37a8:	06e78963          	beq	a5,a4,381a <_strtol_l.part.0+0x146>
    37ac:	43a9                	li	t2,10
    37ae:	46a9                	li	a3,10
    37b0:	b7bd                	j	371e <_strtol_l.part.0+0x4a>
    37b2:	58fd                	li	a7,-1
    37b4:	b755                	j	3758 <_strtol_l.part.0+0x84>
    37b6:	f9f3031b          	addiw	t1,t1,-97
    37ba:	fc6f60e3          	bltu	t5,t1,377a <_strtol_l.part.0+0xa6>
    37be:	fa97879b          	addiw	a5,a5,-87
    37c2:	bfb5                	j	373e <_strtol_l.part.0+0x6a>
    37c4:	f8ffcae3          	blt	t6,a5,3758 <_strtol_l.part.0+0x84>
    37c8:	b761                	j	3750 <_strtol_l.part.0+0x7c>
    37ca:	02200793          	li	a5,34
    37ce:	00f2a023          	sw	a5,0(t0)
    37d2:	8522                	mv	a0,s0
    37d4:	de45                	beqz	a2,378c <_strtol_l.part.0+0xb8>
    37d6:	fff80593          	addi	a1,a6,-1
    37da:	8522                	mv	a0,s0
    37dc:	b77d                	j	378a <_strtol_l.part.0+0xb6>
    37de:	547d                	li	s0,-1
    37e0:	00084783          	lbu	a5,0(a6)
    37e4:	147e                	slli	s0,s0,0x3f
    37e6:	00230813          	addi	a6,t1,2
    37ea:	4485                	li	s1,1
    37ec:	b725                	j	3714 <_strtol_l.part.0+0x40>
    37ee:	842a                	mv	s0,a0
    37f0:	b7dd                	j	37d6 <_strtol_l.part.0+0x102>
    37f2:	03000713          	li	a4,48
    37f6:	00e79a63          	bne	a5,a4,380a <_strtol_l.part.0+0x136>
    37fa:	00084703          	lbu	a4,0(a6)
    37fe:	05800513          	li	a0,88
    3802:	0df77713          	andi	a4,a4,223
    3806:	00a70463          	beq	a4,a0,380e <_strtol_l.part.0+0x13a>
    380a:	43c1                	li	t2,16
    380c:	bf09                	j	371e <_strtol_l.part.0+0x4a>
    380e:	00184783          	lbu	a5,1(a6)
    3812:	43c1                	li	t2,16
    3814:	0809                	addi	a6,a6,2
    3816:	46c1                	li	a3,16
    3818:	b719                	j	371e <_strtol_l.part.0+0x4a>
    381a:	00084703          	lbu	a4,0(a6)
    381e:	05800693          	li	a3,88
    3822:	0df77713          	andi	a4,a4,223
    3826:	fed704e3          	beq	a4,a3,380e <_strtol_l.part.0+0x13a>
    382a:	43a1                	li	t2,8
    382c:	46a1                	li	a3,8
    382e:	bdc5                	j	371e <_strtol_l.part.0+0x4a>

0000000000003830 <_strtol_r>:
    3830:	4705                	li	a4,1
    3832:	00e68763          	beq	a3,a4,3840 <_strtol_r+0x10>
    3836:	02400713          	li	a4,36
    383a:	00d76363          	bltu	a4,a3,3840 <_strtol_r+0x10>
    383e:	bd59                	j	36d4 <_strtol_l.part.0>
    3840:	1141                	addi	sp,sp,-16
    3842:	e406                	sd	ra,8(sp)
    3844:	e87ff0ef          	jal	ra,36ca <__errno>
    3848:	60a2                	ld	ra,8(sp)
    384a:	47d9                	li	a5,22
    384c:	c11c                	sw	a5,0(a0)
    384e:	4501                	li	a0,0
    3850:	0141                	addi	sp,sp,16
    3852:	8082                	ret

0000000000003854 <strtol_l>:
    3854:	4785                	li	a5,1
    3856:	00f60e63          	beq	a2,a5,3872 <strtol_l+0x1e>
    385a:	02400793          	li	a5,36
    385e:	00c7ea63          	bltu	a5,a2,3872 <strtol_l+0x1e>
    3862:	86b2                	mv	a3,a2
    3864:	862e                	mv	a2,a1
    3866:	85aa                	mv	a1,a0
    3868:	0000d517          	auipc	a0,0xd
    386c:	14053503          	ld	a0,320(a0) # 109a8 <_impure_ptr>
    3870:	b595                	j	36d4 <_strtol_l.part.0>
    3872:	1141                	addi	sp,sp,-16
    3874:	e406                	sd	ra,8(sp)
    3876:	e55ff0ef          	jal	ra,36ca <__errno>
    387a:	60a2                	ld	ra,8(sp)
    387c:	47d9                	li	a5,22
    387e:	c11c                	sw	a5,0(a0)
    3880:	4501                	li	a0,0
    3882:	0141                	addi	sp,sp,16
    3884:	8082                	ret

0000000000003886 <strtol>:
    3886:	4785                	li	a5,1
    3888:	00f60e63          	beq	a2,a5,38a4 <strtol+0x1e>
    388c:	02400793          	li	a5,36
    3890:	00c7ea63          	bltu	a5,a2,38a4 <strtol+0x1e>
    3894:	86b2                	mv	a3,a2
    3896:	862e                	mv	a2,a1
    3898:	85aa                	mv	a1,a0
    389a:	0000d517          	auipc	a0,0xd
    389e:	10e53503          	ld	a0,270(a0) # 109a8 <_impure_ptr>
    38a2:	bd0d                	j	36d4 <_strtol_l.part.0>
    38a4:	1141                	addi	sp,sp,-16
    38a6:	e406                	sd	ra,8(sp)
    38a8:	e23ff0ef          	jal	ra,36ca <__errno>
    38ac:	60a2                	ld	ra,8(sp)
    38ae:	47d9                	li	a5,22
    38b0:	c11c                	sw	a5,0(a0)
    38b2:	4501                	li	a0,0
    38b4:	0141                	addi	sp,sp,16
    38b6:	8082                	ret

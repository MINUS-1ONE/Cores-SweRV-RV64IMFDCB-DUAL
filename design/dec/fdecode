.definition

# RV32F
FLW  =       [.................010.....0000111]
FSW  =       [.................010.....0100111]
FMV_S_X  =   [111100000000.....000.....1010011]
FCVT_S_W  =  [110100000000.............1010011]
FCVT_S_WU  = [110100000001.............1010011]
FMV_X_S  =   [111000000000.....000.....1010011]
FCLASS_S  =  [111000000000.....001.....1010011]
FCVT_W_S  =  [110000000000.............1010011]
FCVT_WU_S  = [110000000001.............1010011]
FEQ_S  =     [1010000..........010.....1010011]
FLT_S  =     [1010000..........001.....1010011]
FLE_S  =     [1010000..........000.....1010011]
FSGNJ_S  =   [0010000..........000.....1010011]
FSGNJN_S  =  [0010000..........001.....1010011]
FSGNJX_S  =  [0010000..........010.....1010011]
FMIN_S  =    [0010100..........000.....1010011]
FMAX_S  =    [0010100..........001.....1010011]
FADD_S  =    [0000000..................1010011]
FSUB_S  =    [0000100..................1010011]
FMUL_S  =    [0001000..................1010011]
FMADD_S  =   [.....00..................1000011]
FMSUB_S  =   [.....00..................1000111]
FNMADD_S  =  [.....00..................1001111]
FNMSUB_S  =  [.....00..................1001011]
FDIV_S  =    [0001100..................1010011]
FSQRT_S  =   [010110000000.............1010011]

# RV64F
FCVT_L_S =   [110000000010.............1010011]
FCVT_LU_S =  [110000000011.............1010011]
FCVT_S_L =   [110100000010.............1010011]
FCVT_S_LU =  [110100000011.............1010011]

# RV32D
FLD  =       [.................011.....0000111]
FSD  =       [.................011.....0100111]
FCVT_D_W  =  [110100100000.............1010011]
FCVT_D_WU  = [110100100001.............1010011]
FCLASS_D  =  [111000100000.....001.....1010011]
FCVT_W_D  =  [110000100000.............1010011]
FCVT_WU_D  = [110000100001.............1010011]
FCVT_S_D =   [010000000001.............1010011]
FCVT_D_S =   [010000100000.............1010011]
FEQ_D  =     [1010001..........010.....1010011]
FLT_D  =     [1010001..........001.....1010011]
FLE_D  =     [1010001..........000.....1010011]
FSGNJ_D  =   [0010001..........000.....1010011]
FSGNJN_D  =  [0010001..........001.....1010011]
FSGNJX_D  =  [0010001..........010.....1010011]
FMIN_D  =    [0010101..........000.....1010011]
FMAX_D  =    [0010101..........001.....1010011]
FADD_D  =    [0000001..................1010011]
FSUB_D  =    [0000101..................1010011]
FMUL_D  =    [0001001..................1010011]
FMADD_D  =   [.....01..................1000011]
FMSUB_D  =   [.....01..................1000111]
FNMADD_D  =  [.....01..................1001111]
FNMSUB_D  =  [.....01..................1001011]
FDIV_D  =    [0001101..................1010011]
FSQRT_D  =   [010110100000.............1010011]

# RV64D
FCVT_L_D =   [110000100010.............1010011]
FCVT_LU_D =  [110000100011.............1010011]
FMV_X_D =    [111000100000.....000.....1010011]
FMV_D_X =    [111100100000.....000.....1010011]
FCVT_D_L =   [110100100010.............1010011]
FCVT_D_LU =  [110100100011.............1010011]

.input

rv64i = {
        i[31]
        i[30]
        i[29]
        i[28]
        i[27]
        i[26]
        i[25]
        i[24]
        i[23]
        i[22]
        i[21]
        i[20]
        i[19]
        i[18]
        i[17]
        i[16]
        i[15]
        i[14]
        i[13]
        i[12]
        i[11]
        i[10]
        i[9]
        i[8]
        i[7]
        i[6]
        i[5]
        i[4]
        i[3]
        i[2]
        i[1]
        i[0]
}


.output

rv64i = {
        ldst
        wen
        ren1
        ren2 
        ren3 
        swap12
        swap23 
        fromint
        toint
        fastpipe
        fma
        div
        sqrt
        wflags
}
  
.decode
# spec 规定FMV是有可能引起异常的，考虑修改wflags
# 浮点load/store指令的基址由整数寄存器提供
rv32i[FLW]       = { ldst wen }
rv32i[FSW]       = { ldst ren2 swap12  toint }
rv32i[FMV_S_X]   = { wen fromint }
rv32i[FCVT_S_W]  = { wen fromint wflags }
rv32i[FCVT_S_WU] = { wen fromint wflags }
rv32i[FMV_X_S]   = { ren1 toint }
rv32i[FCLASS_S]  = { ren1 toint }
rv32i[FCVT_W_S]  = { ren1 toint wflags }
rv32i[FCVT_WU_S] = { ren1 toint wflags }
rv32i[FEQ_S]     = { ren1 ren2 toint wflags }
rv32i[FLT_S]     = { ren1 ren2 toint wflags }
rv32i[FLE_S]     = { ren1 ren2 toint wflags }
rv32i[FSGNJ_S]   = { wen ren1 ren2 fastpipe }
rv32i[FSGNJN_S]  = { wen ren1 ren2 fastpipe }
rv32i[FSGNJX_S]  = { wen ren1 ren2 fastpipe }
rv32i[FMIN_S]    = { wen ren1 ren2 fastpipe wflags }
rv32i[FMAX_S]    = { wen ren1 ren2 fastpipe wflags }
rv32i[FADD_S]    = { wen ren1 ren2 swap23 fma wflags }
rv32i[FSUB_S]    = { wen ren1 ren2 swap23 fma wflags }
rv32i[FMUL_S]    = { wen ren1 ren2 fma wflags }
rv32i[FMADD_S]   = { wen ren1 ren2 ren3 fma wflags }
rv32i[FMSUB_S]   = { wen ren1 ren2 ren3 fma wflags }
rv32i[FNMADD_S]  = { wen ren1 ren2 ren3 fma wflags }
rv32i[FNMSUB_S]  = { wen ren1 ren2 ren3 fma wflags }
rv32i[FDIV_S]    = { wen ren1 ren2 div wflags }
rv32i[FSQRT_S]   = { wen ren1 sqrt wflags }

.end
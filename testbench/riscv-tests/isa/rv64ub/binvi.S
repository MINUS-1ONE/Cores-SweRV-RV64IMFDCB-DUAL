# See LICENSE for license details.

#*****************************************************************************
# binvi.S
#-----------------------------------------------------------------------------
#
# Test binvi instruction.
#

#include "riscv_test.h"
#include "test_macros.h"

RVTEST_RV64U
RVTEST_CODE_BEGIN

    TEST_IMM_OP(2, binvi, 0x10fd3dedadea519d, 0x10fd3dedadea5195, 0x3);
    TEST_IMM_OP(3, binvi, 0xbd295ce2daffbec1, 0xbd295ce2d2ffbec1, 0x1b);
    TEST_IMM_OP(4, binvi, 0xc9649f05a8e1a8ba, 0xc9649f05a8e1a8bb, 0x0);
    TEST_IMM_OP(5, binvi, 0x3541291848c99fc3, 0x3541291848c99fcb, 0x3);
    TEST_IMM_OP(6, binvi, 0x10a24740461dd24f, 0x10a24740461d524f, 0xf);
    TEST_IMM_OP(7, binvi, 0x546b0e54528a90af, 0x546b0e54528a10af, 0xf);
    TEST_IMM_OP(8, binvi, 0x73a92fd4e19bf3c3, 0x73a92fd4e19bfbc3, 0xb);
    TEST_IMM_OP(9, binvi, 0x82f6747f787af2c0, 0x82f6747f707af2c0, 0x1b);
    TEST_IMM_OP(10, binvi, 0xf5adb41aa47d1059, 0xf5adb41aa47d105b, 0x1);
    TEST_IMM_OP(11, binvi, 0xdf7f3844123bcc23, 0xdf7f3844121bcc23, 0x15);
    TEST_IMM_OP(12, binvi, 0x0000000080000001, 0x1, 0x1f);
    TEST_IMM_OP(13, binvi, 0x0000000000008002, 0x2, 0xf);
    TEST_IMM_OP(14, binvi, 0x0000000000800004, 0x4, 0x17);
    TEST_IMM_OP(15, binvi, 0x0000000008000008, 0x8, 0x1b);
    TEST_IMM_OP(16, binvi, 0x0000000020000010, 0x10, 0x1d);
    TEST_IMM_OP(17, binvi, 0x0000000040000020, 0x20, 0x1e);
    TEST_IMM_OP(18, binvi, 0x0000000000000041, 0x40, 0x0);
    TEST_IMM_OP(19, binvi, 0x0000000000010080, 0x80, 0x10);
    TEST_IMM_OP(20, binvi, 0x0000000000000000, 0x100, 0x8);
    TEST_IMM_OP(21, binvi, 0x0000000000000210, 0x200, 0x4);
    TEST_IMM_OP(22, binvi, 0x0000000000000404, 0x400, 0x2);
    TEST_IMM_OP(23, binvi, 0x0000000000000802, 0x800, 0x1);
    TEST_IMM_OP(24, binvi, 0x0000000000001008, 0x1000, 0x3);
    TEST_IMM_OP(25, binvi, 0x0000000008002000, 0x2000, 0x1b);
    TEST_IMM_OP(26, binvi, 0x0000000000004001, 0x4000, 0x0);
    TEST_IMM_OP(27, binvi, 0x0000000000008008, 0x8000, 0x3);
    TEST_IMM_OP(28, binvi, 0x0000000000018000, 0x10000, 0xf);
    TEST_IMM_OP(29, binvi, 0x0000000000028000, 0x20000, 0xf);
    TEST_IMM_OP(30, binvi, 0x0000000000040800, 0x40000, 0xb);
    TEST_IMM_OP(31, binvi, 0x0000000008080000, 0x80000, 0x1b);
    TEST_IMM_OP(32, binvi, 0x0000000000100002, 0x100000, 0x1);
    TEST_IMM_OP(33, binvi, 0x0000000000000000, 0x200000, 0x15);
    TEST_IMM_OP(34, binvi, 0x0000000080400000, 0x400000, 0x1f);
    TEST_IMM_OP(35, binvi, 0x0000000000808000, 0x800000, 0xf);
    TEST_IMM_OP(36, binvi, 0x0000000001800000, 0x1000000, 0x17);
    TEST_IMM_OP(37, binvi, 0x000000000a000000, 0x2000000, 0x1b);
    TEST_IMM_OP(38, binvi, 0x0000000024000000, 0x4000000, 0x1d);
    TEST_IMM_OP(39, binvi, 0x0000000048000000, 0x8000000, 0x1e);
    TEST_IMM_OP(40, binvi, 0x0000000010000001, 0x10000000, 0x0);
    TEST_IMM_OP(41, binvi, 0x0000000020010000, 0x20000000, 0x10);
    TEST_IMM_OP(42, binvi, 0x0000000040000100, 0x40000000, 0x8);
    TEST_IMM_OP(43, binvi, 0x0000000080000010, 0x80000000, 0x4);
    TEST_IMM_OP(44, binvi, 0x0000000100000004, 0x100000000, 0x2);
    TEST_IMM_OP(45, binvi, 0x0000000200000002, 0x200000000, 0x1);
    TEST_IMM_OP(46, binvi, 0x0000000400000008, 0x400000000, 0x3);
    TEST_IMM_OP(47, binvi, 0x0000000808000000, 0x800000000, 0x1b);
    TEST_IMM_OP(48, binvi, 0x0000001000000001, 0x1000000000, 0x0);
    TEST_IMM_OP(49, binvi, 0x0000002000000008, 0x2000000000, 0x3);
    TEST_IMM_OP(50, binvi, 0x0000004000008000, 0x4000000000, 0xf);
    TEST_IMM_OP(51, binvi, 0x0000008000008000, 0x8000000000, 0xf);
    TEST_IMM_OP(52, binvi, 0x0000010000000800, 0x10000000000, 0xb);
    TEST_IMM_OP(53, binvi, 0x0000020008000000, 0x20000000000, 0x1b);
    TEST_IMM_OP(54, binvi, 0x0000040000000002, 0x40000000000, 0x1);
    TEST_IMM_OP(55, binvi, 0x0000080000200000, 0x80000000000, 0x15);
    TEST_IMM_OP(56, binvi, 0x0000100080000000, 0x100000000000, 0x1f);
    TEST_IMM_OP(57, binvi, 0x0000200000008000, 0x200000000000, 0xf);
    TEST_IMM_OP(58, binvi, 0x0000400000800000, 0x400000000000, 0x17);
    TEST_IMM_OP(59, binvi, 0x0000800008000000, 0x800000000000, 0x1b);
    TEST_IMM_OP(60, binvi, 0x0001000020000000, 0x1000000000000, 0x1d);
    TEST_IMM_OP(61, binvi, 0x0002000040000000, 0x2000000000000, 0x1e);
    TEST_IMM_OP(62, binvi, 0x0004000000000001, 0x4000000000000, 0x0);
    TEST_IMM_OP(63, binvi, 0x0008000000010000, 0x8000000000000, 0x10);
    TEST_IMM_OP(64, binvi, 0x0010000000000100, 0x10000000000000, 0x8);
    TEST_IMM_OP(65, binvi, 0x0020000000000010, 0x20000000000000, 0x4);
    TEST_IMM_OP(66, binvi, 0x0040000000000004, 0x40000000000000, 0x2);
    TEST_IMM_OP(67, binvi, 0x0080000000000002, 0x80000000000000, 0x1);
    TEST_IMM_OP(68, binvi, 0x0100000000000008, 0x100000000000000, 0x3);
    TEST_IMM_OP(69, binvi, 0x0200000008000000, 0x200000000000000, 0x1b);
    TEST_IMM_OP(70, binvi, 0x0400000000000001, 0x400000000000000, 0x0);
    TEST_IMM_OP(71, binvi, 0x0800000000000008, 0x800000000000000, 0x3);
    TEST_IMM_OP(72, binvi, 0x1000000000008000, 0x1000000000000000, 0xf);
    TEST_IMM_OP(73, binvi, 0x2000000000008000, 0x2000000000000000, 0xf);
    TEST_IMM_OP(74, binvi, 0x4000000000000800, 0x4000000000000000, 0xb);
    TEST_IMM_OP(75, binvi, 0x8000000008000000, 0x8000000000000000, 0x1b);
    TEST_IMM_OP(76, binvi, 0x0000000000000002, 0x0, 0x1);
    TEST_IMM_OP(77, binvi, 0xffffffffffdffffe, 0xfffffffffffffffe, 0x15);
    TEST_IMM_OP(78, binvi, 0xffffffff7ffffffd, 0xfffffffffffffffd, 0x1f);
    TEST_IMM_OP(79, binvi, 0xffffffffffff7ffb, 0xfffffffffffffffb, 0xf);
    TEST_IMM_OP(80, binvi, 0xffffffffff7ffff7, 0xfffffffffffffff7, 0x17);
    TEST_IMM_OP(81, binvi, 0xfffffffff7ffffef, 0xffffffffffffffef, 0x1b);
    TEST_IMM_OP(82, binvi, 0xffffffffdfffffdf, 0xffffffffffffffdf, 0x1d);
    TEST_IMM_OP(83, binvi, 0xffffffffbfffffbf, 0xffffffffffffffbf, 0x1e);
    TEST_IMM_OP(84, binvi, 0xffffffffffffff7e, 0xffffffffffffff7f, 0x0);
    TEST_IMM_OP(85, binvi, 0xfffffffffffefeff, 0xfffffffffffffeff, 0x10);
    TEST_IMM_OP(86, binvi, 0xfffffffffffffcff, 0xfffffffffffffdff, 0x8);
    TEST_IMM_OP(87, binvi, 0xfffffffffffffbef, 0xfffffffffffffbff, 0x4);
    TEST_IMM_OP(88, binvi, 0xfffffffffffff7fb, 0xfffffffffffff7ff, 0x2);
    TEST_IMM_OP(89, binvi, 0xffffffffffffeffd, 0xffffffffffffefff, 0x1);
    TEST_IMM_OP(90, binvi, 0xffffffffffffdff7, 0xffffffffffffdfff, 0x3);
    TEST_IMM_OP(91, binvi, 0xfffffffff7ffbfff, 0xffffffffffffbfff, 0x1b);
    TEST_IMM_OP(92, binvi, 0xffffffffffff7ffe, 0xffffffffffff7fff, 0x0);
    TEST_IMM_OP(93, binvi, 0xfffffffffffefff7, 0xfffffffffffeffff, 0x3);
    TEST_IMM_OP(94, binvi, 0xfffffffffffd7fff, 0xfffffffffffdffff, 0xf);
    TEST_IMM_OP(95, binvi, 0xfffffffffffb7fff, 0xfffffffffffbffff, 0xf);
    TEST_IMM_OP(96, binvi, 0xfffffffffff7f7ff, 0xfffffffffff7ffff, 0xb);
    TEST_IMM_OP(97, binvi, 0xfffffffff7efffff, 0xffffffffffefffff, 0x1b);
    TEST_IMM_OP(98, binvi, 0xffffffffffdffffd, 0xffffffffffdfffff, 0x1);
    TEST_IMM_OP(99, binvi, 0xffffffffff9fffff, 0xffffffffffbfffff, 0x15);
    TEST_IMM_OP(100, binvi, 0xffffffff7f7fffff, 0xffffffffff7fffff, 0x1f);
    TEST_IMM_OP(101, binvi, 0xfffffffffeff7fff, 0xfffffffffeffffff, 0xf);
    TEST_IMM_OP(102, binvi, 0xfffffffffd7fffff, 0xfffffffffdffffff, 0x17);
    TEST_IMM_OP(103, binvi, 0xfffffffff3ffffff, 0xfffffffffbffffff, 0x1b);
    TEST_IMM_OP(104, binvi, 0xffffffffd7ffffff, 0xfffffffff7ffffff, 0x1d);
    TEST_IMM_OP(105, binvi, 0xffffffffafffffff, 0xffffffffefffffff, 0x1e);
    TEST_IMM_OP(106, binvi, 0xffffffffdffffffe, 0xffffffffdfffffff, 0x0);
    TEST_IMM_OP(107, binvi, 0xffffffffbffeffff, 0xffffffffbfffffff, 0x10);
    TEST_IMM_OP(108, binvi, 0xffffffff7ffffeff, 0xffffffff7fffffff, 0x8);
    TEST_IMM_OP(109, binvi, 0xfffffffeffffffef, 0xfffffffeffffffff, 0x4);
    TEST_IMM_OP(110, binvi, 0xfffffffdfffffffb, 0xfffffffdffffffff, 0x2);
    TEST_IMM_OP(111, binvi, 0xfffffffbfffffffd, 0xfffffffbffffffff, 0x1);
    TEST_IMM_OP(112, binvi, 0xfffffff7fffffff7, 0xfffffff7ffffffff, 0x3);
    TEST_IMM_OP(113, binvi, 0xffffffeff7ffffff, 0xffffffefffffffff, 0x1b);
    TEST_IMM_OP(114, binvi, 0xffffffdffffffffe, 0xffffffdfffffffff, 0x0);
    TEST_IMM_OP(115, binvi, 0xffffffbffffffff7, 0xffffffbfffffffff, 0x3);
    TEST_IMM_OP(116, binvi, 0xffffff7fffff7fff, 0xffffff7fffffffff, 0xf);
    TEST_IMM_OP(117, binvi, 0xfffffeffffff7fff, 0xfffffeffffffffff, 0xf);
    TEST_IMM_OP(118, binvi, 0xfffffdfffffff7ff, 0xfffffdffffffffff, 0xb);
    TEST_IMM_OP(119, binvi, 0xfffffbfff7ffffff, 0xfffffbffffffffff, 0x1b);
    TEST_IMM_OP(120, binvi, 0xfffff7fffffffffd, 0xfffff7ffffffffff, 0x1);
    TEST_IMM_OP(121, binvi, 0xffffefffffdfffff, 0xffffefffffffffff, 0x15);
    TEST_IMM_OP(122, binvi, 0xffffdfff7fffffff, 0xffffdfffffffffff, 0x1f);
    TEST_IMM_OP(123, binvi, 0xffffbfffffff7fff, 0xffffbfffffffffff, 0xf);
    TEST_IMM_OP(124, binvi, 0xffff7fffff7fffff, 0xffff7fffffffffff, 0x17);
    TEST_IMM_OP(125, binvi, 0xfffefffff7ffffff, 0xfffeffffffffffff, 0x1b);
    TEST_IMM_OP(126, binvi, 0xfffdffffdfffffff, 0xfffdffffffffffff, 0x1d);
    TEST_IMM_OP(127, binvi, 0xfffbffffbfffffff, 0xfffbffffffffffff, 0x1e);
    TEST_IMM_OP(128, binvi, 0xfff7fffffffffffe, 0xfff7ffffffffffff, 0x0);
    TEST_IMM_OP(129, binvi, 0xffeffffffffeffff, 0xffefffffffffffff, 0x10);
    TEST_IMM_OP(130, binvi, 0xffdffffffffffeff, 0xffdfffffffffffff, 0x8);
    TEST_IMM_OP(131, binvi, 0xffbfffffffffffef, 0xffbfffffffffffff, 0x4);
    TEST_IMM_OP(132, binvi, 0xff7ffffffffffffe, 0xff7fffffffffffff, 0x0);
    TEST_IMM_OP(133, binvi, 0xfefffffffffffffe, 0xfeffffffffffffff, 0x0);
    TEST_IMM_OP(134, binvi, 0xfdfffffffffffffe, 0xfdffffffffffffff, 0x0);
    TEST_IMM_OP(135, binvi, 0xfbfffffffffffffe, 0xfbffffffffffffff, 0x0);
    TEST_IMM_OP(136, binvi, 0xf7fffffffffffffe, 0xf7ffffffffffffff, 0x0);
    TEST_IMM_OP(137, binvi, 0xeffffffffffffffe, 0xefffffffffffffff, 0x0);
    TEST_IMM_OP(138, binvi, 0xdffffffffffffffe, 0xdfffffffffffffff, 0x0);
    TEST_IMM_OP(139, binvi, 0xbffffffffffffffe, 0xbfffffffffffffff, 0x0);
    TEST_IMM_OP(140, binvi, 0x7ffffffffffffffe, 0x7fffffffffffffff, 0x0);
    TEST_IMM_OP(141, binvi, 0xfffffffffffffffe, 0xffffffffffffffff, 0x0);
    TEST_IMM_OP(142, binvi, 0x0000000000000000, 0x1, 0x0);
    TEST_IMM_OP(143, binvi, 0x0000000000000003, 0x2, 0x0);
    TEST_IMM_OP(144, binvi, 0x0000000000000005, 0x4, 0x0);
    TEST_IMM_OP(145, binvi, 0x0000000000000009, 0x8, 0x0);
    TEST_IMM_OP(146, binvi, 0x0000000000000011, 0x10, 0x0);
    TEST_IMM_OP(147, binvi, 0x0000000000000021, 0x20, 0x0);
    TEST_IMM_OP(148, binvi, 0x0000000000000041, 0x40, 0x0);
    TEST_IMM_OP(149, binvi, 0x0000000000000081, 0x80, 0x0);
    TEST_IMM_OP(150, binvi, 0x0000000000000101, 0x100, 0x0);
    TEST_IMM_OP(151, binvi, 0x0000000000000201, 0x200, 0x0);
    TEST_IMM_OP(152, binvi, 0x0000000000000401, 0x400, 0x0);
    TEST_IMM_OP(153, binvi, 0x0000000000000801, 0x800, 0x0);
    TEST_IMM_OP(154, binvi, 0x0000000000001001, 0x1000, 0x0);
    TEST_IMM_OP(155, binvi, 0x0000000000002001, 0x2000, 0x0);
    TEST_IMM_OP(156, binvi, 0x0000000000004001, 0x4000, 0x0);
    TEST_IMM_OP(157, binvi, 0x0000000000008001, 0x8000, 0x0);
    TEST_IMM_OP(158, binvi, 0x0000000000010001, 0x10000, 0x0);
    TEST_IMM_OP(159, binvi, 0x0000000000020001, 0x20000, 0x0);
    TEST_IMM_OP(160, binvi, 0x0000000000040001, 0x40000, 0x0);
    TEST_IMM_OP(161, binvi, 0x0000000000080001, 0x80000, 0x0);
    TEST_IMM_OP(162, binvi, 0x0000000000100001, 0x100000, 0x0);
    TEST_IMM_OP(163, binvi, 0x0000000000200001, 0x200000, 0x0);
    TEST_IMM_OP(164, binvi, 0x0000000000400001, 0x400000, 0x0);
    TEST_IMM_OP(165, binvi, 0x0000000000800001, 0x800000, 0x0);
    TEST_IMM_OP(166, binvi, 0x0000000001000001, 0x1000000, 0x0);
    TEST_IMM_OP(167, binvi, 0x0000000002000001, 0x2000000, 0x0);
    TEST_IMM_OP(168, binvi, 0x0000000004000001, 0x4000000, 0x0);
    TEST_IMM_OP(169, binvi, 0x0000000008000001, 0x8000000, 0x0);
    TEST_IMM_OP(170, binvi, 0x0000000010000001, 0x10000000, 0x0);
    TEST_IMM_OP(171, binvi, 0x0000000020000001, 0x20000000, 0x0);
    TEST_IMM_OP(172, binvi, 0x0000000040000001, 0x40000000, 0x0);
    TEST_IMM_OP(173, binvi, 0x0000000080000001, 0x80000000, 0x0);
    TEST_IMM_OP(174, binvi, 0x0000000100000001, 0x100000000, 0x0);
    TEST_IMM_OP(175, binvi, 0x0000000200000001, 0x200000000, 0x0);
    TEST_IMM_OP(176, binvi, 0x0000000400000001, 0x400000000, 0x0);
    TEST_IMM_OP(177, binvi, 0x0000000800000001, 0x800000000, 0x0);
    TEST_IMM_OP(178, binvi, 0x0000001000000001, 0x1000000000, 0x0);
    TEST_IMM_OP(179, binvi, 0x0000002000000001, 0x2000000000, 0x0);
    TEST_IMM_OP(180, binvi, 0x0000004000000001, 0x4000000000, 0x0);
    TEST_IMM_OP(181, binvi, 0x0000008000000001, 0x8000000000, 0x0);
    TEST_IMM_OP(182, binvi, 0x0000010000000001, 0x10000000000, 0x0);
    TEST_IMM_OP(183, binvi, 0x0000020000000001, 0x20000000000, 0x0);
    TEST_IMM_OP(184, binvi, 0x0000040000000001, 0x40000000000, 0x0);
    TEST_IMM_OP(185, binvi, 0x0000080000000001, 0x80000000000, 0x0);
    TEST_IMM_OP(186, binvi, 0x0000100000000001, 0x100000000000, 0x0);
    TEST_IMM_OP(187, binvi, 0x0000200000000001, 0x200000000000, 0x0);
    TEST_IMM_OP(188, binvi, 0x0000400000000001, 0x400000000000, 0x0);
    TEST_IMM_OP(189, binvi, 0x0000800000000001, 0x800000000000, 0x0);
    TEST_IMM_OP(190, binvi, 0x0001000000000001, 0x1000000000000, 0x0);
    TEST_IMM_OP(191, binvi, 0x0002000000000001, 0x2000000000000, 0x0);
    TEST_IMM_OP(192, binvi, 0x0004000000000001, 0x4000000000000, 0x0);
    TEST_IMM_OP(193, binvi, 0x0008000000000001, 0x8000000000000, 0x0);
    TEST_IMM_OP(194, binvi, 0x0010000000000001, 0x10000000000000, 0x0);
    TEST_IMM_OP(195, binvi, 0x0020000000000001, 0x20000000000000, 0x0);
    TEST_IMM_OP(196, binvi, 0x0040000000000001, 0x40000000000000, 0x0);
    TEST_IMM_OP(197, binvi, 0x0080000000000001, 0x80000000000000, 0x0);
    TEST_IMM_OP(198, binvi, 0x0100000000000001, 0x100000000000000, 0x0);
    TEST_IMM_OP(199, binvi, 0x0200000000000001, 0x200000000000000, 0x0);
    TEST_IMM_OP(200, binvi, 0x0400000000000001, 0x400000000000000, 0x0);
    TEST_IMM_OP(201, binvi, 0x0800000000000001, 0x800000000000000, 0x0);
    TEST_IMM_OP(202, binvi, 0x1000000000000001, 0x1000000000000000, 0x0);
    TEST_IMM_OP(203, binvi, 0x2000000000000001, 0x2000000000000000, 0x0);
    TEST_IMM_OP(204, binvi, 0x4000000000000001, 0x4000000000000000, 0x0);
    TEST_IMM_OP(205, binvi, 0x8000000000000001, 0x8000000000000000, 0x0);
    TEST_IMM_OP(206, binvi, 0x0000000000000001, 0x0, 0x0);
    TEST_IMM_OP(207, binvi, 0xffffffffffffffff, 0xfffffffffffffffe, 0x0);
    TEST_IMM_OP(208, binvi, 0xfffffffffffffffc, 0xfffffffffffffffd, 0x0);
    TEST_IMM_OP(209, binvi, 0xfffffffffffffffa, 0xfffffffffffffffb, 0x0);
    TEST_IMM_OP(210, binvi, 0xfffffffffffffff6, 0xfffffffffffffff7, 0x0);
    TEST_IMM_OP(211, binvi, 0xffffffffffffffee, 0xffffffffffffffef, 0x0);
    TEST_IMM_OP(212, binvi, 0xffffffffffffffde, 0xffffffffffffffdf, 0x0);
    TEST_IMM_OP(213, binvi, 0xffffffffffffffbe, 0xffffffffffffffbf, 0x0);
    TEST_IMM_OP(214, binvi, 0xffffffffffffff7e, 0xffffffffffffff7f, 0x0);
    TEST_IMM_OP(215, binvi, 0xfffffffffffffefe, 0xfffffffffffffeff, 0x0);
    TEST_IMM_OP(216, binvi, 0xfffffffffffffdfe, 0xfffffffffffffdff, 0x0);
    TEST_IMM_OP(217, binvi, 0xfffffffffffffbfe, 0xfffffffffffffbff, 0x0);
    TEST_IMM_OP(218, binvi, 0xfffffffffffff7fe, 0xfffffffffffff7ff, 0x0);
    TEST_IMM_OP(219, binvi, 0xffffffffffffeffe, 0xffffffffffffefff, 0x0);
    TEST_IMM_OP(220, binvi, 0xffffffffffffdffe, 0xffffffffffffdfff, 0x0);
    TEST_IMM_OP(221, binvi, 0xffffffffffffbffe, 0xffffffffffffbfff, 0x0);
    TEST_IMM_OP(222, binvi, 0xffffffffffff7ffe, 0xffffffffffff7fff, 0x0);
    TEST_IMM_OP(223, binvi, 0xfffffffffffefffe, 0xfffffffffffeffff, 0x0);
    TEST_IMM_OP(224, binvi, 0xfffffffffffdfffe, 0xfffffffffffdffff, 0x0);
    TEST_IMM_OP(225, binvi, 0xfffffffffffbfffe, 0xfffffffffffbffff, 0x0);
    TEST_IMM_OP(226, binvi, 0xfffffffffff7fffe, 0xfffffffffff7ffff, 0x0);
    TEST_IMM_OP(227, binvi, 0xffffffffffeffffe, 0xffffffffffefffff, 0x0);
    TEST_IMM_OP(228, binvi, 0xffffffffffdffffe, 0xffffffffffdfffff, 0x0);
    TEST_IMM_OP(229, binvi, 0xffffffffffbffffe, 0xffffffffffbfffff, 0x0);
    TEST_IMM_OP(230, binvi, 0xffffffffff7ffffe, 0xffffffffff7fffff, 0x0);
    TEST_IMM_OP(231, binvi, 0xfffffffffefffffe, 0xfffffffffeffffff, 0x0);
    TEST_IMM_OP(232, binvi, 0xfffffffffdfffffe, 0xfffffffffdffffff, 0x0);
    TEST_IMM_OP(233, binvi, 0xfffffffffbfffffe, 0xfffffffffbffffff, 0x0);
    TEST_IMM_OP(234, binvi, 0xfffffffff7fffffe, 0xfffffffff7ffffff, 0x0);
    TEST_IMM_OP(235, binvi, 0xffffffffeffffffe, 0xffffffffefffffff, 0x0);
    TEST_IMM_OP(236, binvi, 0xffffffffdffffffe, 0xffffffffdfffffff, 0x0);
    TEST_IMM_OP(237, binvi, 0xffffffffbffffffe, 0xffffffffbfffffff, 0x0);
    TEST_IMM_OP(238, binvi, 0xffffffff7ffffffe, 0xffffffff7fffffff, 0x0);
    TEST_IMM_OP(239, binvi, 0xfffffffefffffffe, 0xfffffffeffffffff, 0x0);
    TEST_IMM_OP(240, binvi, 0xfffffffdfffffffe, 0xfffffffdffffffff, 0x0);
    TEST_IMM_OP(241, binvi, 0xfffffffbfffffffe, 0xfffffffbffffffff, 0x0);
    TEST_IMM_OP(242, binvi, 0xfffffff7fffffffe, 0xfffffff7ffffffff, 0x0);
    TEST_IMM_OP(243, binvi, 0xffffffeffffffffe, 0xffffffefffffffff, 0x0);
    TEST_IMM_OP(244, binvi, 0xffffffdffffffffe, 0xffffffdfffffffff, 0x0);
    TEST_IMM_OP(245, binvi, 0xffffffbffffffffe, 0xffffffbfffffffff, 0x0);
    TEST_IMM_OP(246, binvi, 0xffffff7ffffffffe, 0xffffff7fffffffff, 0x0);
    TEST_IMM_OP(247, binvi, 0xfffffefffffffffe, 0xfffffeffffffffff, 0x0);
    TEST_IMM_OP(248, binvi, 0xfffffdfffffffffe, 0xfffffdffffffffff, 0x0);
    TEST_IMM_OP(249, binvi, 0xfffffbfffffffffe, 0xfffffbffffffffff, 0x0);
    TEST_IMM_OP(250, binvi, 0xfffff7fffffffffe, 0xfffff7ffffffffff, 0x0);
    TEST_IMM_OP(251, binvi, 0xffffeffffffffffe, 0xffffefffffffffff, 0x0);
    TEST_IMM_OP(252, binvi, 0xffffdffffffffffe, 0xffffdfffffffffff, 0x0);
    TEST_IMM_OP(253, binvi, 0xffffbffffffffffe, 0xffffbfffffffffff, 0x0);
    TEST_IMM_OP(254, binvi, 0xffff7ffffffffffe, 0xffff7fffffffffff, 0x0);
    TEST_IMM_OP(255, binvi, 0xfffefffffffffffe, 0xfffeffffffffffff, 0x0);
    TEST_IMM_OP(256, binvi, 0xfffdfffffffffffe, 0xfffdffffffffffff, 0x0);
    TEST_IMM_OP(257, binvi, 0xfffbfffffffffffe, 0xfffbffffffffffff, 0x0);
    TEST_IMM_OP(258, binvi, 0xfff7fffffffffffe, 0xfff7ffffffffffff, 0x0);
    TEST_IMM_OP(259, binvi, 0xffeffffffffffffe, 0xffefffffffffffff, 0x0);
    TEST_IMM_OP(260, binvi, 0xffdffffffffffffe, 0xffdfffffffffffff, 0x0);
    TEST_IMM_OP(261, binvi, 0xffbffffffffffffe, 0xffbfffffffffffff, 0x0);
    TEST_IMM_OP(262, binvi, 0xff7ffffffffffeff, 0xff7fffffffffffff, 0x8);
    TEST_IMM_OP(263, binvi, 0xfeffffffffffffef, 0xfeffffffffffffff, 0x4);
    TEST_IMM_OP(264, binvi, 0xfdfffffffffffffb, 0xfdffffffffffffff, 0x2);
    TEST_IMM_OP(265, binvi, 0xfbfffffffffffffd, 0xfbffffffffffffff, 0x1);
    TEST_IMM_OP(266, binvi, 0xf7fffffffffffff7, 0xf7ffffffffffffff, 0x3);
    TEST_IMM_OP(267, binvi, 0xeffffffff7ffffff, 0xefffffffffffffff, 0x1b);
    TEST_IMM_OP(268, binvi, 0xdffffffffffffffe, 0xdfffffffffffffff, 0x0);
    TEST_IMM_OP(269, binvi, 0xbffffffffffffff7, 0xbfffffffffffffff, 0x3);
    TEST_IMM_OP(270, binvi, 0x7fffffffffff7fff, 0x7fffffffffffffff, 0xf);
    TEST_IMM_OP(271, binvi, 0xffffffffffff7fff, 0xffffffffffffffff, 0xf);

TEST_PASSFAIL
RVTEST_CODE_END
  .data
RVTEST_DATA_BEGIN
  TEST_DATA
RVTEST_DATA_END

